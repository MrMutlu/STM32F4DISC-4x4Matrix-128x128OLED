
4x4ButtonDeneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ac  080047ac  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b4  080047b4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b8  080047b8  000147b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080047bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00000938  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000964  20000964  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003169a  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f6d  00000000  00000000  00051739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002150  00000000  00000000  000546a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018d5  00000000  00000000  000567f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021b7f  00000000  00000000  000580cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014c1e  00000000  00000000  00079c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3264  00000000  00000000  0008e86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008f9c  00000000  00000000  00161ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0016aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004260 	.word	0x08004260

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08004260 	.word	0x08004260

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_Init+0x40>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <HAL_Init+0x40>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <HAL_Init+0x40>)
 80004da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <HAL_Init+0x40>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 f931 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 f808 	bl	8000508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004f8:	f001 fef6 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004fc:	2300      	movs	r3, #0
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40023c00 	.word	0x40023c00

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_InitTick+0x54>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x58>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	4619      	mov	r1, r3
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000522:	fbb2 f3f3 	udiv	r3, r2, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f93b 	bl	80007a2 <HAL_SYSTICK_Config>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	e00e      	b.n	8000554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d80a      	bhi.n	8000552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 f911 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000548:	4a06      	ldr	r2, [pc, #24]	; (8000564 <HAL_InitTick+0x5c>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	e000      	b.n	8000554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000028 	.word	0x20000028
 8000560:	20000004 	.word	0x20000004
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000004 	.word	0x20000004
 800058c:	20000048 	.word	0x20000048

08000590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <HAL_GetTick+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000048 	.word	0x20000048

080005a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b0:	f7ff ffee 	bl	8000590 <HAL_GetTick>
 80005b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c0:	d005      	beq.n	80005ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_Delay+0x44>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ce:	bf00      	nop
 80005d0:	f7ff ffde 	bl	8000590 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d8f7      	bhi.n	80005d0 <HAL_Delay+0x28>
  {
  }
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5c 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff8e 	bl	80006a8 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	e16b      	b.n	8000ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d8:	2201      	movs	r2, #1
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	f040 815a 	bne.w	8000aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f003 0303 	and.w	r3, r3, #3
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d005      	beq.n	800080e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800080a:	2b02      	cmp	r3, #2
 800080c:	d130      	bne.n	8000870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2203      	movs	r2, #3
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	4013      	ands	r3, r2
 8000824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000844:	2201      	movs	r2, #1
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	4013      	ands	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	091b      	lsrs	r3, r3, #4
 800085a:	f003 0201 	and.w	r2, r3, #1
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4313      	orrs	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f003 0303 	and.w	r3, r3, #3
 8000878:	2b03      	cmp	r3, #3
 800087a:	d017      	beq.n	80008ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 0303 	and.w	r3, r3, #3
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d123      	bne.n	8000900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	08da      	lsrs	r2, r3, #3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3208      	adds	r2, #8
 80008c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	220f      	movs	r2, #15
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4013      	ands	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	691a      	ldr	r2, [r3, #16]
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	08da      	lsrs	r2, r3, #3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3208      	adds	r2, #8
 80008fa:	69b9      	ldr	r1, [r7, #24]
 80008fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0203 	and.w	r2, r3, #3
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80b4 	beq.w	8000aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a5f      	ldr	r2, [pc, #380]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b5d      	ldr	r3, [pc, #372]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800095e:	4a5b      	ldr	r2, [pc, #364]	; (8000acc <HAL_GPIO_Init+0x310>)
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	3302      	adds	r3, #2
 8000966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	220f      	movs	r2, #15
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4013      	ands	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a52      	ldr	r2, [pc, #328]	; (8000ad0 <HAL_GPIO_Init+0x314>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d02b      	beq.n	80009e2 <HAL_GPIO_Init+0x226>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a51      	ldr	r2, [pc, #324]	; (8000ad4 <HAL_GPIO_Init+0x318>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d025      	beq.n	80009de <HAL_GPIO_Init+0x222>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a50      	ldr	r2, [pc, #320]	; (8000ad8 <HAL_GPIO_Init+0x31c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d01f      	beq.n	80009da <HAL_GPIO_Init+0x21e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4f      	ldr	r2, [pc, #316]	; (8000adc <HAL_GPIO_Init+0x320>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x21a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4e      	ldr	r2, [pc, #312]	; (8000ae0 <HAL_GPIO_Init+0x324>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x216>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4d      	ldr	r2, [pc, #308]	; (8000ae4 <HAL_GPIO_Init+0x328>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x212>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4c      	ldr	r2, [pc, #304]	; (8000ae8 <HAL_GPIO_Init+0x32c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x20e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4b      	ldr	r2, [pc, #300]	; (8000aec <HAL_GPIO_Init+0x330>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x20a>
 80009c2:	2307      	movs	r3, #7
 80009c4:	e00e      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009c6:	2308      	movs	r3, #8
 80009c8:	e00c      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e00a      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ce:	2305      	movs	r3, #5
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f4:	4935      	ldr	r1, [pc, #212]	; (8000acc <HAL_GPIO_Init+0x310>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a02:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a26:	4a32      	ldr	r2, [pc, #200]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a2c:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a50:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_GPIO_Init+0x334>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f ae90 	bls.w	80007d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	40021800 	.word	0x40021800
 8000aec:	40021c00 	.word	0x40021c00
 8000af0:	40013c00 	.word	0x40013c00

08000af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691a      	ldr	r2, [r3, #16]
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e001      	b.n	8000b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b40:	e003      	b.n	8000b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	041a      	lsls	r2, r3, #16
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	619a      	str	r2, [r3, #24]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e267      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d075      	beq.n	8000c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b76:	4b88      	ldr	r3, [pc, #544]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d00c      	beq.n	8000b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b82:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d112      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b8e:	4b82      	ldr	r3, [pc, #520]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b9a:	d10b      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9c:	4b7e      	ldr	r3, [pc, #504]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d05b      	beq.n	8000c60 <HAL_RCC_OscConfig+0x108>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d157      	bne.n	8000c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e242      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bbc:	d106      	bne.n	8000bcc <HAL_RCC_OscConfig+0x74>
 8000bbe:	4b76      	ldr	r3, [pc, #472]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a75      	ldr	r2, [pc, #468]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e01d      	b.n	8000c08 <HAL_RCC_OscConfig+0xb0>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x98>
 8000bd6:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a6f      	ldr	r2, [pc, #444]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b6d      	ldr	r3, [pc, #436]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a6c      	ldr	r2, [pc, #432]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e00b      	b.n	8000c08 <HAL_RCC_OscConfig+0xb0>
 8000bf0:	4b69      	ldr	r3, [pc, #420]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a68      	ldr	r2, [pc, #416]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b66      	ldr	r3, [pc, #408]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a65      	ldr	r2, [pc, #404]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d013      	beq.n	8000c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fcbe 	bl	8000590 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff fcba 	bl	8000590 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e207      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2a:	4b5b      	ldr	r3, [pc, #364]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f0      	beq.n	8000c18 <HAL_RCC_OscConfig+0xc0>
 8000c36:	e014      	b.n	8000c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fcaa 	bl	8000590 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fca6 	bl	8000590 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e1f3      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c52:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0xe8>
 8000c5e:	e000      	b.n	8000c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d063      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00b      	beq.n	8000c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c7a:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d11c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d116      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c92:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <HAL_RCC_OscConfig+0x152>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d001      	beq.n	8000caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e1c7      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4937      	ldr	r1, [pc, #220]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	e03a      	b.n	8000d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d020      	beq.n	8000d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc8:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <HAL_RCC_OscConfig+0x244>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cce:	f7ff fc5f 	bl	8000590 <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd6:	f7ff fc5b 	bl	8000590 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e1a8      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f0      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4925      	ldr	r1, [pc, #148]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
 8000d08:	e015      	b.n	8000d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_RCC_OscConfig+0x244>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc3e 	bl	8000590 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc3a 	bl	8000590 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e187      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d036      	beq.n	8000db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d016      	beq.n	8000d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_RCC_OscConfig+0x248>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc1e 	bl	8000590 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fc1a 	bl	8000590 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e167      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_RCC_OscConfig+0x240>)
 8000d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0x200>
 8000d76:	e01b      	b.n	8000db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_RCC_OscConfig+0x248>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fc07 	bl	8000590 <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d84:	e00e      	b.n	8000da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d86:	f7ff fc03 	bl	8000590 <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d907      	bls.n	8000da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e150      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	42470000 	.word	0x42470000
 8000da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4b88      	ldr	r3, [pc, #544]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1ea      	bne.n	8000d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 8097 	beq.w	8000eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b81      	ldr	r3, [pc, #516]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10f      	bne.n	8000dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b7d      	ldr	r3, [pc, #500]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a7c      	ldr	r2, [pc, #496]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b7a      	ldr	r3, [pc, #488]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	4b77      	ldr	r3, [pc, #476]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d118      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfa:	4b74      	ldr	r3, [pc, #464]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a73      	ldr	r2, [pc, #460]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fbc3 	bl	8000590 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0e:	f7ff fbbf 	bl	8000590 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e10c      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_RCC_OscConfig+0x474>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <HAL_RCC_OscConfig+0x2ea>
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e38:	4a63      	ldr	r2, [pc, #396]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e40:	e01c      	b.n	8000e7c <HAL_RCC_OscConfig+0x324>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x30c>
 8000e4a:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4e:	4a5e      	ldr	r2, [pc, #376]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6713      	str	r3, [r2, #112]	; 0x70
 8000e56:	4b5c      	ldr	r3, [pc, #368]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5a:	4a5b      	ldr	r2, [pc, #364]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6713      	str	r3, [r2, #112]	; 0x70
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0x324>
 8000e64:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e68:	4a57      	ldr	r2, [pc, #348]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e70:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	4a54      	ldr	r2, [pc, #336]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000e76:	f023 0304 	bic.w	r3, r3, #4
 8000e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d015      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e84:	f7ff fb84 	bl	8000590 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e8a:	e00a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fb80 	bl	8000590 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e0cb      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0ee      	beq.n	8000e8c <HAL_RCC_OscConfig+0x334>
 8000eae:	e014      	b.n	8000eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fb6e 	bl	8000590 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb6:	e00a      	b.n	8000ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fb6a 	bl	8000590 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e0b5      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ece:	4b3e      	ldr	r3, [pc, #248]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1ee      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d105      	bne.n	8000eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80a1 	beq.w	8001038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d05c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d141      	bne.n	8000f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_RCC_OscConfig+0x478>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb3e 	bl	8000590 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f18:	f7ff fb3a 	bl	8000590 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e087      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	019b      	lsls	r3, r3, #6
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	085b      	lsrs	r3, r3, #1
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	061b      	lsls	r3, r3, #24
 8000f5a:	491b      	ldr	r1, [pc, #108]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_RCC_OscConfig+0x478>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fb13 	bl	8000590 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6e:	f7ff fb0f 	bl	8000590 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e05c      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x416>
 8000f8c:	e054      	b.n	8001038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_RCC_OscConfig+0x478>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fafc 	bl	8000590 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff faf8 	bl	8000590 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e045      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_RCC_OscConfig+0x470>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x444>
 8000fba:	e03d      	b.n	8001038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e038      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000
 8000fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_RCC_OscConfig+0x4ec>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d028      	beq.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d121      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d11a      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001004:	4013      	ands	r3, r2
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800100a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800100c:	4293      	cmp	r3, r2
 800100e:	d111      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	3b01      	subs	r3, #1
 800101e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001020:	429a      	cmp	r2, r3
 8001022:	d107      	bne.n	8001034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0cc      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800105c:	4b68      	ldr	r3, [pc, #416]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d90c      	bls.n	8001084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106a:	4b65      	ldr	r3, [pc, #404]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001072:	4b63      	ldr	r3, [pc, #396]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d001      	beq.n	8001084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0b8      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800109c:	4b59      	ldr	r3, [pc, #356]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4a58      	ldr	r2, [pc, #352]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b4:	4b53      	ldr	r3, [pc, #332]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c0:	4b50      	ldr	r3, [pc, #320]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	494d      	ldr	r1, [pc, #308]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d044      	beq.n	8001168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d119      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e07f      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d003      	beq.n	8001106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001102:	2b03      	cmp	r3, #3
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001106:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e06f      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e067      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001126:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f023 0203 	bic.w	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	4934      	ldr	r1, [pc, #208]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001138:	f7ff fa2a 	bl	8000590 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	e00a      	b.n	8001156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff fa26 	bl	8000590 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e04f      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 020c 	and.w	r2, r3, #12
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	429a      	cmp	r2, r3
 8001166:	d1eb      	bne.n	8001140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d20c      	bcs.n	8001190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e032      	b.n	80011f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	4916      	ldr	r1, [pc, #88]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	490e      	ldr	r1, [pc, #56]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ce:	f000 f821 	bl	8001214 <HAL_RCC_GetSysClockFreq>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	490a      	ldr	r1, [pc, #40]	; (8001208 <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	5ccb      	ldrb	r3, [r1, r3]
 80011e2:	fa22 f303 	lsr.w	r3, r2, r3
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <HAL_RCC_ClockConfig+0x1c8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f98a 	bl	8000508 <HAL_InitTick>

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00
 8001204:	40023800 	.word	0x40023800
 8001208:	08004344 	.word	0x08004344
 800120c:	20000028 	.word	0x20000028
 8001210:	20000000 	.word	0x20000000

08001214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001218:	b090      	sub	sp, #64	; 0x40
 800121a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122c:	4b59      	ldr	r3, [pc, #356]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b08      	cmp	r3, #8
 8001236:	d00d      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0x40>
 8001238:	2b08      	cmp	r3, #8
 800123a:	f200 80a1 	bhi.w	8001380 <HAL_RCC_GetSysClockFreq+0x16c>
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x34>
 8001242:	2b04      	cmp	r3, #4
 8001244:	d003      	beq.n	800124e <HAL_RCC_GetSysClockFreq+0x3a>
 8001246:	e09b      	b.n	8001380 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001248:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_GetSysClockFreq+0x184>)
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800124c:	e09b      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800124e:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_RCC_GetSysClockFreq+0x188>)
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001252:	e098      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001254:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d028      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	099b      	lsrs	r3, r3, #6
 8001270:	2200      	movs	r2, #0
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	627a      	str	r2, [r7, #36]	; 0x24
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800127c:	2100      	movs	r1, #0
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_RCC_GetSysClockFreq+0x188>)
 8001280:	fb03 f201 	mul.w	r2, r3, r1
 8001284:	2300      	movs	r3, #0
 8001286:	fb00 f303 	mul.w	r3, r0, r3
 800128a:	4413      	add	r3, r2
 800128c:	4a43      	ldr	r2, [pc, #268]	; (800139c <HAL_RCC_GetSysClockFreq+0x188>)
 800128e:	fba0 1202 	umull	r1, r2, r0, r2
 8001292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001294:	460a      	mov	r2, r1
 8001296:	62ba      	str	r2, [r7, #40]	; 0x28
 8001298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129a:	4413      	add	r3, r2
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a0:	2200      	movs	r2, #0
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	61fa      	str	r2, [r7, #28]
 80012a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ae:	f7fe ff8b 	bl	80001c8 <__aeabi_uldivmod>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4613      	mov	r3, r2
 80012b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ba:	e053      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	099b      	lsrs	r3, r3, #6
 80012c2:	2200      	movs	r2, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	617a      	str	r2, [r7, #20]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012ce:	f04f 0b00 	mov.w	fp, #0
 80012d2:	4652      	mov	r2, sl
 80012d4:	465b      	mov	r3, fp
 80012d6:	f04f 0000 	mov.w	r0, #0
 80012da:	f04f 0100 	mov.w	r1, #0
 80012de:	0159      	lsls	r1, r3, #5
 80012e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012e4:	0150      	lsls	r0, r2, #5
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ebb2 080a 	subs.w	r8, r2, sl
 80012ee:	eb63 090b 	sbc.w	r9, r3, fp
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001302:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001306:	ebb2 0408 	subs.w	r4, r2, r8
 800130a:	eb63 0509 	sbc.w	r5, r3, r9
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	00eb      	lsls	r3, r5, #3
 8001318:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800131c:	00e2      	lsls	r2, r4, #3
 800131e:	4614      	mov	r4, r2
 8001320:	461d      	mov	r5, r3
 8001322:	eb14 030a 	adds.w	r3, r4, sl
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	eb45 030b 	adc.w	r3, r5, fp
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800133a:	4629      	mov	r1, r5
 800133c:	028b      	lsls	r3, r1, #10
 800133e:	4621      	mov	r1, r4
 8001340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001344:	4621      	mov	r1, r4
 8001346:	028a      	lsls	r2, r1, #10
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	2200      	movs	r2, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001358:	f7fe ff36 	bl	80001c8 <__aeabi_uldivmod>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4613      	mov	r3, r2
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_RCC_GetSysClockFreq+0x180>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	0c1b      	lsrs	r3, r3, #16
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	3301      	adds	r3, #1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800137e:	e002      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetSysClockFreq+0x184>)
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001388:	4618      	mov	r0, r3
 800138a:	3740      	adds	r7, #64	; 0x40
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	00f42400 	.word	0x00f42400
 800139c:	017d7840 	.word	0x017d7840

080013a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e07b      	b.n	80014aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d108      	bne.n	80013cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80013c2:	d009      	beq.n	80013d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
 80013ca:	e005      	b.n	80013d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 ffa0 	bl	8002338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800140e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145c:	ea42 0103 	orr.w	r1, r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	0c1b      	lsrs	r3, r3, #16
 8001476:	f003 0104 	and.w	r1, r3, #4
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f003 0210 	and.w	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	69da      	ldr	r2, [r3, #28]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b088      	sub	sp, #32
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_SPI_Transmit+0x22>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e126      	b.n	8001722 <HAL_SPI_Transmit+0x270>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80014dc:	f7ff f858 	bl	8000590 <HAL_GetTick>
 80014e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d002      	beq.n	80014f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80014f2:	2302      	movs	r3, #2
 80014f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014f6:	e10b      	b.n	8001710 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <HAL_SPI_Transmit+0x52>
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001508:	e102      	b.n	8001710 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88fa      	ldrh	r2, [r7, #6]
 8001522:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001550:	d10f      	bne.n	8001572 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001570:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	d007      	beq.n	8001590 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001598:	d14b      	bne.n	8001632 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <HAL_SPI_Transmit+0xf6>
 80015a2:	8afb      	ldrh	r3, [r7, #22]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d13e      	bne.n	8001626 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	1c9a      	adds	r2, r3, #2
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80015cc:	e02b      	b.n	8001626 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d112      	bne.n	8001602 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	881a      	ldrh	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	1c9a      	adds	r2, r3, #2
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001600:	e011      	b.n	8001626 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001602:	f7fe ffc5 	bl	8000590 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d803      	bhi.n	800161a <HAL_SPI_Transmit+0x168>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d102      	bne.n	8001620 <HAL_SPI_Transmit+0x16e>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001624:	e074      	b.n	8001710 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800162a:	b29b      	uxth	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ce      	bne.n	80015ce <HAL_SPI_Transmit+0x11c>
 8001630:	e04c      	b.n	80016cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_SPI_Transmit+0x18e>
 800163a:	8afb      	ldrh	r3, [r7, #22]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d140      	bne.n	80016c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	330c      	adds	r3, #12
 800164a:	7812      	ldrb	r2, [r2, #0]
 800164c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165c:	b29b      	uxth	r3, r3
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001666:	e02c      	b.n	80016c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b02      	cmp	r3, #2
 8001674:	d113      	bne.n	800169e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	330c      	adds	r3, #12
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	86da      	strh	r2, [r3, #54]	; 0x36
 800169c:	e011      	b.n	80016c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800169e:	f7fe ff77 	bl	8000590 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d803      	bhi.n	80016b6 <HAL_SPI_Transmit+0x204>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d102      	bne.n	80016bc <HAL_SPI_Transmit+0x20a>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80016c0:	e026      	b.n	8001710 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1cd      	bne.n	8001668 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 f8b3 	bl	800183c <SPI_EndRxTxTransaction>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2220      	movs	r2, #32
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10a      	bne.n	8001700 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	77fb      	strb	r3, [r7, #31]
 800170c:	e000      	b.n	8001710 <HAL_SPI_Transmit+0x25e>
  }

error:
 800170e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001720:	7ffb      	ldrb	r3, [r7, #31]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800173c:	f7fe ff28 	bl	8000590 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	4413      	add	r3, r2
 800174a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800174c:	f7fe ff20 	bl	8000590 <HAL_GetTick>
 8001750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	015b      	lsls	r3, r3, #5
 8001758:	0d1b      	lsrs	r3, r3, #20
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001762:	e054      	b.n	800180e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d050      	beq.n	800180e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800176c:	f7fe ff10 	bl	8000590 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	429a      	cmp	r2, r3
 800177a:	d902      	bls.n	8001782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d13d      	bne.n	80017fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800179a:	d111      	bne.n	80017c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a4:	d004      	beq.n	80017b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ae:	d107      	bne.n	80017c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c8:	d10f      	bne.n	80017ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e017      	b.n	800182e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3b01      	subs	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4013      	ands	r3, r2
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	429a      	cmp	r2, r3
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	429a      	cmp	r2, r3
 800182a:	d19b      	bne.n	8001764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000028 	.word	0x20000028

0800183c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <SPI_EndRxTxTransaction+0x7c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <SPI_EndRxTxTransaction+0x80>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0d5b      	lsrs	r3, r3, #21
 8001854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001866:	d112      	bne.n	800188e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2200      	movs	r2, #0
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f7ff ff5a 	bl	800172c <SPI_WaitFlagStateUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	f043 0220 	orr.w	r2, r3, #32
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e00f      	b.n	80018ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00a      	beq.n	80018aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3b01      	subs	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a4:	2b80      	cmp	r3, #128	; 0x80
 80018a6:	d0f2      	beq.n	800188e <SPI_EndRxTxTransaction+0x52>
 80018a8:	e000      	b.n	80018ac <SPI_EndRxTxTransaction+0x70>
        break;
 80018aa:	bf00      	nop
  }

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000028 	.word	0x20000028
 80018bc:	165e9f81 	.word	0x165e9f81

080018c0 <processKeyPress>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processKeyPress(char key) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
    // Clear the buffer and set common settings
    u8g2_SetFontMode(&u8g2, 0);  // Transparent
 80018ca:	2100      	movs	r1, #0
 80018cc:	48b5      	ldr	r0, [pc, #724]	; (8001ba4 <processKeyPress+0x2e4>)
 80018ce:	f001 fb6c 	bl	8002faa <u8g2_SetFontMode>
    u8g2_SetFontDirection(&u8g2, 0);
 80018d2:	2100      	movs	r1, #0
 80018d4:	48b3      	ldr	r0, [pc, #716]	; (8001ba4 <processKeyPress+0x2e4>)
 80018d6:	f001 fce3 	bl	80032a0 <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 80018da:	49b3      	ldr	r1, [pc, #716]	; (8001ba8 <processKeyPress+0x2e8>)
 80018dc:	48b1      	ldr	r0, [pc, #708]	; (8001ba4 <processKeyPress+0x2e4>)
 80018de:	f001 fcc5 	bl	800326c <u8g2_SetFont>

    switch (key) {
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	3b23      	subs	r3, #35	; 0x23
 80018e6:	2b21      	cmp	r3, #33	; 0x21
 80018e8:	f200 8158 	bhi.w	8001b9c <processKeyPress+0x2dc>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <processKeyPress+0x34>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	080019e7 	.word	0x080019e7
 80018f8:	08001b9d 	.word	0x08001b9d
 80018fc:	08001b9d 	.word	0x08001b9d
 8001900:	08001b9d 	.word	0x08001b9d
 8001904:	08001b9d 	.word	0x08001b9d
 8001908:	08001b9d 	.word	0x08001b9d
 800190c:	08001b9d 	.word	0x08001b9d
 8001910:	080019c7 	.word	0x080019c7
 8001914:	08001b9d 	.word	0x08001b9d
 8001918:	08001b9d 	.word	0x08001b9d
 800191c:	08001b9d 	.word	0x08001b9d
 8001920:	08001b9d 	.word	0x08001b9d
 8001924:	08001b9d 	.word	0x08001b9d
 8001928:	0800197d 	.word	0x0800197d
 800192c:	0800197d 	.word	0x0800197d
 8001930:	0800197d 	.word	0x0800197d
 8001934:	0800197d 	.word	0x0800197d
 8001938:	0800197d 	.word	0x0800197d
 800193c:	0800197d 	.word	0x0800197d
 8001940:	0800197d 	.word	0x0800197d
 8001944:	0800197d 	.word	0x0800197d
 8001948:	0800197d 	.word	0x0800197d
 800194c:	0800197d 	.word	0x0800197d
 8001950:	08001b9d 	.word	0x08001b9d
 8001954:	08001b9d 	.word	0x08001b9d
 8001958:	08001b9d 	.word	0x08001b9d
 800195c:	08001b9d 	.word	0x08001b9d
 8001960:	08001b9d 	.word	0x08001b9d
 8001964:	08001b9d 	.word	0x08001b9d
 8001968:	08001b9d 	.word	0x08001b9d
 800196c:	08001a29 	.word	0x08001a29
 8001970:	08001a87 	.word	0x08001a87
 8001974:	08001ae5 	.word	0x08001ae5
 8001978:	08001b41 	.word	0x08001b41
        case '6':
        case '7':
        case '8':
        case '9':
        case '0':
            if (bufferIndex < 4) {
 800197c:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <processKeyPress+0x2ec>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b03      	cmp	r3, #3
 8001982:	f200 810d 	bhi.w	8001ba0 <processKeyPress+0x2e0>
                numBuffer[bufferIndex++] = key;
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <processKeyPress+0x2ec>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	b2d1      	uxtb	r1, r2
 800198e:	4a87      	ldr	r2, [pc, #540]	; (8001bac <processKeyPress+0x2ec>)
 8001990:	7011      	strb	r1, [r2, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	4a86      	ldr	r2, [pc, #536]	; (8001bb0 <processKeyPress+0x2f0>)
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	5453      	strb	r3, [r2, r1]
                numBuffer[bufferIndex] = '\0';  // Null-terminate the string
 800199a:	4b84      	ldr	r3, [pc, #528]	; (8001bac <processKeyPress+0x2ec>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <processKeyPress+0x2f0>)
 80019a2:	2100      	movs	r1, #0
 80019a4:	5499      	strb	r1, [r3, r2]
                u8g2_ClearBuffer(&u8g2);
 80019a6:	487f      	ldr	r0, [pc, #508]	; (8001ba4 <processKeyPress+0x2e4>)
 80019a8:	f000 fe28 	bl	80025fc <u8g2_ClearBuffer>
                u8g2_SendBuffer(&u8g2);
 80019ac:	487d      	ldr	r0, [pc, #500]	; (8001ba4 <processKeyPress+0x2e4>)
 80019ae:	f000 fe98 	bl	80026e2 <u8g2_SendBuffer>
                u8g2_DrawUTF8(&u8g2, 60, 60, numBuffer);
 80019b2:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <processKeyPress+0x2f0>)
 80019b4:	223c      	movs	r2, #60	; 0x3c
 80019b6:	213c      	movs	r1, #60	; 0x3c
 80019b8:	487a      	ldr	r0, [pc, #488]	; (8001ba4 <processKeyPress+0x2e4>)
 80019ba:	f001 fbb5 	bl	8003128 <u8g2_DrawUTF8>
                u8g2_SendBuffer(&u8g2);
 80019be:	4879      	ldr	r0, [pc, #484]	; (8001ba4 <processKeyPress+0x2e4>)
 80019c0:	f000 fe8f 	bl	80026e2 <u8g2_SendBuffer>
            }
            break;
 80019c4:	e0ec      	b.n	8001ba0 <processKeyPress+0x2e0>
        case '*':
            bufferIndex = 0;
 80019c6:	4b79      	ldr	r3, [pc, #484]	; (8001bac <processKeyPress+0x2ec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
            u8g2_ClearBuffer(&u8g2);
 80019cc:	4875      	ldr	r0, [pc, #468]	; (8001ba4 <processKeyPress+0x2e4>)
 80019ce:	f000 fe15 	bl	80025fc <u8g2_ClearBuffer>
            u8g2_DrawUTF8(&u8g2, 60, 60, "DELETED! ");
 80019d2:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <processKeyPress+0x2f4>)
 80019d4:	223c      	movs	r2, #60	; 0x3c
 80019d6:	213c      	movs	r1, #60	; 0x3c
 80019d8:	4872      	ldr	r0, [pc, #456]	; (8001ba4 <processKeyPress+0x2e4>)
 80019da:	f001 fba5 	bl	8003128 <u8g2_DrawUTF8>
            u8g2_SendBuffer(&u8g2);
 80019de:	4871      	ldr	r0, [pc, #452]	; (8001ba4 <processKeyPress+0x2e4>)
 80019e0:	f000 fe7f 	bl	80026e2 <u8g2_SendBuffer>
            break;
 80019e4:	e101      	b.n	8001bea <processKeyPress+0x32a>
        case '#':
            if (bufferIndex > 0) {
 80019e6:	4b71      	ldr	r3, [pc, #452]	; (8001bac <processKeyPress+0x2ec>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 80f4 	beq.w	8001bd8 <processKeyPress+0x318>
                // Decrement bufferIndex to point to the last entered digit
                --bufferIndex;
 80019f0:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <processKeyPress+0x2ec>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <processKeyPress+0x2ec>)
 80019fa:	701a      	strb	r2, [r3, #0]
                numBuffer[bufferIndex] = '\0';  // Set the last digit to null character
 80019fc:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <processKeyPress+0x2ec>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <processKeyPress+0x2f0>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	5499      	strb	r1, [r3, r2]
                u8g2_ClearBuffer(&u8g2);
 8001a08:	4866      	ldr	r0, [pc, #408]	; (8001ba4 <processKeyPress+0x2e4>)
 8001a0a:	f000 fdf7 	bl	80025fc <u8g2_ClearBuffer>
                u8g2_SendBuffer(&u8g2);
 8001a0e:	4865      	ldr	r0, [pc, #404]	; (8001ba4 <processKeyPress+0x2e4>)
 8001a10:	f000 fe67 	bl	80026e2 <u8g2_SendBuffer>
                u8g2_DrawUTF8(&u8g2, 60, 60, numBuffer);  // Redraw the buffer without the last digit
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <processKeyPress+0x2f0>)
 8001a16:	223c      	movs	r2, #60	; 0x3c
 8001a18:	213c      	movs	r1, #60	; 0x3c
 8001a1a:	4862      	ldr	r0, [pc, #392]	; (8001ba4 <processKeyPress+0x2e4>)
 8001a1c:	f001 fb84 	bl	8003128 <u8g2_DrawUTF8>
                u8g2_SendBuffer(&u8g2);
 8001a20:	4860      	ldr	r0, [pc, #384]	; (8001ba4 <processKeyPress+0x2e4>)
 8001a22:	f000 fe5e 	bl	80026e2 <u8g2_SendBuffer>
            }
            break;
 8001a26:	e0d7      	b.n	8001bd8 <processKeyPress+0x318>
        case 'A':
        	if(bufferIndex == 4){
 8001a28:	4b60      	ldr	r3, [pc, #384]	; (8001bac <processKeyPress+0x2ec>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	f040 80d5 	bne.w	8001bdc <processKeyPress+0x31c>

        	    for (int i = 0; i < 4; ++i) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e00b      	b.n	8001a50 <processKeyPress+0x190>
        	        numABuffer[i] = numBuffer[i];
 8001a38:	4a5d      	ldr	r2, [pc, #372]	; (8001bb0 <processKeyPress+0x2f0>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	7819      	ldrb	r1, [r3, #0]
 8001a40:	4a5d      	ldr	r2, [pc, #372]	; (8001bb8 <processKeyPress+0x2f8>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4413      	add	r3, r2
 8001a46:	460a      	mov	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	ddf0      	ble.n	8001a38 <processKeyPress+0x178>
        	    }
                u8g2_ClearBuffer(&u8g2);
 8001a56:	4853      	ldr	r0, [pc, #332]	; (8001ba4 <processKeyPress+0x2e4>)
 8001a58:	f000 fdd0 	bl	80025fc <u8g2_ClearBuffer>
                u8g2_DrawUTF8(&u8g2, 5, 60, "A SAVED ");
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <processKeyPress+0x2fc>)
 8001a5e:	223c      	movs	r2, #60	; 0x3c
 8001a60:	2105      	movs	r1, #5
 8001a62:	4850      	ldr	r0, [pc, #320]	; (8001ba4 <processKeyPress+0x2e4>)
 8001a64:	f001 fb60 	bl	8003128 <u8g2_DrawUTF8>
                u8g2_SendBuffer(&u8g2);
 8001a68:	484e      	ldr	r0, [pc, #312]	; (8001ba4 <processKeyPress+0x2e4>)
 8001a6a:	f000 fe3a 	bl	80026e2 <u8g2_SendBuffer>
                bufferIndex = 0;
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <processKeyPress+0x2ec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
                memset(numBuffer, 0, sizeof(numBuffer));
 8001a74:	2204      	movs	r2, #4
 8001a76:	2100      	movs	r1, #0
 8001a78:	484d      	ldr	r0, [pc, #308]	; (8001bb0 <processKeyPress+0x2f0>)
 8001a7a:	f002 fbc4 	bl	8004206 <memset>
        		numABuffer[4] = '\0';
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <processKeyPress+0x2f8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	711a      	strb	r2, [r3, #4]

        	}
            break;
 8001a84:	e0aa      	b.n	8001bdc <processKeyPress+0x31c>
        case 'B':
        	if(bufferIndex == 4){
 8001a86:	4b49      	ldr	r3, [pc, #292]	; (8001bac <processKeyPress+0x2ec>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	f040 80a8 	bne.w	8001be0 <processKeyPress+0x320>

        	    for (int i = 0; i < 4; ++i) {
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e00b      	b.n	8001aae <processKeyPress+0x1ee>
        	        numBBuffer[i] = numBuffer[i];
 8001a96:	4a46      	ldr	r2, [pc, #280]	; (8001bb0 <processKeyPress+0x2f0>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7819      	ldrb	r1, [r3, #0]
 8001a9e:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <processKeyPress+0x300>)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	ddf0      	ble.n	8001a96 <processKeyPress+0x1d6>
        	    }

                u8g2_ClearBuffer(&u8g2);
 8001ab4:	483b      	ldr	r0, [pc, #236]	; (8001ba4 <processKeyPress+0x2e4>)
 8001ab6:	f000 fda1 	bl	80025fc <u8g2_ClearBuffer>
                u8g2_DrawUTF8(&u8g2, 5, 50, "B SAVED ");
 8001aba:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <processKeyPress+0x304>)
 8001abc:	2232      	movs	r2, #50	; 0x32
 8001abe:	2105      	movs	r1, #5
 8001ac0:	4838      	ldr	r0, [pc, #224]	; (8001ba4 <processKeyPress+0x2e4>)
 8001ac2:	f001 fb31 	bl	8003128 <u8g2_DrawUTF8>
                u8g2_SendBuffer(&u8g2);
 8001ac6:	4837      	ldr	r0, [pc, #220]	; (8001ba4 <processKeyPress+0x2e4>)
 8001ac8:	f000 fe0b 	bl	80026e2 <u8g2_SendBuffer>
                bufferIndex = 0;
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <processKeyPress+0x2ec>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
                memset(numBuffer, 0, sizeof(numBuffer));
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4836      	ldr	r0, [pc, #216]	; (8001bb0 <processKeyPress+0x2f0>)
 8001ad8:	f002 fb95 	bl	8004206 <memset>
        		numBBuffer[4] = '\0';
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <processKeyPress+0x300>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	711a      	strb	r2, [r3, #4]

        	}
            break;
 8001ae2:	e07d      	b.n	8001be0 <processKeyPress+0x320>
        case 'C':
        	if(bufferIndex == 4){
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <processKeyPress+0x2ec>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d17b      	bne.n	8001be4 <processKeyPress+0x324>

        	    for (int i = 0; i < 4; ++i) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e00b      	b.n	8001b0a <processKeyPress+0x24a>
        	        numCBuffer[i] = numBuffer[i];
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <processKeyPress+0x2f0>)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <processKeyPress+0x308>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	460a      	mov	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	ddf0      	ble.n	8001af2 <processKeyPress+0x232>
        	    }

                u8g2_ClearBuffer(&u8g2);
 8001b10:	4824      	ldr	r0, [pc, #144]	; (8001ba4 <processKeyPress+0x2e4>)
 8001b12:	f000 fd73 	bl	80025fc <u8g2_ClearBuffer>
                u8g2_DrawUTF8(&u8g2, 5, 50, "C SAVED ");
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <processKeyPress+0x30c>)
 8001b18:	2232      	movs	r2, #50	; 0x32
 8001b1a:	2105      	movs	r1, #5
 8001b1c:	4821      	ldr	r0, [pc, #132]	; (8001ba4 <processKeyPress+0x2e4>)
 8001b1e:	f001 fb03 	bl	8003128 <u8g2_DrawUTF8>
                u8g2_SendBuffer(&u8g2);
 8001b22:	4820      	ldr	r0, [pc, #128]	; (8001ba4 <processKeyPress+0x2e4>)
 8001b24:	f000 fddd 	bl	80026e2 <u8g2_SendBuffer>
                bufferIndex = 0;
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <processKeyPress+0x2ec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
                memset(numBuffer, 0, sizeof(numBuffer));
 8001b2e:	2204      	movs	r2, #4
 8001b30:	2100      	movs	r1, #0
 8001b32:	481f      	ldr	r0, [pc, #124]	; (8001bb0 <processKeyPress+0x2f0>)
 8001b34:	f002 fb67 	bl	8004206 <memset>
        		numCBuffer[4] = '\0';
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <processKeyPress+0x308>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	711a      	strb	r2, [r3, #4]


        	}
            break;
 8001b3e:	e051      	b.n	8001be4 <processKeyPress+0x324>
        case 'D':
        	if(bufferIndex == 4){
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <processKeyPress+0x2ec>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d14f      	bne.n	8001be8 <processKeyPress+0x328>

        	    for (int i = 0; i < 4; ++i) {
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	e00b      	b.n	8001b66 <processKeyPress+0x2a6>
        	        numDBuffer[i] = numBuffer[i];
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <processKeyPress+0x2f0>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4413      	add	r3, r2
 8001b54:	7819      	ldrb	r1, [r3, #0]
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <processKeyPress+0x310>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	460a      	mov	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	ddf0      	ble.n	8001b4e <processKeyPress+0x28e>
        	    }

                u8g2_ClearBuffer(&u8g2);
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <processKeyPress+0x2e4>)
 8001b6e:	f000 fd45 	bl	80025fc <u8g2_ClearBuffer>
                u8g2_DrawUTF8(&u8g2, 5, 50, "D SAVED ");
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <processKeyPress+0x314>)
 8001b74:	2232      	movs	r2, #50	; 0x32
 8001b76:	2105      	movs	r1, #5
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <processKeyPress+0x2e4>)
 8001b7a:	f001 fad5 	bl	8003128 <u8g2_DrawUTF8>
                u8g2_SendBuffer(&u8g2);
 8001b7e:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <processKeyPress+0x2e4>)
 8001b80:	f000 fdaf 	bl	80026e2 <u8g2_SendBuffer>
                bufferIndex = 0;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <processKeyPress+0x2ec>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
                memset(numBuffer, 0, sizeof(numBuffer));
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <processKeyPress+0x2f0>)
 8001b90:	f002 fb39 	bl	8004206 <memset>
        		numDBuffer[4] = '\0';
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <processKeyPress+0x310>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	711a      	strb	r2, [r3, #4]

        	}
            break;
 8001b9a:	e025      	b.n	8001be8 <processKeyPress+0x328>
        default:
            // Handle other key presses or invalid keys
            break;
 8001b9c:	bf00      	nop
 8001b9e:	e024      	b.n	8001bea <processKeyPress+0x32a>
            break;
 8001ba0:	bf00      	nop
 8001ba2:	e022      	b.n	8001bea <processKeyPress+0x32a>
 8001ba4:	200000bc 	.word	0x200000bc
 8001ba8:	08004354 	.word	0x08004354
 8001bac:	200000b8 	.word	0x200000b8
 8001bb0:	200000a4 	.word	0x200000a4
 8001bb4:	08004278 	.word	0x08004278
 8001bb8:	200000a8 	.word	0x200000a8
 8001bbc:	08004284 	.word	0x08004284
 8001bc0:	200000ac 	.word	0x200000ac
 8001bc4:	08004290 	.word	0x08004290
 8001bc8:	200000b0 	.word	0x200000b0
 8001bcc:	0800429c 	.word	0x0800429c
 8001bd0:	200000b4 	.word	0x200000b4
 8001bd4:	080042a8 	.word	0x080042a8
            break;
 8001bd8:	bf00      	nop
 8001bda:	e006      	b.n	8001bea <processKeyPress+0x32a>
            break;
 8001bdc:	bf00      	nop
 8001bde:	e004      	b.n	8001bea <processKeyPress+0x32a>
            break;
 8001be0:	bf00      	nop
 8001be2:	e002      	b.n	8001bea <processKeyPress+0x32a>
            break;
 8001be4:	bf00      	nop
 8001be6:	e000      	b.n	8001bea <processKeyPress+0x32a>
            break;
 8001be8:	bf00      	nop

    }
    if(bufferIndex == 4){
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <processKeyPress+0x384>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d123      	bne.n	8001c3a <processKeyPress+0x37a>
    u8g2_ClearBuffer(&u8g2);
 8001bf2:	4815      	ldr	r0, [pc, #84]	; (8001c48 <processKeyPress+0x388>)
 8001bf4:	f000 fd02 	bl	80025fc <u8g2_ClearBuffer>
    u8g2_DrawUTF8(&u8g2, 32, 40, numBuffer);
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <processKeyPress+0x38c>)
 8001bfa:	2228      	movs	r2, #40	; 0x28
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	4812      	ldr	r0, [pc, #72]	; (8001c48 <processKeyPress+0x388>)
 8001c00:	f001 fa92 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_DrawUTF8(&u8g2, 8, 50, "PRESS * TO DELETE ALL ");
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <processKeyPress+0x390>)
 8001c06:	2232      	movs	r2, #50	; 0x32
 8001c08:	2108      	movs	r1, #8
 8001c0a:	480f      	ldr	r0, [pc, #60]	; (8001c48 <processKeyPress+0x388>)
 8001c0c:	f001 fa8c 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_DrawUTF8(&u8g2, 8, 60, "OR PRESS A/B/C/D ");
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <processKeyPress+0x394>)
 8001c12:	223c      	movs	r2, #60	; 0x3c
 8001c14:	2108      	movs	r1, #8
 8001c16:	480c      	ldr	r0, [pc, #48]	; (8001c48 <processKeyPress+0x388>)
 8001c18:	f001 fa86 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_DrawUTF8(&u8g2, 8, 70, "OR # TO DELETE ");
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <processKeyPress+0x398>)
 8001c1e:	2246      	movs	r2, #70	; 0x46
 8001c20:	2108      	movs	r1, #8
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <processKeyPress+0x388>)
 8001c24:	f001 fa80 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_DrawUTF8(&u8g2, 8, 80, "LAST NUMBER ");
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <processKeyPress+0x39c>)
 8001c2a:	2250      	movs	r2, #80	; 0x50
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <processKeyPress+0x388>)
 8001c30:	f001 fa7a 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_SendBuffer(&u8g2);
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <processKeyPress+0x388>)
 8001c36:	f000 fd54 	bl	80026e2 <u8g2_SendBuffer>

    }

}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200000b8 	.word	0x200000b8
 8001c48:	200000bc 	.word	0x200000bc
 8001c4c:	200000a4 	.word	0x200000a4
 8001c50:	080042b4 	.word	0x080042b4
 8001c54:	080042cc 	.word	0x080042cc
 8001c58:	080042e0 	.word	0x080042e0
 8001c5c:	080042f0 	.word	0x080042f0

08001c60 <showKeyPress>:

void showKeyPress(char key) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
    // Clear the buffer and set common settings
    u8g2_SetFontMode(&u8g2, 0);  // Transparent
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4829      	ldr	r0, [pc, #164]	; (8001d14 <showKeyPress+0xb4>)
 8001c6e:	f001 f99c 	bl	8002faa <u8g2_SetFontMode>
    u8g2_SetFontDirection(&u8g2, 0);
 8001c72:	2100      	movs	r1, #0
 8001c74:	4827      	ldr	r0, [pc, #156]	; (8001d14 <showKeyPress+0xb4>)
 8001c76:	f001 fb13 	bl	80032a0 <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 8001c7a:	4927      	ldr	r1, [pc, #156]	; (8001d18 <showKeyPress+0xb8>)
 8001c7c:	4825      	ldr	r0, [pc, #148]	; (8001d14 <showKeyPress+0xb4>)
 8001c7e:	f001 faf5 	bl	800326c <u8g2_SetFont>

    switch (key) {
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	3b41      	subs	r3, #65	; 0x41
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d83e      	bhi.n	8001d08 <showKeyPress+0xa8>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <showKeyPress+0x30>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001cbb 	.word	0x08001cbb
 8001c98:	08001cd5 	.word	0x08001cd5
 8001c9c:	08001cef 	.word	0x08001cef

        case 'A':
            u8g2_ClearBuffer(&u8g2);
 8001ca0:	481c      	ldr	r0, [pc, #112]	; (8001d14 <showKeyPress+0xb4>)
 8001ca2:	f000 fcab 	bl	80025fc <u8g2_ClearBuffer>
            u8g2_DrawUTF8(&u8g2, 56, 50, numABuffer);
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <showKeyPress+0xbc>)
 8001ca8:	2232      	movs	r2, #50	; 0x32
 8001caa:	2138      	movs	r1, #56	; 0x38
 8001cac:	4819      	ldr	r0, [pc, #100]	; (8001d14 <showKeyPress+0xb4>)
 8001cae:	f001 fa3b 	bl	8003128 <u8g2_DrawUTF8>
            u8g2_SendBuffer(&u8g2);
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <showKeyPress+0xb4>)
 8001cb4:	f000 fd15 	bl	80026e2 <u8g2_SendBuffer>
            break;
 8001cb8:	e027      	b.n	8001d0a <showKeyPress+0xaa>
        case 'B':
            u8g2_ClearBuffer(&u8g2);
 8001cba:	4816      	ldr	r0, [pc, #88]	; (8001d14 <showKeyPress+0xb4>)
 8001cbc:	f000 fc9e 	bl	80025fc <u8g2_ClearBuffer>
            u8g2_DrawUTF8(&u8g2, 56, 50, numBBuffer);
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <showKeyPress+0xc0>)
 8001cc2:	2232      	movs	r2, #50	; 0x32
 8001cc4:	2138      	movs	r1, #56	; 0x38
 8001cc6:	4813      	ldr	r0, [pc, #76]	; (8001d14 <showKeyPress+0xb4>)
 8001cc8:	f001 fa2e 	bl	8003128 <u8g2_DrawUTF8>
            u8g2_SendBuffer(&u8g2);
 8001ccc:	4811      	ldr	r0, [pc, #68]	; (8001d14 <showKeyPress+0xb4>)
 8001cce:	f000 fd08 	bl	80026e2 <u8g2_SendBuffer>
            break;
 8001cd2:	e01a      	b.n	8001d0a <showKeyPress+0xaa>
        case 'C':
            u8g2_ClearBuffer(&u8g2);
 8001cd4:	480f      	ldr	r0, [pc, #60]	; (8001d14 <showKeyPress+0xb4>)
 8001cd6:	f000 fc91 	bl	80025fc <u8g2_ClearBuffer>
            u8g2_DrawUTF8(&u8g2, 56, 50, numCBuffer);
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <showKeyPress+0xc4>)
 8001cdc:	2232      	movs	r2, #50	; 0x32
 8001cde:	2138      	movs	r1, #56	; 0x38
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <showKeyPress+0xb4>)
 8001ce2:	f001 fa21 	bl	8003128 <u8g2_DrawUTF8>
            u8g2_SendBuffer(&u8g2);
 8001ce6:	480b      	ldr	r0, [pc, #44]	; (8001d14 <showKeyPress+0xb4>)
 8001ce8:	f000 fcfb 	bl	80026e2 <u8g2_SendBuffer>
            break;
 8001cec:	e00d      	b.n	8001d0a <showKeyPress+0xaa>
        case 'D':
            u8g2_ClearBuffer(&u8g2);
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <showKeyPress+0xb4>)
 8001cf0:	f000 fc84 	bl	80025fc <u8g2_ClearBuffer>
            u8g2_DrawUTF8(&u8g2, 56, 50, numDBuffer);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <showKeyPress+0xc8>)
 8001cf6:	2232      	movs	r2, #50	; 0x32
 8001cf8:	2138      	movs	r1, #56	; 0x38
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <showKeyPress+0xb4>)
 8001cfc:	f001 fa14 	bl	8003128 <u8g2_DrawUTF8>
            u8g2_SendBuffer(&u8g2);
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <showKeyPress+0xb4>)
 8001d02:	f000 fcee 	bl	80026e2 <u8g2_SendBuffer>
            break;
 8001d06:	e000      	b.n	8001d0a <showKeyPress+0xaa>
        default:
            break;
 8001d08:	bf00      	nop
    }
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200000bc 	.word	0x200000bc
 8001d18:	08004354 	.word	0x08004354
 8001d1c:	200000a8 	.word	0x200000a8
 8001d20:	200000ac 	.word	0x200000ac
 8001d24:	200000b0 	.word	0x200000b0
 8001d28:	200000b4 	.word	0x200000b4

08001d2c <keypad_scan>:


char keypad_scan(void)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'A'},
 8001d32:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <keypad_scan+0x1b0>)
 8001d34:	1d3c      	adds	r4, r7, #4
 8001d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'B'},
                     {'7', '8', '9', 'C'},
                     {'*', '0', '#', 'D'}};

  for(int i = 0; i < 4; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e0c0      	b.n	8001ec4 <keypad_scan+0x198>
  {
    // Set current column as output and low
    switch(i)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d87f      	bhi.n	8001e48 <keypad_scan+0x11c>
 8001d48:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <keypad_scan+0x24>)
 8001d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4e:	bf00      	nop
 8001d50:	08001d61 	.word	0x08001d61
 8001d54:	08001d9b 	.word	0x08001d9b
 8001d58:	08001dd5 	.word	0x08001dd5
 8001d5c:	08001e0f 	.word	0x08001e0f
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 8001d60:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <keypad_scan+0x1b4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2102      	movs	r1, #2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fedb 	bl	8000b24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001d6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ee4 <keypad_scan+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fed4 	bl	8000b24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8001d7c:	4b5a      	ldr	r3, [pc, #360]	; (8001ee8 <keypad_scan+0x1bc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2201      	movs	r2, #1
 8001d82:	2108      	movs	r1, #8
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fecd 	bl	8000b24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001d8a:	4b58      	ldr	r3, [pc, #352]	; (8001eec <keypad_scan+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2104      	movs	r1, #4
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fec6 	bl	8000b24 <HAL_GPIO_WritePin>
        break;
 8001d98:	e056      	b.n	8001e48 <keypad_scan+0x11c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001d9a:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <keypad_scan+0x1b4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe febe 	bl	8000b24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 8001da8:	4b4e      	ldr	r3, [pc, #312]	; (8001ee4 <keypad_scan+0x1b8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe feb7 	bl	8000b24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <keypad_scan+0x1bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe feb0 	bl	8000b24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001dc4:	4b49      	ldr	r3, [pc, #292]	; (8001eec <keypad_scan+0x1c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2104      	movs	r1, #4
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fea9 	bl	8000b24 <HAL_GPIO_WritePin>
        break;
 8001dd2:	e039      	b.n	8001e48 <keypad_scan+0x11c>

	  case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001dd4:	4b42      	ldr	r3, [pc, #264]	; (8001ee0 <keypad_scan+0x1b4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fea1 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <keypad_scan+0x1b8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	2101      	movs	r1, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fe9a 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <keypad_scan+0x1bc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	2108      	movs	r1, #8
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fe93 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <keypad_scan+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	2104      	movs	r1, #4
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fe8c 	bl	8000b24 <HAL_GPIO_WritePin>
		break;
 8001e0c:	e01c      	b.n	8001e48 <keypad_scan+0x11c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <keypad_scan+0x1b4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	2102      	movs	r1, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe84 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <keypad_scan+0x1b8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	2101      	movs	r1, #1
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fe7d 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <keypad_scan+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2108      	movs	r1, #8
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fe76 	bl	8000b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <keypad_scan+0x1c0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2104      	movs	r1, #4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fe6f 	bl	8000b24 <HAL_GPIO_WritePin>
		break;
 8001e46:	bf00      	nop
}
// Read current rows
if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <keypad_scan+0x1c4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fe50 	bl	8000af4 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d104      	bne.n	8001e64 <keypad_scan+0x138>
  return keys[0][i];
 8001e5a:	1d3a      	adds	r2, r7, #4
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	e037      	b.n	8001ed4 <keypad_scan+0x1a8>
if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <keypad_scan+0x1c8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fe42 	bl	8000af4 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <keypad_scan+0x156>
  return keys[1][i];
 8001e76:	f107 0208 	add.w	r2, r7, #8
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	e028      	b.n	8001ed4 <keypad_scan+0x1a8>
if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <keypad_scan+0x1cc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2108      	movs	r1, #8
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fe33 	bl	8000af4 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <keypad_scan+0x174>
  return keys[2][i];
 8001e94:	f107 020c 	add.w	r2, r7, #12
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	e019      	b.n	8001ed4 <keypad_scan+0x1a8>
if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <keypad_scan+0x1d0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fe24 	bl	8000af4 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <keypad_scan+0x192>
  return keys[3][i];
 8001eb2:	f107 0210 	add.w	r2, r7, #16
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	e00a      	b.n	8001ed4 <keypad_scan+0x1a8>
  for(int i = 0; i < 4; i++)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	f77f af3b 	ble.w	8001d42 <keypad_scan+0x16>
}
  HAL_Delay(50);
 8001ecc:	2032      	movs	r0, #50	; 0x32
 8001ece:	f7fe fb6b 	bl	80005a8 <HAL_Delay>

return 0; // No key pressed
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}
 8001edc:	08004300 	.word	0x08004300
 8001ee0:	20000018 	.word	0x20000018
 8001ee4:	2000001c 	.word	0x2000001c
 8001ee8:	20000020 	.word	0x20000020
 8001eec:	20000024 	.word	0x20000024
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	20000010 	.word	0x20000010
 8001efc:	20000014 	.word	0x20000014

08001f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char key_pressed = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0a:	f7fe fadb 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0e:	f000 f87f 	bl	8002010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f12:	f000 f91d 	bl	8002150 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001f16:	f000 f8e5 	bl	80020e4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	u8g2_Setup_ssd1327_ea_w128128_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <main+0xe4>)
 8001f1c:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <main+0xe8>)
 8001f1e:	4933      	ldr	r1, [pc, #204]	; (8001fec <main+0xec>)
 8001f20:	4833      	ldr	r0, [pc, #204]	; (8001ff0 <main+0xf0>)
 8001f22:	f000 fbfd 	bl	8002720 <u8g2_Setup_ssd1327_ea_w128128_f>
	u8g2_InitDisplay(&u8g2);
 8001f26:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <main+0xf0>)
 8001f28:	f002 f8a2 	bl	8004070 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4830      	ldr	r0, [pc, #192]	; (8001ff0 <main+0xf0>)
 8001f30:	f002 f8ad 	bl	800408e <u8x8_SetPowerSave>
    u8g2_SetFontMode(&u8g2, 0);  // Transparent
 8001f34:	2100      	movs	r1, #0
 8001f36:	482e      	ldr	r0, [pc, #184]	; (8001ff0 <main+0xf0>)
 8001f38:	f001 f837 	bl	8002faa <u8g2_SetFontMode>
    u8g2_SetFontDirection(&u8g2, 0);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	482c      	ldr	r0, [pc, #176]	; (8001ff0 <main+0xf0>)
 8001f40:	f001 f9ae 	bl	80032a0 <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 8001f44:	492b      	ldr	r1, [pc, #172]	; (8001ff4 <main+0xf4>)
 8001f46:	482a      	ldr	r0, [pc, #168]	; (8001ff0 <main+0xf0>)
 8001f48:	f001 f990 	bl	800326c <u8g2_SetFont>
    u8g2_DrawUTF8(&u8g2, 8, 30, "Choose 4 numbers");
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <main+0xf8>)
 8001f4e:	221e      	movs	r2, #30
 8001f50:	2108      	movs	r1, #8
 8001f52:	4827      	ldr	r0, [pc, #156]	; (8001ff0 <main+0xf0>)
 8001f54:	f001 f8e8 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_DrawUTF8(&u8g2, 8, 60, "Click White Button");
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <main+0xfc>)
 8001f5a:	223c      	movs	r2, #60	; 0x3c
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <main+0xf0>)
 8001f60:	f001 f8e2 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_DrawUTF8(&u8g2, 8, 90, "To Start!");
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <main+0x100>)
 8001f66:	225a      	movs	r2, #90	; 0x5a
 8001f68:	2108      	movs	r1, #8
 8001f6a:	4821      	ldr	r0, [pc, #132]	; (8001ff0 <main+0xf0>)
 8001f6c:	f001 f8dc 	bl	8003128 <u8g2_DrawUTF8>
    u8g2_SendBuffer(&u8g2);
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <main+0xf0>)
 8001f72:	f000 fbb6 	bl	80026e2 <u8g2_SendBuffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      key_pressed = keypad_scan();
 8001f76:	f7ff fed9 	bl	8001d2c <keypad_scan>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]

	    if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)) {
 8001f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f82:	4820      	ldr	r0, [pc, #128]	; (8002004 <main+0x104>)
 8001f84:	f7fe fdb6 	bl	8000af4 <HAL_GPIO_ReadPin>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00b      	beq.n	8001fa6 <main+0xa6>
	        // Button is pressed

	        if (!buttonPressed) {
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <main+0x108>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10a      	bne.n	8001fac <main+0xac>
	            buttonPressed = 1;  // Set the flag
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <main+0x108>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
	            processKeyPress(key_pressed);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fc8e 	bl	80018c0 <processKeyPress>
 8001fa4:	e002      	b.n	8001fac <main+0xac>
	        }
	    } else {
	        buttonPressed = 0;  // Reset the flag when the button is released
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <main+0x108>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
	    }

	    if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)) {
 8001fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb0:	4814      	ldr	r0, [pc, #80]	; (8002004 <main+0x104>)
 8001fb2:	f7fe fd9f 	bl	8000af4 <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <main+0xd4>
	        // Button is pressed

	        if (!button2Pressed) {
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <main+0x10c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10a      	bne.n	8001fda <main+0xda>
	            button2Pressed = 1;  // Set the flag
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <main+0x10c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]

	            showKeyPress(key_pressed);
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe47 	bl	8001c60 <showKeyPress>
 8001fd2:	e002      	b.n	8001fda <main+0xda>
	        	}
	    } else {
	        button2Pressed = 0;  // Reset the flag when the button is released
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <main+0x10c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
	    }
	    HAL_Delay(10);
 8001fda:	200a      	movs	r0, #10
 8001fdc:	f7fe fae4 	bl	80005a8 <HAL_Delay>
      key_pressed = keypad_scan();
 8001fe0:	e7c9      	b.n	8001f76 <main+0x76>
 8001fe2:	bf00      	nop
 8001fe4:	08002441 	.word	0x08002441
 8001fe8:	08002539 	.word	0x08002539
 8001fec:	08004720 	.word	0x08004720
 8001ff0:	200000bc 	.word	0x200000bc
 8001ff4:	08004354 	.word	0x08004354
 8001ff8:	08004310 	.word	0x08004310
 8001ffc:	08004324 	.word	0x08004324
 8002000:	08004338 	.word	0x08004338
 8002004:	40021000 	.word	0x40021000
 8002008:	200000b9 	.word	0x200000b9
 800200c:	200000ba 	.word	0x200000ba

08002010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b094      	sub	sp, #80	; 0x50
 8002014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002016:	f107 0320 	add.w	r3, r7, #32
 800201a:	2230      	movs	r2, #48	; 0x30
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f002 f8f1 	bl	8004206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <SystemClock_Config+0xcc>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <SystemClock_Config+0xcc>)
 800203e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <SystemClock_Config+0xcc>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <SystemClock_Config+0xd0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <SystemClock_Config+0xd0>)
 800205a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <SystemClock_Config+0xd0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800206c:	2301      	movs	r3, #1
 800206e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002076:	2302      	movs	r3, #2
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800207a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002080:	230f      	movs	r3, #15
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002084:	2390      	movs	r3, #144	; 0x90
 8002086:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002088:	2302      	movs	r3, #2
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800208c:	2305      	movs	r3, #5
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002090:	f107 0320 	add.w	r3, r7, #32
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fd5f 	bl	8000b58 <HAL_RCC_OscConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020a0:	f000 f91c 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a4:	230f      	movs	r3, #15
 80020a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a8:	2302      	movs	r3, #2
 80020aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2103      	movs	r1, #3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe ffc0 	bl	8001048 <HAL_RCC_ClockConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020ce:	f000 f905 	bl	80022dc <Error_Handler>
  }
}
 80020d2:	bf00      	nop
 80020d4:	3750      	adds	r7, #80	; 0x50
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000

080020e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <MX_SPI2_Init+0x64>)
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <MX_SPI2_Init+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <MX_SPI2_Init+0x64>)
 80020f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020f6:	4b14      	ldr	r3, [pc, #80]	; (8002148 <MX_SPI2_Init+0x64>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <MX_SPI2_Init+0x64>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_SPI2_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_SPI2_Init+0x64>)
 8002110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002114:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <MX_SPI2_Init+0x64>)
 8002118:	2208      	movs	r2, #8
 800211a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <MX_SPI2_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <MX_SPI2_Init+0x64>)
 8002124:	2200      	movs	r2, #0
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <MX_SPI2_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_SPI2_Init+0x64>)
 8002130:	220a      	movs	r2, #10
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <MX_SPI2_Init+0x64>)
 8002136:	f7ff f933 	bl	80013a0 <HAL_SPI_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002140:	f000 f8cc 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000004c 	.word	0x2000004c
 800214c:	40003800 	.word	0x40003800

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	4b56      	ldr	r3, [pc, #344]	; (80022c4 <MX_GPIO_Init+0x174>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <MX_GPIO_Init+0x174>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <MX_GPIO_Init+0x174>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <MX_GPIO_Init+0x174>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a4e      	ldr	r2, [pc, #312]	; (80022c4 <MX_GPIO_Init+0x174>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <MX_GPIO_Init+0x174>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a40      	ldr	r2, [pc, #256]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021c4:	f043 0310 	orr.w	r3, r3, #16
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a39      	ldr	r2, [pc, #228]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <MX_GPIO_Init+0x174>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <MX_GPIO_Init+0x174>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL_2_Pin|COL_1_Pin|COL_4_Pin|COL_3_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	210f      	movs	r1, #15
 8002212:	482d      	ldr	r0, [pc, #180]	; (80022c8 <MX_GPIO_Init+0x178>)
 8002214:	f7fe fc86 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin|OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 8002218:	2201      	movs	r2, #1
 800221a:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 800221e:	482b      	ldr	r0, [pc, #172]	; (80022cc <MX_GPIO_Init+0x17c>)
 8002220:	f7fe fc80 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 800222a:	4829      	ldr	r0, [pc, #164]	; (80022d0 <MX_GPIO_Init+0x180>)
 800222c:	f7fe fc7a 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROW_2_Pin ROW_1_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_1_Pin|ROW_4_Pin|ROW_3_Pin;
 8002230:	230f      	movs	r3, #15
 8002232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002238:	2301      	movs	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4824      	ldr	r0, [pc, #144]	; (80022d4 <MX_GPIO_Init+0x184>)
 8002244:	f7fe faba 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_2_Pin COL_1_Pin COL_4_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_2_Pin|COL_1_Pin|COL_4_Pin|COL_3_Pin;
 8002248:	230f      	movs	r3, #15
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	481a      	ldr	r0, [pc, #104]	; (80022c8 <MX_GPIO_Init+0x178>)
 8002260:	f7fe faac 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002264:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	4817      	ldr	r0, [pc, #92]	; (80022d8 <MX_GPIO_Init+0x188>)
 800227a:	f7fe fa9f 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_CS_Pin|OLED_DC_Pin;
 800227e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002288:	2301      	movs	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800228c:	2302      	movs	r3, #2
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	480d      	ldr	r0, [pc, #52]	; (80022cc <MX_GPIO_Init+0x17c>)
 8002298:	f7fe fa90 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 800229c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <MX_GPIO_Init+0x180>)
 80022b6:	f7fe fa81 	bl	80007bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ba:	bf00      	nop
 80022bc:	3730      	adds	r7, #48	; 0x30
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020400 	.word	0x40020400
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40021000 	.word	0x40021000

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>
	...

080022e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_MspInit+0x4c>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_MspInit+0x4c>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_MspInit+0x4c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_MspInit+0x4c>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_MspInit+0x4c>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_MspInit+0x4c>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_SPI_MspInit+0x84>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12c      	bne.n	80023b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_SPI_MspInit+0x88>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_SPI_MspInit+0x88>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_SPI_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_SPI_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <HAL_SPI_MspInit+0x88>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_SPI_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002392:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a4:	2305      	movs	r3, #5
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <HAL_SPI_MspInit+0x8c>)
 80023b0:	f7fe fa04 	bl	80007bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020400 	.word	0x40020400

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <NMI_Handler+0x4>

080023ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002414:	f7fe f8a8 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <SystemInit+0x20>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <SystemInit+0x20>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <u8x8_stm32_gpio_and_delay>:

extern SPI_HandleTypeDef hspi2;
//extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	72fb      	strb	r3, [r7, #11]
 800244e:	4613      	mov	r3, r2
 8002450:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	3b28      	subs	r3, #40	; 0x28
 8002456:	2b23      	cmp	r3, #35	; 0x23
 8002458:	d867      	bhi.n	800252a <u8x8_stm32_gpio_and_delay+0xea>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <u8x8_stm32_gpio_and_delay+0x20>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	0800252b 	.word	0x0800252b
 8002464:	080024f1 	.word	0x080024f1
 8002468:	0800252b 	.word	0x0800252b
 800246c:	0800252b 	.word	0x0800252b
 8002470:	0800252b 	.word	0x0800252b
 8002474:	0800252b 	.word	0x0800252b
 8002478:	0800252b 	.word	0x0800252b
 800247c:	0800252b 	.word	0x0800252b
 8002480:	0800252b 	.word	0x0800252b
 8002484:	0800252b 	.word	0x0800252b
 8002488:	0800252b 	.word	0x0800252b
 800248c:	0800252b 	.word	0x0800252b
 8002490:	0800252b 	.word	0x0800252b
 8002494:	0800252b 	.word	0x0800252b
 8002498:	0800252b 	.word	0x0800252b
 800249c:	0800252b 	.word	0x0800252b
 80024a0:	0800252b 	.word	0x0800252b
 80024a4:	0800252b 	.word	0x0800252b
 80024a8:	0800252b 	.word	0x0800252b
 80024ac:	0800252b 	.word	0x0800252b
 80024b0:	0800252b 	.word	0x0800252b
 80024b4:	0800252b 	.word	0x0800252b
 80024b8:	0800252b 	.word	0x0800252b
 80024bc:	0800252b 	.word	0x0800252b
 80024c0:	0800252b 	.word	0x0800252b
 80024c4:	0800252b 	.word	0x0800252b
 80024c8:	0800252b 	.word	0x0800252b
 80024cc:	0800252b 	.word	0x0800252b
 80024d0:	0800252b 	.word	0x0800252b
 80024d4:	0800252b 	.word	0x0800252b
 80024d8:	0800252b 	.word	0x0800252b
 80024dc:	0800252b 	.word	0x0800252b
 80024e0:	0800252b 	.word	0x0800252b
 80024e4:	080024fb 	.word	0x080024fb
 80024e8:	0800250b 	.word	0x0800250b
 80024ec:	0800251b 	.word	0x0800251b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 80024f0:	7abb      	ldrb	r3, [r7, #10]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f858 	bl	80005a8 <HAL_Delay>
		break;
 80024f8:	e017      	b.n	800252a <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 80024fa:	7abb      	ldrb	r3, [r7, #10]
 80024fc:	461a      	mov	r2, r3
 80024fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002504:	f7fe fb0e 	bl	8000b24 <HAL_GPIO_WritePin>
		break;
 8002508:	e00f      	b.n	800252a <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800250a:	7abb      	ldrb	r3, [r7, #10]
 800250c:	461a      	mov	r2, r3
 800250e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002512:	4808      	ldr	r0, [pc, #32]	; (8002534 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002514:	f7fe fb06 	bl	8000b24 <HAL_GPIO_WritePin>
		break;
 8002518:	e007      	b.n	800252a <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 800251a:	7abb      	ldrb	r3, [r7, #10]
 800251c:	461a      	mov	r2, r3
 800251e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002522:	4804      	ldr	r0, [pc, #16]	; (8002534 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002524:	f7fe fafe 	bl	8000b24 <HAL_GPIO_WritePin>
		break;
 8002528:	bf00      	nop
	}
	return 1;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40020400 	.word	0x40020400

08002538 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	72fb      	strb	r3, [r7, #11]
 8002546:	4613      	mov	r3, r2
 8002548:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800254a:	7afb      	ldrb	r3, [r7, #11]
 800254c:	3b14      	subs	r3, #20
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d847      	bhi.n	80025e2 <u8x8_byte_stm32_hw_spi+0xaa>
 8002552:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <u8x8_byte_stm32_hw_spi+0x20>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	080025e7 	.word	0x080025e7
 800255c:	080025e3 	.word	0x080025e3
 8002560:	080025e3 	.word	0x080025e3
 8002564:	0800258d 	.word	0x0800258d
 8002568:	080025b3 	.word	0x080025b3
 800256c:	080025cb 	.word	0x080025cb
 8002570:	080025e3 	.word	0x080025e3
 8002574:	080025e3 	.word	0x080025e3
 8002578:	080025e3 	.word	0x080025e3
 800257c:	080025e3 	.word	0x080025e3
 8002580:	080025e3 	.word	0x080025e3
 8002584:	080025e3 	.word	0x080025e3
 8002588:	080025a5 	.word	0x080025a5
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 800258c:	7abb      	ldrb	r3, [r7, #10]
 800258e:	b29a      	uxth	r2, r3
 8002590:	2364      	movs	r3, #100	; 0x64
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4818      	ldr	r0, [pc, #96]	; (80025f8 <u8x8_byte_stm32_hw_spi+0xc0>)
 8002596:	f7fe ff8c 	bl	80014b2 <HAL_SPI_Transmit>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d024      	beq.n	80025ea <u8x8_byte_stm32_hw_spi+0xb2>
 80025a0:	2300      	movs	r3, #0
 80025a2:	e024      	b.n	80025ee <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80025a4:	7abb      	ldrb	r3, [r7, #10]
 80025a6:	461a      	mov	r2, r3
 80025a8:	214a      	movs	r1, #74	; 0x4a
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f001 fd8f 	bl	80040ce <u8x8_gpio_call>
		break;
 80025b0:	e01c      	b.n	80025ec <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	2149      	movs	r1, #73	; 0x49
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f001 fd86 	bl	80040ce <u8x8_gpio_call>
		HAL_Delay(1);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7fd fff0 	bl	80005a8 <HAL_Delay>
		break;
 80025c8:	e010      	b.n	80025ec <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7fd ffec 	bl	80005a8 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2149      	movs	r1, #73	; 0x49
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f001 fd77 	bl	80040ce <u8x8_gpio_call>
		break;
 80025e0:	e004      	b.n	80025ec <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e003      	b.n	80025ee <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 80025ea:	bf00      	nop
	}
	return 1;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000004c 	.word	0x2000004c

080025fc <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	7c1b      	ldrb	r3, [r3, #16]
 800260a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fdeb 	bl	8004206 <memset>
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
 8002644:	4613      	mov	r3, r2
 8002646:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	7c1b      	ldrb	r3, [r3, #16]
 800264e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	b29b      	uxth	r3, r3
 800265e:	89ba      	ldrh	r2, [r7, #12]
 8002660:	fb12 f303 	smulbb	r3, r2, r3
 8002664:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8002666:	89bb      	ldrh	r3, [r7, #12]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800266c:	89bb      	ldrh	r3, [r7, #12]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	4413      	add	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002674:	7bf9      	ldrb	r1, [r7, #15]
 8002676:	78ba      	ldrb	r2, [r7, #2]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	460b      	mov	r3, r1
 800267e:	2100      	movs	r1, #0
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f001 fcc4 	bl	800400e <u8x8_DrawTile>
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	7c5b      	ldrb	r3, [r3, #17]
 80026b0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80026b2:	7bba      	ldrb	r2, [r7, #14]
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffbd 	bl	8002638 <u8g2_send_tile_row>
    src_row++;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	3301      	adds	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80026c4:	7bbb      	ldrb	r3, [r7, #14]
 80026c6:	3301      	adds	r3, #1
 80026c8:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	7b7b      	ldrb	r3, [r7, #13]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d203      	bcs.n	80026da <u8g2_send_buffer+0x4c>
 80026d2:	7bba      	ldrb	r2, [r7, #14]
 80026d4:	7b3b      	ldrb	r3, [r7, #12]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d3eb      	bcc.n	80026b2 <u8g2_send_buffer+0x24>
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffcf 	bl	800268e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f001 fcdd 	bl	80040b0 <u8x8_RefreshDisplay>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <u8g2_m_16_16_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_16_f(uint8_t *page_cnt)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  static uint8_t buf[2048];
  *page_cnt = 16;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2210      	movs	r2, #16
 800270c:	701a      	strb	r2, [r3, #0]
  return buf;
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <u8g2_m_16_16_f+0x1c>)
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	20000144 	.word	0x20000144

08002720 <u8g2_Setup_ssd1327_ea_w128128_f>:
  buf = u8g2_m_16_16_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1327 f */
void u8g2_Setup_ssd1327_ea_w128128_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af02      	add	r7, sp, #8
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1327_ea_w128128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <u8g2_Setup_ssd1327_ea_w128128_f+0x44>)
 8002736:	490c      	ldr	r1, [pc, #48]	; (8002768 <u8g2_Setup_ssd1327_ea_w128128_f+0x48>)
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f001 fd1d 	bl	8004178 <u8x8_Setup>
  buf = u8g2_m_16_16_f(&tile_buf_height);
 800273e:	f107 0313 	add.w	r3, r7, #19
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffdc 	bl	8002700 <u8g2_m_16_16_f>
 8002748:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800274a:	7cfa      	ldrb	r2, [r7, #19]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <u8g2_Setup_ssd1327_ea_w128128_f+0x4c>)
 8002752:	6979      	ldr	r1, [r7, #20]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 ffc1 	bl	80036dc <u8g2_SetupBuffer>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	08003c69 	.word	0x08003c69
 8002768:	08003ec5 	.word	0x08003ec5
 800276c:	08003561 	.word	0x08003561

08002770 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	81fb      	strh	r3, [r7, #14]
    font++;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3301      	adds	r3, #1
 80027b2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80027b4:	89fb      	ldrh	r3, [r7, #14]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	89fb      	ldrh	r3, [r7, #14]
 80027c2:	4413      	add	r3, r2
 80027c4:	81fb      	strh	r3, [r7, #14]
    return pos;
 80027c6:	89fb      	ldrh	r3, [r7, #14]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80027de:	2100      	movs	r1, #0
 80027e0:	6838      	ldr	r0, [r7, #0]
 80027e2:	f7ff ffc5 	bl	8002770 <u8g2_font_get_byte>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80027ee:	2101      	movs	r1, #1
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	f7ff ffbd 	bl	8002770 <u8g2_font_get_byte>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80027fe:	2102      	movs	r1, #2
 8002800:	6838      	ldr	r0, [r7, #0]
 8002802:	f7ff ffb5 	bl	8002770 <u8g2_font_get_byte>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800280e:	2103      	movs	r1, #3
 8002810:	6838      	ldr	r0, [r7, #0]
 8002812:	f7ff ffad 	bl	8002770 <u8g2_font_get_byte>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800281e:	2104      	movs	r1, #4
 8002820:	6838      	ldr	r0, [r7, #0]
 8002822:	f7ff ffa5 	bl	8002770 <u8g2_font_get_byte>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800282e:	2105      	movs	r1, #5
 8002830:	6838      	ldr	r0, [r7, #0]
 8002832:	f7ff ff9d 	bl	8002770 <u8g2_font_get_byte>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800283e:	2106      	movs	r1, #6
 8002840:	6838      	ldr	r0, [r7, #0]
 8002842:	f7ff ff95 	bl	8002770 <u8g2_font_get_byte>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800284e:	2107      	movs	r1, #7
 8002850:	6838      	ldr	r0, [r7, #0]
 8002852:	f7ff ff8d 	bl	8002770 <u8g2_font_get_byte>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800285e:	2108      	movs	r1, #8
 8002860:	6838      	ldr	r0, [r7, #0]
 8002862:	f7ff ff85 	bl	8002770 <u8g2_font_get_byte>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800286e:	2109      	movs	r1, #9
 8002870:	6838      	ldr	r0, [r7, #0]
 8002872:	f7ff ff7d 	bl	8002770 <u8g2_font_get_byte>
 8002876:	4603      	mov	r3, r0
 8002878:	b25a      	sxtb	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800287e:	210a      	movs	r1, #10
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f7ff ff75 	bl	8002770 <u8g2_font_get_byte>
 8002886:	4603      	mov	r3, r0
 8002888:	b25a      	sxtb	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800288e:	210b      	movs	r1, #11
 8002890:	6838      	ldr	r0, [r7, #0]
 8002892:	f7ff ff6d 	bl	8002770 <u8g2_font_get_byte>
 8002896:	4603      	mov	r3, r0
 8002898:	b25a      	sxtb	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800289e:	210c      	movs	r1, #12
 80028a0:	6838      	ldr	r0, [r7, #0]
 80028a2:	f7ff ff65 	bl	8002770 <u8g2_font_get_byte>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b25a      	sxtb	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80028ae:	210d      	movs	r1, #13
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f7ff ff5d 	bl	8002770 <u8g2_font_get_byte>
 80028b6:	4603      	mov	r3, r0
 80028b8:	b25a      	sxtb	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80028be:	210e      	movs	r1, #14
 80028c0:	6838      	ldr	r0, [r7, #0]
 80028c2:	f7ff ff55 	bl	8002770 <u8g2_font_get_byte>
 80028c6:	4603      	mov	r3, r0
 80028c8:	b25a      	sxtb	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80028ce:	210f      	movs	r1, #15
 80028d0:	6838      	ldr	r0, [r7, #0]
 80028d2:	f7ff ff4d 	bl	8002770 <u8g2_font_get_byte>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b25a      	sxtb	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80028de:	2110      	movs	r1, #16
 80028e0:	6838      	ldr	r0, [r7, #0]
 80028e2:	f7ff ff45 	bl	8002770 <u8g2_font_get_byte>
 80028e6:	4603      	mov	r3, r0
 80028e8:	b25a      	sxtb	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80028ee:	2111      	movs	r1, #17
 80028f0:	6838      	ldr	r0, [r7, #0]
 80028f2:	f7ff ff4f 	bl	8002794 <u8g2_font_get_word>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80028fe:	2113      	movs	r1, #19
 8002900:	6838      	ldr	r0, [r7, #0]
 8002902:	f7ff ff47 	bl	8002794 <u8g2_font_get_word>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800290e:	2115      	movs	r1, #21
 8002910:	6838      	ldr	r0, [r7, #0]
 8002912:	f7ff ff3f 	bl	8002794 <u8g2_font_get_word>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	82da      	strh	r2, [r3, #22]
#endif
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7a9b      	ldrb	r3, [r3, #10]
 8002936:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	7b7b      	ldrb	r3, [r7, #13]
 8002944:	fa42 f303 	asr.w	r3, r2, r3
 8002948:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800294a:	7b7b      	ldrb	r3, [r7, #13]
 800294c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800294e:	7bba      	ldrb	r2, [r7, #14]
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	4413      	add	r3, r2
 8002954:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002956:	7bbb      	ldrb	r3, [r7, #14]
 8002958:	2b07      	cmp	r3, #7
 800295a:	d91a      	bls.n	8002992 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800295c:	2308      	movs	r3, #8
 800295e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002960:	7b3a      	ldrb	r2, [r7, #12]
 8002962:	7b7b      	ldrb	r3, [r7, #13]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	7b3b      	ldrb	r3, [r7, #12]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	b25a      	sxtb	r2, r3
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4313      	orrs	r3, r2
 8002988:	b25b      	sxtb	r3, r3
 800298a:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800298c:	7bbb      	ldrb	r3, [r7, #14]
 800298e:	3b08      	subs	r3, #8
 8002990:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	4013      	ands	r3, r2
 80029a6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7bba      	ldrb	r2, [r7, #14]
 80029ac:	729a      	strb	r2, [r3, #10]
  return val;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	4619      	mov	r1, r3
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ffaa 	bl	8002926 <u8g2_font_decode_get_unsigned_bits>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	3b01      	subs	r3, #1
 80029de:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80029e0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	73fb      	strb	r3, [r7, #15]
  return v;
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8002a02:	b490      	push	{r4, r7}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4604      	mov	r4, r0
 8002a0a:	4608      	mov	r0, r1
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4623      	mov	r3, r4
 8002a12:	71fb      	strb	r3, [r7, #7]
 8002a14:	4603      	mov	r3, r0
 8002a16:	71bb      	strb	r3, [r7, #6]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	717b      	strb	r3, [r7, #5]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8002a20:	793b      	ldrb	r3, [r7, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d010      	beq.n	8002a48 <u8g2_add_vector_y+0x46>
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	dc13      	bgt.n	8002a52 <u8g2_add_vector_y+0x50>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <u8g2_add_vector_y+0x32>
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d005      	beq.n	8002a3e <u8g2_add_vector_y+0x3c>
 8002a32:	e00e      	b.n	8002a52 <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8002a34:	797a      	ldrb	r2, [r7, #5]
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4413      	add	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
      break;
 8002a3c:	e00e      	b.n	8002a5c <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8002a3e:	79ba      	ldrb	r2, [r7, #6]
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	4413      	add	r3, r2
 8002a44:	71fb      	strb	r3, [r7, #7]
      break;
 8002a46:	e009      	b.n	8002a5c <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8002a48:	797b      	ldrb	r3, [r7, #5]
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	71fb      	strb	r3, [r7, #7]
      break;
 8002a50:	e004      	b.n	8002a5c <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8002a52:	79bb      	ldrb	r3, [r7, #6]
 8002a54:	79fa      	ldrb	r2, [r7, #7]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	71fb      	strb	r3, [r7, #7]
      break;      
 8002a5a:	bf00      	nop
  }
  return dy;
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc90      	pop	{r4, r7}
 8002a66:	4770      	bx	lr

08002a68 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8002a68:	b490      	push	{r4, r7}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	71fb      	strb	r3, [r7, #7]
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71bb      	strb	r3, [r7, #6]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	717b      	strb	r3, [r7, #5]
 8002a82:	4613      	mov	r3, r2
 8002a84:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8002a86:	793b      	ldrb	r3, [r7, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d010      	beq.n	8002aae <u8g2_add_vector_x+0x46>
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	dc13      	bgt.n	8002ab8 <u8g2_add_vector_x+0x50>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <u8g2_add_vector_x+0x32>
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d005      	beq.n	8002aa4 <u8g2_add_vector_x+0x3c>
 8002a98:	e00e      	b.n	8002ab8 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8002a9a:	79ba      	ldrb	r2, [r7, #6]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	71fb      	strb	r3, [r7, #7]
      break;
 8002aa2:	e00e      	b.n	8002ac2 <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8002aa4:	797b      	ldrb	r3, [r7, #5]
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	71fb      	strb	r3, [r7, #7]
      break;
 8002aac:	e009      	b.n	8002ac2 <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8002aae:	79bb      	ldrb	r3, [r7, #6]
 8002ab0:	79fa      	ldrb	r2, [r7, #7]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	71fb      	strb	r3, [r7, #7]
      break;
 8002ab6:	e004      	b.n	8002ac2 <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8002ab8:	797a      	ldrb	r2, [r7, #5]
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	4413      	add	r3, r2
 8002abe:	71fb      	strb	r3, [r7, #7]
      break;      
 8002ac0:	bf00      	nop
  }
  return dx;
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc90      	pop	{r4, r7}
 8002acc:	4770      	bx	lr

08002ace <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b088      	sub	sp, #32
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
 8002ada:	4613      	mov	r3, r2
 8002adc:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3358      	adds	r3, #88	; 0x58
 8002ae2:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002aee:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002af6:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002afe:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	7d7b      	ldrb	r3, [r7, #21]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8002b0c:	7dfa      	ldrb	r2, [r7, #23]
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d201      	bcs.n	8002b18 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	791b      	ldrb	r3, [r3, #4]
 8002b1c:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	795b      	ldrb	r3, [r3, #5]
 8002b22:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002b24:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002b28:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	7b9b      	ldrb	r3, [r3, #14]
 8002b30:	7bb8      	ldrb	r0, [r7, #14]
 8002b32:	f7ff ff99 	bl	8002a68 <u8g2_add_vector_x>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002b3a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002b3e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	7b9b      	ldrb	r3, [r3, #14]
 8002b46:	7b78      	ldrb	r0, [r7, #13]
 8002b48:	f7ff ff5b 	bl	8002a02 <u8g2_add_vector_y>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002b50:	78bb      	ldrb	r3, [r7, #2]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	7b1a      	ldrb	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	7b9b      	ldrb	r3, [r3, #14]
 8002b64:	7db8      	ldrb	r0, [r7, #22]
 8002b66:	7b7a      	ldrb	r2, [r7, #13]
 8002b68:	7bb9      	ldrb	r1, [r7, #14]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fc15 	bl	800339e <u8g2_DrawHVLine>
 8002b74:	e012      	b.n	8002b9c <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	7adb      	ldrb	r3, [r3, #11]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	7b5a      	ldrb	r2, [r3, #13]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	7b9b      	ldrb	r3, [r3, #14]
 8002b8c:	7db8      	ldrb	r0, [r7, #22]
 8002b8e:	7b7a      	ldrb	r2, [r7, #13]
 8002b90:	7bb9      	ldrb	r1, [r7, #14]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4603      	mov	r3, r0
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fc01 	bl	800339e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002b9c:	7dfa      	ldrb	r2, [r7, #23]
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d309      	bcc.n	8002bb8 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8002ba4:	7dfa      	ldrb	r2, [r7, #23]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	757b      	strb	r3, [r7, #21]
    ly++;
 8002bb0:	7d3b      	ldrb	r3, [r7, #20]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8002bb6:	e79f      	b.n	8002af8 <u8g2_font_decode_len+0x2a>
      break;
 8002bb8:	bf00      	nop
  }
  lx += cnt;
 8002bba:	7d7a      	ldrb	r2, [r7, #21]
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8002bc2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8002bca:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	71da      	strb	r2, [r3, #7]
  
}
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3358      	adds	r3, #88	; 0x58
 8002be8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff fe91 	bl	8002926 <u8g2_font_decode_get_unsigned_bits>
 8002c04:	4603      	mov	r3, r0
 8002c06:	b25a      	sxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002c12:	4619      	mov	r1, r3
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fe86 	bl	8002926 <u8g2_font_decode_get_unsigned_bits>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	b25a      	sxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	7b1b      	ldrb	r3, [r3, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf0c      	ite	eq
 8002c34:	2301      	moveq	r3, #1
 8002c36:	2300      	movne	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	735a      	strb	r2, [r3, #13]
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3358      	adds	r3, #88	; 0x58
 8002c56:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffbd 	bl	8002bda <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c66:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6938      	ldr	r0, [r7, #16]
 8002c72:	f7ff fea3 	bl	80029bc <u8g2_font_decode_get_signed_bits>
 8002c76:	4603      	mov	r3, r0
 8002c78:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002c80:	4619      	mov	r1, r3
 8002c82:	6938      	ldr	r0, [r7, #16]
 8002c84:	f7ff fe9a 	bl	80029bc <u8g2_font_decode_get_signed_bits>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c92:	4619      	mov	r1, r3
 8002c94:	6938      	ldr	r0, [r7, #16]
 8002c96:	f7ff fe91 	bl	80029bc <u8g2_font_decode_get_signed_bits>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f340 80cf 	ble.w	8002e48 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	7918      	ldrb	r0, [r3, #4]
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	7b7b      	ldrb	r3, [r7, #13]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	425b      	negs	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	b25a      	sxtb	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	7b9b      	ldrb	r3, [r3, #14]
 8002cc0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8002cc4:	f7ff fed0 	bl	8002a68 <u8g2_add_vector_x>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	7958      	ldrb	r0, [r3, #5]
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	7b7b      	ldrb	r3, [r7, #13]
 8002cd8:	4413      	add	r3, r2
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	425b      	negs	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	b25a      	sxtb	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	7b9b      	ldrb	r3, [r3, #14]
 8002ce6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8002cea:	f7ff fe8a 	bl	8002a02 <u8g2_add_vector_y>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	791b      	ldrb	r3, [r3, #4]
 8002cfa:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	795b      	ldrb	r3, [r3, #5]
 8002d00:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8002d06:	7d7b      	ldrb	r3, [r7, #21]
 8002d08:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	7b9b      	ldrb	r3, [r3, #14]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d852      	bhi.n	8002db8 <u8g2_font_decode_glyph+0x170>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <u8g2_font_decode_glyph+0xd0>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d41 	.word	0x08002d41
 8002d20:	08002d65 	.word	0x08002d65
 8002d24:	08002d95 	.word	0x08002d95
      {
	case 0:
	    x1 += decode->glyph_width;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	7dbb      	ldrb	r3, [r7, #22]
 8002d32:	4413      	add	r3, r2
 8002d34:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	7d3b      	ldrb	r3, [r7, #20]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	753b      	strb	r3, [r7, #20]
	    break;
 8002d3e:	e03b      	b.n	8002db8 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	7dfa      	ldrb	r2, [r7, #23]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8002d4e:	7dbb      	ldrb	r3, [r7, #22]
 8002d50:	3301      	adds	r3, #1
 8002d52:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	7d3b      	ldrb	r3, [r7, #20]
 8002d5e:	4413      	add	r3, r2
 8002d60:	753b      	strb	r3, [r7, #20]
	    break;
 8002d62:	e029      	b.n	8002db8 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	7dfa      	ldrb	r2, [r7, #23]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	3301      	adds	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8002d78:	7dbb      	ldrb	r3, [r7, #22]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	7d7a      	ldrb	r2, [r7, #21]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002d86:	7d7b      	ldrb	r3, [r7, #21]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	757b      	strb	r3, [r7, #21]
	    y1++;
 8002d8c:	7d3b      	ldrb	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	753b      	strb	r3, [r7, #20]
	    break;	  
 8002d92:	e011      	b.n	8002db8 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	7dbb      	ldrb	r3, [r7, #22]
 8002d98:	4413      	add	r3, r2
 8002d9a:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	7d7a      	ldrb	r2, [r7, #21]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002daa:	7d7b      	ldrb	r3, [r7, #21]
 8002dac:	3301      	adds	r3, #1
 8002dae:	757b      	strb	r3, [r7, #21]
	    y1++;
 8002db0:	7d3b      	ldrb	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	753b      	strb	r3, [r7, #20]
	    break;	  
 8002db6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002db8:	7db8      	ldrb	r0, [r7, #22]
 8002dba:	7d7a      	ldrb	r2, [r7, #21]
 8002dbc:	7df9      	ldrb	r1, [r7, #23]
 8002dbe:	7d3b      	ldrb	r3, [r7, #20]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fba0 	bl	800350a <u8g2_IsIntersection>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <u8g2_font_decode_glyph+0x18e>
	return d;
 8002dd0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002dd4:	e03a      	b.n	8002e4c <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2200      	movs	r2, #0
 8002de0:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002de8:	4619      	mov	r1, r3
 8002dea:	6938      	ldr	r0, [r7, #16]
 8002dec:	f7ff fd9b 	bl	8002926 <u8g2_font_decode_get_unsigned_bits>
 8002df0:	4603      	mov	r3, r0
 8002df2:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6938      	ldr	r0, [r7, #16]
 8002dfe:	f7ff fd92 	bl	8002926 <u8g2_font_decode_get_unsigned_bits>
 8002e02:	4603      	mov	r3, r0
 8002e04:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8002e06:	7afb      	ldrb	r3, [r7, #11]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fe5e 	bl	8002ace <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002e12:	7abb      	ldrb	r3, [r7, #10]
 8002e14:	2201      	movs	r2, #1
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fe58 	bl	8002ace <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6938      	ldr	r0, [r7, #16]
 8002e22:	f7ff fd80 	bl	8002926 <u8g2_font_decode_get_unsigned_bits>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ec      	bne.n	8002e06 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002e32:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dd00      	ble.n	8002e3c <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002e3a:	e7d2      	b.n	8002de2 <u8g2_font_decode_glyph+0x19a>
	break;
 8002e3c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	7b1a      	ldrb	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8002e48:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3317      	adds	r3, #23
 8002e6a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	2bff      	cmp	r3, #255	; 0xff
 8002e70:	d82a      	bhi.n	8002ec8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	2b60      	cmp	r3, #96	; 0x60
 8002e76:	d907      	bls.n	8002e88 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8002e7e:	461a      	mov	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4413      	add	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e009      	b.n	8002e9c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d906      	bls.n	8002e9c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002e94:	461a      	mov	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d04e      	beq.n	8002f44 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	887a      	ldrh	r2, [r7, #2]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d102      	bne.n	8002eb8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	e049      	b.n	8002f4c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002ec6:	e7e9      	b.n	8002e9c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8002ece:	461a      	mov	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002eda:	2100      	movs	r1, #0
 8002edc:	6938      	ldr	r0, [r7, #16]
 8002ede:	f7ff fc59 	bl	8002794 <u8g2_font_get_word>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	4413      	add	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002eec:	2102      	movs	r1, #2
 8002eee:	6938      	ldr	r0, [r7, #16]
 8002ef0:	f7ff fc50 	bl	8002794 <u8g2_font_get_word>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	3304      	adds	r3, #4
 8002efc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8002efe:	89fa      	ldrh	r2, [r7, #14]
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3e9      	bcc.n	8002eda <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002f0c:	89fb      	ldrh	r3, [r7, #14]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3301      	adds	r3, #1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	89fb      	ldrh	r3, [r7, #14]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002f20:	89fb      	ldrh	r3, [r7, #14]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002f26:	89fa      	ldrh	r2, [r7, #14]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d102      	bne.n	8002f34 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	3303      	adds	r3, #3
 8002f32:	e00b      	b.n	8002f4c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3302      	adds	r3, #2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	4413      	add	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8002f42:	e7e0      	b.n	8002f06 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <u8g2_font_get_glyph_data+0xf6>
	break;
 8002f48:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	70fb      	strb	r3, [r7, #3]
 8002f66:	460b      	mov	r3, r1
 8002f68:	70bb      	strb	r3, [r7, #2]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	78ba      	ldrb	r2, [r7, #2]
 8002f7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002f82:	883b      	ldrh	r3, [r7, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff ff64 	bl	8002e54 <u8g2_font_get_glyph_data>
 8002f8c:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fe56 	bl	8002c48 <u8g2_font_decode_glyph>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	70fb      	strb	r3, [r7, #3]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	70bb      	strb	r3, [r7, #2]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d833      	bhi.n	8003058 <u8g2_DrawGlyph+0x8c>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <u8g2_DrawGlyph+0x2c>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	0800301d 	.word	0x0800301d
 8003000:	08003031 	.word	0x08003031
 8003004:	08003045 	.word	0x08003045
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	78bb      	ldrb	r3, [r7, #2]
 8003016:	4413      	add	r3, r2
 8003018:	70bb      	strb	r3, [r7, #2]
      break;
 800301a:	e01d      	b.n	8003058 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	70fb      	strb	r3, [r7, #3]
      break;
 800302e:	e013      	b.n	8003058 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	78bb      	ldrb	r3, [r7, #2]
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	70bb      	strb	r3, [r7, #2]
      break;
 8003042:	e009      	b.n	8003058 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	4413      	add	r3, r2
 8003054:	70fb      	strb	r3, [r7, #3]
      break;
 8003056:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003058:	883b      	ldrh	r3, [r7, #0]
 800305a:	78ba      	ldrb	r2, [r7, #2]
 800305c:	78f9      	ldrb	r1, [r7, #3]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff78 	bl	8002f54 <u8g2_font_draw_glyph>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop

08003070 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	72fb      	strb	r3, [r7, #11]
 800307e:	4613      	mov	r3, r2
 8003080:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fc7e 	bl	8003984 <u8x8_utf8_init>
  sum = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	4611      	mov	r1, r2
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	4798      	blx	r3
 800309a:	4603      	mov	r3, r0
 800309c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800309e:	8abb      	ldrh	r3, [r7, #20]
 80030a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d038      	beq.n	800311a <u8g2_draw_string+0xaa>
      break;
    str++;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3301      	adds	r3, #1
 80030ac:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80030ae:	8abb      	ldrh	r3, [r7, #20]
 80030b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d0e9      	beq.n	800308c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80030b8:	8abb      	ldrh	r3, [r7, #20]
 80030ba:	7aba      	ldrb	r2, [r7, #10]
 80030bc:	7af9      	ldrb	r1, [r7, #11]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff ff84 	bl	8002fcc <u8g2_DrawGlyph>
 80030c4:	4603      	mov	r3, r0
 80030c6:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d81e      	bhi.n	8003110 <u8g2_draw_string+0xa0>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <u8g2_draw_string+0x68>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030f3 	.word	0x080030f3
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	08003107 	.word	0x08003107
      {
	case 0:
	  x += delta;
 80030e8:	7afa      	ldrb	r2, [r7, #11]
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	4413      	add	r3, r2
 80030ee:	72fb      	strb	r3, [r7, #11]
	  break;
 80030f0:	e00e      	b.n	8003110 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80030f2:	7aba      	ldrb	r2, [r7, #10]
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	4413      	add	r3, r2
 80030f8:	72bb      	strb	r3, [r7, #10]
	  break;
 80030fa:	e009      	b.n	8003110 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80030fc:	7afa      	ldrb	r2, [r7, #11]
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	72fb      	strb	r3, [r7, #11]
	  break;
 8003104:	e004      	b.n	8003110 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8003106:	7aba      	ldrb	r2, [r7, #10]
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	72bb      	strb	r3, [r7, #10]
	  break;
 800310e:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8003110:	7dfa      	ldrb	r2, [r7, #23]
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	4413      	add	r3, r2
 8003116:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003118:	e7b8      	b.n	800308c <u8g2_draw_string+0x1c>
      break;
 800311a:	bf00      	nop
    }
  }
  return sum;
 800311c:	7dfb      	ldrb	r3, [r7, #23]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop

08003128 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	72fb      	strb	r3, [r7, #11]
 8003136:	4613      	mov	r3, r2
 8003138:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a06      	ldr	r2, [pc, #24]	; (8003158 <u8g2_DrawUTF8+0x30>)
 800313e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8003140:	7aba      	ldrb	r2, [r7, #10]
 8003142:	7af9      	ldrb	r1, [r7, #11]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ff92 	bl	8003070 <u8g2_draw_string>
 800314c:	4603      	mov	r3, r0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	080039a1 	.word	0x080039a1

0800315c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05d      	beq.n	8003228 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04d      	beq.n	800322a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003194:	2b01      	cmp	r3, #1
 8003196:	d11c      	bne.n	80031d2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 80031a4:	429a      	cmp	r2, r3
 80031a6:	da05      	bge.n	80031b4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dd32      	ble.n	800322a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80031d0:	e02b      	b.n	800322a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 80031d8:	461a      	mov	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80031e0:	4619      	mov	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80031e8:	440b      	add	r3, r1
 80031ea:	429a      	cmp	r2, r3
 80031ec:	da0d      	bge.n	800320a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	4413      	add	r3, r2
 8003200:	b2db      	uxtb	r3, r3
 8003202:	b25a      	sxtb	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8003216:	429a      	cmp	r2, r3
 8003218:	dd07      	ble.n	800322a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8003226:	e000      	b.n	800322a <u8g2_UpdateRefHeight+0xce>
    return;
 8003228:	bf00      	nop
  }  
}
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return 0;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <u8g2_SetFontPosBaseline+0x1c>)
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	08003235 	.word	0x08003235

0800326c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d00b      	beq.n	8003298 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3368      	adds	r3, #104	; 0x68
 800328a:	6839      	ldr	r1, [r7, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff faa1 	bl	80027d4 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ff62 	bl	800315c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	460b      	mov	r3, r1
 80032d0:	71fb      	strb	r3, [r7, #7]
 80032d2:	4613      	mov	r3, r2
 80032d4:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	7dbb      	ldrb	r3, [r7, #22]
 80032e6:	4413      	add	r3, r2
 80032e8:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80032ea:	7dfa      	ldrb	r2, [r7, #23]
 80032ec:	7dbb      	ldrb	r3, [r7, #22]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d90b      	bls.n	800330a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80032f2:	7dfa      	ldrb	r2, [r7, #23]
 80032f4:	79bb      	ldrb	r3, [r7, #6]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d205      	bcs.n	8003306 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80032fa:	79bb      	ldrb	r3, [r7, #6]
 80032fc:	75bb      	strb	r3, [r7, #22]
      b--;
 80032fe:	7dbb      	ldrb	r3, [r7, #22]
 8003300:	3b01      	subs	r3, #1
 8003302:	75bb      	strb	r3, [r7, #22]
 8003304:	e001      	b.n	800330a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800330a:	7dfa      	ldrb	r2, [r7, #23]
 800330c:	79bb      	ldrb	r3, [r7, #6]
 800330e:	429a      	cmp	r2, r3
 8003310:	d301      	bcc.n	8003316 <u8g2_clip_intersection2+0x56>
    return 0;
 8003312:	2300      	movs	r3, #0
 8003314:	e01c      	b.n	8003350 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003316:	7dba      	ldrb	r2, [r7, #22]
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	429a      	cmp	r2, r3
 800331c:	d801      	bhi.n	8003322 <u8g2_clip_intersection2+0x62>
    return 0;
 800331e:	2300      	movs	r3, #0
 8003320:	e016      	b.n	8003350 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003322:	7dfa      	ldrb	r2, [r7, #23]
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	429a      	cmp	r2, r3
 8003328:	d201      	bcs.n	800332e <u8g2_clip_intersection2+0x6e>
    a = c;
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800332e:	7dba      	ldrb	r2, [r7, #22]
 8003330:	79bb      	ldrb	r3, [r7, #6]
 8003332:	429a      	cmp	r2, r3
 8003334:	d901      	bls.n	800333a <u8g2_clip_intersection2+0x7a>
    b = d;
 8003336:	79bb      	ldrb	r3, [r7, #6]
 8003338:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	7dfa      	ldrb	r2, [r7, #23]
 800333e:	701a      	strb	r2, [r3, #0]
  b -= a;
 8003340:	7dba      	ldrb	r2, [r7, #22]
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	7dba      	ldrb	r2, [r7, #22]
 800334c:	701a      	strb	r2, [r3, #0]
  return 1;
 800334e:	2301      	movs	r3, #1
}
 8003350:	4618      	mov	r0, r3
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b085      	sub	sp, #20
 8003360:	af02      	add	r7, sp, #8
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	70fb      	strb	r3, [r7, #3]
 800336e:	460b      	mov	r3, r1
 8003370:	70bb      	strb	r3, [r7, #2]
 8003372:	4613      	mov	r3, r2
 8003374:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800337c:	78ba      	ldrb	r2, [r7, #2]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003386:	7878      	ldrb	r0, [r7, #1]
 8003388:	78ba      	ldrb	r2, [r7, #2]
 800338a:	78f9      	ldrb	r1, [r7, #3]
 800338c:	7e3b      	ldrb	r3, [r7, #24]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	47a0      	blx	r4
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}

0800339e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800339e:	b590      	push	{r4, r7, lr}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af02      	add	r7, sp, #8
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	4608      	mov	r0, r1
 80033a8:	4611      	mov	r1, r2
 80033aa:	461a      	mov	r2, r3
 80033ac:	4603      	mov	r3, r0
 80033ae:	70fb      	strb	r3, [r7, #3]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70bb      	strb	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06d      	beq.n	800349e <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80033c2:	787b      	ldrb	r3, [r7, #1]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d06a      	beq.n	800349e <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d918      	bls.n	8003400 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80033ce:	7e3b      	ldrb	r3, [r7, #24]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d109      	bne.n	80033e8 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	787b      	ldrb	r3, [r7, #1]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	70fb      	strb	r3, [r7, #3]
	  x++;
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	3301      	adds	r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	70fb      	strb	r3, [r7, #3]
 80033e6:	e00b      	b.n	8003400 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80033e8:	7e3b      	ldrb	r3, [r7, #24]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d108      	bne.n	8003400 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80033ee:	78ba      	ldrb	r2, [r7, #2]
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	70bb      	strb	r3, [r7, #2]
	  y++;
 80033f8:	78bb      	ldrb	r3, [r7, #2]
 80033fa:	3301      	adds	r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8003400:	7e3b      	ldrb	r3, [r7, #24]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003408:	7e3b      	ldrb	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d119      	bne.n	8003442 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003414:	78bb      	ldrb	r3, [r7, #2]
 8003416:	429a      	cmp	r2, r3
 8003418:	d838      	bhi.n	800348c <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8003420:	78bb      	ldrb	r3, [r7, #2]
 8003422:	429a      	cmp	r2, r3
 8003424:	d934      	bls.n	8003490 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003432:	1c79      	adds	r1, r7, #1
 8003434:	1cf8      	adds	r0, r7, #3
 8003436:	f7ff ff43 	bl	80032c0 <u8g2_clip_intersection2>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d119      	bne.n	8003474 <u8g2_DrawHVLine+0xd6>
	  return;
 8003440:	e02d      	b.n	800349e <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	429a      	cmp	r2, r3
 800344c:	d822      	bhi.n	8003494 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	429a      	cmp	r2, r3
 8003458:	d91e      	bls.n	8003498 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003466:	1c79      	adds	r1, r7, #1
 8003468:	1cb8      	adds	r0, r7, #2
 800346a:	f7ff ff29 	bl	80032c0 <u8g2_clip_intersection2>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	689c      	ldr	r4, [r3, #8]
 800347a:	78f9      	ldrb	r1, [r7, #3]
 800347c:	78ba      	ldrb	r2, [r7, #2]
 800347e:	7878      	ldrb	r0, [r7, #1]
 8003480:	7e3b      	ldrb	r3, [r7, #24]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4603      	mov	r3, r0
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	47a0      	blx	r4
 800348a:	e008      	b.n	800349e <u8g2_DrawHVLine+0x100>
	  return;
 800348c:	bf00      	nop
 800348e:	e006      	b.n	800349e <u8g2_DrawHVLine+0x100>
	  return;
 8003490:	bf00      	nop
 8003492:	e004      	b.n	800349e <u8g2_DrawHVLine+0x100>
	  return;
 8003494:	bf00      	nop
 8003496:	e002      	b.n	800349e <u8g2_DrawHVLine+0x100>
	  return;
 8003498:	bf00      	nop
 800349a:	e000      	b.n	800349e <u8g2_DrawHVLine+0x100>
	  return;
 800349c:	bf00      	nop
    }
}
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}

080034a4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80034a4:	b490      	push	{r4, r7}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4604      	mov	r4, r0
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4623      	mov	r3, r4
 80034b4:	71fb      	strb	r3, [r7, #7]
 80034b6:	4603      	mov	r3, r0
 80034b8:	71bb      	strb	r3, [r7, #6]
 80034ba:	460b      	mov	r3, r1
 80034bc:	717b      	strb	r3, [r7, #5]
 80034be:	4613      	mov	r3, r2
 80034c0:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80034c2:	797a      	ldrb	r2, [r7, #5]
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d20d      	bcs.n	80034e6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80034ca:	793a      	ldrb	r2, [r7, #4]
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d901      	bls.n	80034d6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e014      	b.n	8003500 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80034d6:	797a      	ldrb	r2, [r7, #5]
 80034d8:	793b      	ldrb	r3, [r7, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d901      	bls.n	80034e2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	e00e      	b.n	8003500 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e00c      	b.n	8003500 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80034e6:	793a      	ldrb	r2, [r7, #4]
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d907      	bls.n	80034fe <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80034ee:	797a      	ldrb	r2, [r7, #5]
 80034f0:	793b      	ldrb	r3, [r7, #4]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d901      	bls.n	80034fa <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e002      	b.n	8003500 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80034fe:	2300      	movs	r3, #0
    }
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bc90      	pop	{r4, r7}
 8003508:	4770      	bx	lr

0800350a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	4608      	mov	r0, r1
 8003514:	4611      	mov	r1, r2
 8003516:	461a      	mov	r2, r3
 8003518:	4603      	mov	r3, r0
 800351a:	70fb      	strb	r3, [r7, #3]
 800351c:	460b      	mov	r3, r1
 800351e:	70bb      	strb	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8003530:	7c3b      	ldrb	r3, [r7, #16]
 8003532:	78ba      	ldrb	r2, [r7, #2]
 8003534:	f7ff ffb6 	bl	80034a4 <u8g2_is_intersection_decision_tree>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <u8g2_IsIntersection+0x38>
    return 0; 
 800353e:	2300      	movs	r3, #0
 8003540:	e00a      	b.n	8003558 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800354e:	787b      	ldrb	r3, [r7, #1]
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	f7ff ffa7 	bl	80034a4 <u8g2_is_intersection_decision_tree>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	4603      	mov	r3, r0
 8003570:	70fb      	strb	r3, [r7, #3]
 8003572:	460b      	mov	r3, r1
 8003574:	70bb      	strb	r3, [r7, #2]
 8003576:	4613      	mov	r3, r2
 8003578:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800357a:	78bb      	ldrb	r3, [r7, #2]
 800357c:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8003586:	2301      	movs	r3, #1
 8003588:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 800358a:	7c3a      	ldrb	r2, [r7, #16]
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d801      	bhi.n	80035aa <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80035a6:	7c3b      	ldrb	r3, [r7, #16]
 80035a8:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d001      	beq.n	80035b8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80035b4:	7c3b      	ldrb	r3, [r7, #16]
 80035b6:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80035b8:	78bb      	ldrb	r3, [r7, #2]
 80035ba:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	f023 0307 	bic.w	r3, r3, #7
 80035c2:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	7c1b      	ldrb	r3, [r3, #16]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	89fa      	ldrh	r2, [r7, #14]
 80035ce:	fb12 f303 	smulbb	r3, r2, r3
 80035d2:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4413      	add	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
  ptr += x;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4413      	add	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80035ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d117      	bne.n	8003622 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	7cbb      	ldrb	r3, [r7, #18]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	7c7b      	ldrb	r3, [r7, #17]
 8003606:	4053      	eors	r3, r2
 8003608:	b2da      	uxtb	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3301      	adds	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
	len--;
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	3b01      	subs	r3, #1
 8003618:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800361a:	787b      	ldrb	r3, [r7, #1]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e8      	bne.n	80035f2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003620:	e039      	b.n	8003696 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	7cbb      	ldrb	r3, [r7, #18]
 8003628:	4313      	orrs	r3, r2
 800362a:	b2da      	uxtb	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	7c7b      	ldrb	r3, [r7, #17]
 8003636:	4053      	eors	r3, r2
 8003638:	b2da      	uxtb	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	3301      	adds	r3, #1
 8003642:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	74fb      	strb	r3, [r7, #19]
      len--;
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	3b01      	subs	r3, #1
 8003650:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8003652:	7cfb      	ldrb	r3, [r7, #19]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d115      	bne.n	8003684 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365e:	461a      	mov	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4413      	add	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800366c:	2b01      	cmp	r3, #1
 800366e:	d801      	bhi.n	8003674 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8003670:	2301      	movs	r3, #1
 8003672:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800367a:	2b01      	cmp	r3, #1
 800367c:	d008      	beq.n	8003690 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	747b      	strb	r3, [r7, #17]
 8003682:	e005      	b.n	8003690 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8003684:	7cbb      	ldrb	r3, [r7, #18]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 800368a:	7c7b      	ldrb	r3, [r7, #17]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8003690:	787b      	ldrb	r3, [r7, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1c5      	bne.n	8003622 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	79fa      	ldrb	r2, [r7, #7]
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff ffaf 	bl	80036a2 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff fd81 	bl	800324c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	7c1b      	ldrb	r3, [r3, #16]
 8003782:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b1f      	cmp	r3, #31
 8003788:	d901      	bls.n	800378e <u8g2_update_dimension_common+0x34>
    t = 31;
 800378a:	231f      	movs	r3, #31
 800378c:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80037c2:	4413      	add	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	7c52      	ldrb	r2, [r2, #17]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	dd06      	ble.n	80037da <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	7c5a      	ldrb	r2, [r3, #17]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	4413      	add	r3, r2
 8003802:	b2da      	uxtb	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	22f0      	movs	r2, #240	; 0xf0
 800380e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	8a9b      	ldrh	r3, [r3, #20]
 8003816:	2bf0      	cmp	r3, #240	; 0xf0
 8003818:	d805      	bhi.n	8003826 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	8a9b      	ldrh	r3, [r3, #20]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	8adb      	ldrh	r3, [r3, #22]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af02      	add	r7, sp, #8
 8003844:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	4603      	mov	r3, r0
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fe51 	bl	800350a <u8g2_IsIntersection>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003876:	e03b      	b.n	80038f0 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800388c:	429a      	cmp	r2, r3
 800388e:	d205      	bcs.n	800389c <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d905      	bls.n	80038b8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d205      	bcs.n	80038d4 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d905      	bls.n	80038f0 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff2a 	bl	800375a <u8g2_update_dimension_common>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff7b 	bl	800383e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	70fb      	strb	r3, [r7, #3]
 8003962:	460b      	mov	r3, r1
 8003964:	70bb      	strb	r3, [r7, #2]
 8003966:	4613      	mov	r3, r2
 8003968:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800396a:	7878      	ldrb	r0, [r7, #1]
 800396c:	78ba      	ldrb	r2, [r7, #2]
 800396e:	78f9      	ldrb	r1, [r7, #3]
 8003970:	7c3b      	ldrb	r3, [r7, #16]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4603      	mov	r3, r0
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fcf0 	bl	800335c <u8g2_draw_hv_line_2dir>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <u8x8_utf8_next+0x18>
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	2b0a      	cmp	r3, #10
 80039b6:	d102      	bne.n	80039be <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80039b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039bc:	e06e      	b.n	8003a9c <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d145      	bne.n	8003a54 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	2bfb      	cmp	r3, #251	; 0xfb
 80039cc:	d908      	bls.n	80039e0 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2205      	movs	r2, #5
 80039d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 1;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	70fb      	strb	r3, [r7, #3]
 80039de:	e032      	b.n	8003a46 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	2bf7      	cmp	r3, #247	; 0xf7
 80039e4:	d908      	bls.n	80039f8 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2204      	movs	r2, #4
 80039ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 3;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	70fb      	strb	r3, [r7, #3]
 80039f6:	e026      	b.n	8003a46 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	2bef      	cmp	r3, #239	; 0xef
 80039fc:	d908      	bls.n	8003a10 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2203      	movs	r2, #3
 8003a02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 7;      
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	70fb      	strb	r3, [r7, #3]
 8003a0e:	e01a      	b.n	8003a46 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	2bdf      	cmp	r3, #223	; 0xdf
 8003a14:	d908      	bls.n	8003a28 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 15;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	70fb      	strb	r3, [r7, #3]
 8003a26:	e00e      	b.n	8003a46 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	2bbf      	cmp	r3, #191	; 0xbf
 8003a2c:	d908      	bls.n	8003a40 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
      b &= 0x01f;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	70fb      	strb	r3, [r7, #3]
 8003a3e:	e002      	b.n	8003a46 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	e02a      	b.n	8003a9c <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003a4e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003a52:	e023      	b.n	8003a9c <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8c1b      	ldrh	r3, [r3, #32]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a76:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8c1a      	ldrh	r2, [r3, #32]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003a92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003a96:	e001      	b.n	8003a9c <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8c1b      	ldrh	r3, [r3, #32]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691c      	ldr	r4, [r3, #16]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2120      	movs	r1, #32
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	47a0      	blx	r4
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd90      	pop	{r4, r7, pc}

08003acc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691c      	ldr	r4, [r3, #16]
 8003ade:	7afa      	ldrb	r2, [r7, #11]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2117      	movs	r1, #23
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	47a0      	blx	r4
 8003ae8:	4603      	mov	r3, r0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}

08003af2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003afe:	1cfb      	adds	r3, r7, #3
 8003b00:	461a      	mov	r2, r3
 8003b02:	2101      	movs	r1, #1
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ffe1 	bl	8003acc <u8x8_byte_SendBytes>
 8003b0a:	4603      	mov	r3, r0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68dc      	ldr	r4, [r3, #12]
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	2300      	movs	r3, #0
 8003b28:	2115      	movs	r1, #21
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	47a0      	blx	r4
 8003b2e:	4603      	mov	r3, r0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd90      	pop	{r4, r7, pc}

08003b38 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68dc      	ldr	r4, [r3, #12]
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2116      	movs	r1, #22
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	47a0      	blx	r4
 8003b52:	4603      	mov	r3, r0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd90      	pop	{r4, r7, pc}

08003b5c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	460b      	mov	r3, r1
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68dc      	ldr	r4, [r3, #12]
 8003b6e:	7afa      	ldrb	r2, [r7, #11]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2117      	movs	r1, #23
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	47a0      	blx	r4
 8003b78:	4603      	mov	r3, r0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}

08003b82 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003b82:	b590      	push	{r4, r7, lr}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68dc      	ldr	r4, [r3, #12]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2200      	movs	r2, #0
 8003b92:	2118      	movs	r1, #24
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	47a0      	blx	r4
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}

08003ba2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003ba2:	b590      	push	{r4, r7, lr}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68dc      	ldr	r4, [r3, #12]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2119      	movs	r1, #25
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	47a0      	blx	r4
 8003bb8:	4603      	mov	r3, r0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}

08003bc2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003bc2:	b590      	push	{r4, r7, lr}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	73fb      	strb	r3, [r7, #15]
    data++;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2bfe      	cmp	r3, #254	; 0xfe
 8003bdc:	d031      	beq.n	8003c42 <u8x8_cad_SendSequence+0x80>
 8003bde:	2bfe      	cmp	r3, #254	; 0xfe
 8003be0:	dc3d      	bgt.n	8003c5e <u8x8_cad_SendSequence+0x9c>
 8003be2:	2b19      	cmp	r3, #25
 8003be4:	dc3b      	bgt.n	8003c5e <u8x8_cad_SendSequence+0x9c>
 8003be6:	2b18      	cmp	r3, #24
 8003be8:	da23      	bge.n	8003c32 <u8x8_cad_SendSequence+0x70>
 8003bea:	2b16      	cmp	r3, #22
 8003bec:	dc02      	bgt.n	8003bf4 <u8x8_cad_SendSequence+0x32>
 8003bee:	2b15      	cmp	r3, #21
 8003bf0:	da03      	bge.n	8003bfa <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003bf2:	e034      	b.n	8003c5e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003bf4:	2b17      	cmp	r3, #23
 8003bf6:	d00e      	beq.n	8003c16 <u8x8_cad_SendSequence+0x54>
	return;
 8003bf8:	e031      	b.n	8003c5e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68dc      	ldr	r4, [r3, #12]
 8003c04:	7bba      	ldrb	r2, [r7, #14]
 8003c06:	7bf9      	ldrb	r1, [r7, #15]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	47a0      	blx	r4
	  data++;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	603b      	str	r3, [r7, #0]
	  break;
 8003c14:	e022      	b.n	8003c5c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003c1c:	f107 030e 	add.w	r3, r7, #14
 8003c20:	461a      	mov	r2, r3
 8003c22:	2101      	movs	r1, #1
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff99 	bl	8003b5c <u8x8_cad_SendData>
	  data++;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	603b      	str	r3, [r7, #0]
	  break;
 8003c30:	e014      	b.n	8003c5c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68dc      	ldr	r4, [r3, #12]
 8003c36:	7bf9      	ldrb	r1, [r7, #15]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	47a0      	blx	r4
	  break;
 8003c40:	e00c      	b.n	8003c5c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2129      	movs	r1, #41	; 0x29
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa3d 	bl	80040ce <u8x8_gpio_call>
	  data++;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	603b      	str	r3, [r7, #0]
	  break;
 8003c5a:	bf00      	nop
    cmd = *data;
 8003c5c:	e7b6      	b.n	8003bcc <u8x8_cad_SendSequence+0xa>
	return;
 8003c5e:	bf00      	nop
    }
  }
}
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd90      	pop	{r4, r7, pc}
	...

08003c68 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	72fb      	strb	r3, [r7, #11]
 8003c76:	4613      	mov	r3, r2
 8003c78:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
 8003c7c:	3b14      	subs	r3, #20
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d82f      	bhi.n	8003ce2 <u8x8_cad_001+0x7a>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <u8x8_cad_001+0x20>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cd1 	.word	0x08003cd1
 8003c8c:	08003ca1 	.word	0x08003ca1
 8003c90:	08003cb5 	.word	0x08003cb5
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003cd1 	.word	0x08003cd1
 8003c9c:	08003cd1 	.word	0x08003cd1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff ff00 	bl	8003aa8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003ca8:	7abb      	ldrb	r3, [r7, #10]
 8003caa:	4619      	mov	r1, r3
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff ff20 	bl	8003af2 <u8x8_byte_SendByte>
      break;
 8003cb2:	e018      	b.n	8003ce6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff fef6 	bl	8003aa8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003cbc:	7abb      	ldrb	r3, [r7, #10]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7ff ff16 	bl	8003af2 <u8x8_byte_SendByte>
      break;
 8003cc6:	e00e      	b.n	8003ce6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003cc8:	2101      	movs	r1, #1
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff feec 	bl	8003aa8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	691c      	ldr	r4, [r3, #16]
 8003cd4:	7aba      	ldrb	r2, [r7, #10]
 8003cd6:	7af9      	ldrb	r1, [r7, #11]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	47a0      	blx	r4
 8003cde:	4603      	mov	r3, r0
 8003ce0:	e002      	b.n	8003ce8 <u8x8_cad_001+0x80>
    default:
      return 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e000      	b.n	8003ce8 <u8x8_cad_001+0x80>
  }
  return 1;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <u8x8_ssd1327_8to32>:
*/

static uint8_t u8x8_ssd1327_8to32_dest_buf[32];

static uint8_t *u8x8_ssd1327_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	74fb      	strb	r3, [r7, #19]
 8003cfe:	e03d      	b.n	8003d7c <u8x8_ssd1327_8to32+0x8c>
  {
    dest = u8x8_ssd1327_8to32_dest_buf;
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <u8x8_ssd1327_8to32+0xa0>)
 8003d02:	60fb      	str	r3, [r7, #12]
    dest += j;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	75bb      	strb	r3, [r7, #22]
    ptr++;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	603b      	str	r3, [r7, #0]
    b = *ptr;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	757b      	strb	r3, [r7, #21]
    ptr++;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 8003d24:	2300      	movs	r3, #0
 8003d26:	753b      	strb	r3, [r7, #20]
 8003d28:	e022      	b.n	8003d70 <u8x8_ssd1327_8to32+0x80>
    {
      v = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 8003d2e:	7dbb      	ldrb	r3, [r7, #22]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <u8x8_ssd1327_8to32+0x50>
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	f063 030f 	orn	r3, r3, #15
 8003d3e:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 8003d40:	7d7b      	ldrb	r3, [r7, #21]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <u8x8_ssd1327_8to32+0x62>
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	f043 030f 	orr.w	r3, r3, #15
 8003d50:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	7dfa      	ldrb	r2, [r7, #23]
 8003d56:	701a      	strb	r2, [r3, #0]
      dest+=4;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 8003d5e:	7dbb      	ldrb	r3, [r7, #22]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 8003d64:	7d7b      	ldrb	r3, [r7, #21]
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 8003d6a:	7d3b      	ldrb	r3, [r7, #20]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	753b      	strb	r3, [r7, #20]
 8003d70:	7d3b      	ldrb	r3, [r7, #20]
 8003d72:	2b07      	cmp	r3, #7
 8003d74:	d9d9      	bls.n	8003d2a <u8x8_ssd1327_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	74fb      	strb	r3, [r7, #19]
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d9be      	bls.n	8003d00 <u8x8_ssd1327_8to32+0x10>
    }
  }
  
  return u8x8_ssd1327_8to32_dest_buf;
 8003d82:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <u8x8_ssd1327_8to32+0xa0>)
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20000944 	.word	0x20000944

08003d94 <u8x8_d_ssd1327_96x96_generic>:




static uint8_t u8x8_d_ssd1327_96x96_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	72fb      	strb	r3, [r7, #11]
 8003da2:	4613      	mov	r3, r2
 8003da4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	2b0f      	cmp	r3, #15
 8003daa:	d023      	beq.n	8003df4 <u8x8_d_ssd1327_96x96_generic+0x60>
 8003dac:	2b0f      	cmp	r3, #15
 8003dae:	dc7e      	bgt.n	8003eae <u8x8_d_ssd1327_96x96_generic+0x11a>
 8003db0:	2b0b      	cmp	r3, #11
 8003db2:	d002      	beq.n	8003dba <u8x8_d_ssd1327_96x96_generic+0x26>
 8003db4:	2b0e      	cmp	r3, #14
 8003db6:	d00d      	beq.n	8003dd4 <u8x8_d_ssd1327_96x96_generic+0x40>
 8003db8:	e079      	b.n	8003eae <u8x8_d_ssd1327_96x96_generic+0x11a>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003dba:	7abb      	ldrb	r3, [r7, #10]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <u8x8_d_ssd1327_96x96_generic+0x36>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave0_seq);
 8003dc0:	493e      	ldr	r1, [pc, #248]	; (8003ebc <u8x8_d_ssd1327_96x96_generic+0x128>)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fefd 	bl	8003bc2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave1_seq);
      break;
 8003dc8:	e073      	b.n	8003eb2 <u8x8_d_ssd1327_96x96_generic+0x11e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave1_seq);
 8003dca:	493d      	ldr	r1, [pc, #244]	; (8003ec0 <u8x8_d_ssd1327_96x96_generic+0x12c>)
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff fef8 	bl	8003bc2 <u8x8_cad_SendSequence>
      break;
 8003dd2:	e06e      	b.n	8003eb2 <u8x8_d_ssd1327_96x96_generic+0x11e>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff fed4 	bl	8003b82 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003dda:	2181      	movs	r1, #129	; 0x81
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff fe99 	bl	8003b14 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1327 has range from 0 to 255 */
 8003de2:	7abb      	ldrb	r3, [r7, #10]
 8003de4:	4619      	mov	r1, r3
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff fea6 	bl	8003b38 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff fed8 	bl	8003ba2 <u8x8_cad_EndTransfer>
      break;
 8003df2:	e05e      	b.n	8003eb2 <u8x8_d_ssd1327_96x96_generic+0x11e>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fec4 	bl	8003b82 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	795b      	ldrb	r3, [r3, #5]
 8003dfe:	77fb      	strb	r3, [r7, #31]
      x *= 4;
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	77fb      	strb	r3, [r7, #31]
      x+=u8x8->x_offset/2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	4413      	add	r3, r2
 8003e14:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	799b      	ldrb	r3, [r3, #6]
 8003e1a:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8003e22:	2175      	movs	r1, #117	; 0x75
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff fe75 	bl	8003b14 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fe82 	bl	8003b38 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	3307      	adds	r3, #7
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff fe7b 	bl	8003b38 <u8x8_cad_SendArg>
	  
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	791b      	ldrb	r3, [r3, #4]
 8003e46:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 8003e4e:	2115      	movs	r1, #21
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f7ff fe5f 	bl	8003b14 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 8003e56:	7ffb      	ldrb	r3, [r7, #31]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff fe6c 	bl	8003b38 <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+3 );	/* end */
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
 8003e62:	3303      	adds	r3, #3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	4619      	mov	r1, r3
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fe65 	bl	8003b38 <u8x8_cad_SendArg>

	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1327_8to32(u8x8, ptr));
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff ff3d 	bl	8003cf0 <u8x8_ssd1327_8to32>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fe6d 	bl	8003b5c <u8x8_cad_SendData>
	  ptr += 8;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3308      	adds	r3, #8
 8003e86:	61bb      	str	r3, [r7, #24]
	  x += 4;
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	77fb      	strb	r3, [r7, #31]
	  c--;
 8003e8e:	7fbb      	ldrb	r3, [r7, #30]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 8003e94:	7fbb      	ldrb	r3, [r7, #30]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1d9      	bne.n	8003e4e <u8x8_d_ssd1327_96x96_generic+0xba>
	
	//x += 4;
	arg_int--;
 8003e9a:	7abb      	ldrb	r3, [r7, #10]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003ea0:	7abb      	ldrb	r3, [r7, #10]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1cd      	bne.n	8003e42 <u8x8_d_ssd1327_96x96_generic+0xae>
      
      u8x8_cad_EndTransfer(u8x8);
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff fe7b 	bl	8003ba2 <u8x8_cad_EndTransfer>
      break;
 8003eac:	e001      	b.n	8003eb2 <u8x8_d_ssd1327_96x96_generic+0x11e>
    default:
      return 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <u8x8_d_ssd1327_96x96_generic+0x120>
  }
  return 1;
 8003eb2:	2301      	movs	r3, #1
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	0800472c 	.word	0x0800472c
 8003ec0:	08004734 	.word	0x08004734

08003ec4 <u8x8_d_ssd1327_ea_w128128>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_ssd1327_ea_w128128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	72fb      	strb	r3, [r7, #11]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	72bb      	strb	r3, [r7, #10]
  if ( u8x8_d_ssd1327_96x96_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8003ed6:	7aba      	ldrb	r2, [r7, #10]
 8003ed8:	7af9      	ldrb	r1, [r7, #11]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f7ff ff59 	bl	8003d94 <u8x8_d_ssd1327_96x96_generic>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <u8x8_d_ssd1327_ea_w128128+0x28>
    return 1;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e032      	b.n	8003f52 <u8x8_d_ssd1327_ea_w128128+0x8e>
  if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8003eec:	7afb      	ldrb	r3, [r7, #11]
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	d105      	bne.n	8003efe <u8x8_d_ssd1327_ea_w128128+0x3a>
  {
    u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_ea_w128128_display_info);
 8003ef2:	491a      	ldr	r1, [pc, #104]	; (8003f5c <u8x8_d_ssd1327_ea_w128128+0x98>)
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f839 	bl	8003f6c <u8x8_d_helper_display_setup_memory>
    return 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e029      	b.n	8003f52 <u8x8_d_ssd1327_ea_w128128+0x8e>
  }
  else if ( msg == U8X8_MSG_DISPLAY_INIT )
 8003efe:	7afb      	ldrb	r3, [r7, #11]
 8003f00:	2b0a      	cmp	r3, #10
 8003f02:	d108      	bne.n	8003f16 <u8x8_d_ssd1327_ea_w128128+0x52>
  {
    u8x8_d_helper_display_init(u8x8);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f845 	bl	8003f94 <u8x8_d_helper_display_init>
    u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_init_seq);    
 8003f0a:	4915      	ldr	r1, [pc, #84]	; (8003f60 <u8x8_d_ssd1327_ea_w128128+0x9c>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fe58 	bl	8003bc2 <u8x8_cad_SendSequence>
    return 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e01d      	b.n	8003f52 <u8x8_d_ssd1327_ea_w128128+0x8e>
  }
  else if  ( msg == U8X8_MSG_DISPLAY_SET_FLIP_MODE )
 8003f16:	7afb      	ldrb	r3, [r7, #11]
 8003f18:	2b0d      	cmp	r3, #13
 8003f1a:	d119      	bne.n	8003f50 <u8x8_d_ssd1327_ea_w128128+0x8c>
  {
    if ( arg_int == 0 )
 8003f1c:	7abb      	ldrb	r3, [r7, #10]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <u8x8_d_ssd1327_ea_w128128+0x74>
    {
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip0_seq);
 8003f22:	4910      	ldr	r1, [pc, #64]	; (8003f64 <u8x8_d_ssd1327_ea_w128128+0xa0>)
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fe4c 	bl	8003bc2 <u8x8_cad_SendSequence>
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	7c9a      	ldrb	r2, [r3, #18]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003f36:	e009      	b.n	8003f4c <u8x8_d_ssd1327_ea_w128128+0x88>
    }
    else
    {
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip1_seq);
 8003f38:	490b      	ldr	r1, [pc, #44]	; (8003f68 <u8x8_d_ssd1327_ea_w128128+0xa4>)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff fe41 	bl	8003bc2 <u8x8_cad_SendSequence>
      u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	7cda      	ldrb	r2, [r3, #19]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
    return 1;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <u8x8_d_ssd1327_ea_w128128+0x8e>
  }
  return 0;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	0800473c 	.word	0x0800473c
 8003f60:	08004754 	.word	0x08004754
 8003f64:	08004794 	.word	0x08004794
 8003f68:	080047a0 	.word	0x080047a0

08003f6c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	7c9a      	ldrb	r2, [r3, #18]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695c      	ldr	r4, [r3, #20]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2128      	movs	r1, #40	; 0x28
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68dc      	ldr	r4, [r3, #12]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2114      	movs	r1, #20
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003fb8:	2201      	movs	r2, #1
 8003fba:	214b      	movs	r1, #75	; 0x4b
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f886 	bl	80040ce <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2129      	movs	r1, #41	; 0x29
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f87e 	bl	80040ce <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	214b      	movs	r1, #75	; 0x4b
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f879 	bl	80040ce <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	791b      	ldrb	r3, [r3, #4]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2129      	movs	r1, #41	; 0x29
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f871 	bl	80040ce <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003fec:	2201      	movs	r2, #1
 8003fee:	214b      	movs	r1, #75	; 0x4b
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f86c 	bl	80040ce <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	795b      	ldrb	r3, [r3, #5]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2129      	movs	r1, #41	; 0x29
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f864 	bl	80040ce <u8x8_gpio_call>
}    
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}

0800400e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800400e:	b590      	push	{r4, r7, lr}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	4608      	mov	r0, r1
 8004018:	4611      	mov	r1, r2
 800401a:	461a      	mov	r2, r3
 800401c:	4603      	mov	r3, r0
 800401e:	70fb      	strb	r3, [r7, #3]
 8004020:	460b      	mov	r3, r1
 8004022:	70bb      	strb	r3, [r7, #2]
 8004024:	4613      	mov	r3, r2
 8004026:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800402c:	78bb      	ldrb	r3, [r7, #2]
 800402e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004030:	787b      	ldrb	r3, [r7, #1]
 8004032:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689c      	ldr	r4, [r3, #8]
 800403c:	f107 0308 	add.w	r3, r7, #8
 8004040:	2201      	movs	r2, #1
 8004042:	210f      	movs	r1, #15
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	47a0      	blx	r4
 8004048:	4603      	mov	r3, r0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}

08004052 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004052:	b590      	push	{r4, r7, lr}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689c      	ldr	r4, [r3, #8]
 800405e:	2300      	movs	r3, #0
 8004060:	2200      	movs	r2, #0
 8004062:	2109      	movs	r1, #9
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	47a0      	blx	r4
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689c      	ldr	r4, [r3, #8]
 800407c:	2300      	movs	r3, #0
 800407e:	2200      	movs	r2, #0
 8004080:	210a      	movs	r1, #10
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	47a0      	blx	r4
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}

0800408e <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800408e:	b590      	push	{r4, r7, lr}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689c      	ldr	r4, [r3, #8]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	2300      	movs	r3, #0
 80040a2:	210b      	movs	r1, #11
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	47a0      	blx	r4
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd90      	pop	{r4, r7, pc}

080040b0 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689c      	ldr	r4, [r3, #8]
 80040bc:	2300      	movs	r3, #0
 80040be:	2200      	movs	r2, #0
 80040c0:	2110      	movs	r1, #16
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	47a0      	blx	r4
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd90      	pop	{r4, r7, pc}

080040ce <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70fb      	strb	r3, [r7, #3]
 80040da:	4613      	mov	r3, r2
 80040dc:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695c      	ldr	r4, [r3, #20]
 80040e2:	78ba      	ldrb	r2, [r7, #2]
 80040e4:	78f9      	ldrb	r1, [r7, #3]
 80040e6:	2300      	movs	r3, #0
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	47a0      	blx	r4
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}

080040f4 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	72fb      	strb	r3, [r7, #11]
 8004102:	4613      	mov	r3, r2
 8004104:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <u8x8_SetupDefaults+0x60>)
 8004126:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a12      	ldr	r2, [pc, #72]	; (8004174 <u8x8_SetupDefaults+0x60>)
 800412c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a10      	ldr	r2, [pc, #64]	; (8004174 <u8x8_SetupDefaults+0x60>)
 8004132:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <u8x8_SetupDefaults+0x60>)
 8004138:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	22ff      	movs	r2, #255	; 0xff
 800415c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	22ff      	movs	r2, #255	; 0xff
 8004164:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	080040f5 	.word	0x080040f5

08004178 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff ffc4 	bl	8004114 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff ff54 	bl	8004052 <u8x8_SetupMemory>
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041b8:	480d      	ldr	r0, [pc, #52]	; (80041f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041ba:	490e      	ldr	r1, [pc, #56]	; (80041f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041bc:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041c0:	e002      	b.n	80041c8 <LoopCopyDataInit>

080041c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041c6:	3304      	adds	r3, #4

080041c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041cc:	d3f9      	bcc.n	80041c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ce:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041d0:	4c0b      	ldr	r4, [pc, #44]	; (8004200 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041d4:	e001      	b.n	80041da <LoopFillZerobss>

080041d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041d8:	3204      	adds	r2, #4

080041da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041dc:	d3fb      	bcc.n	80041d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041de:	f7fe f91d 	bl	800241c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041e2:	f000 f819 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041e6:	f7fd fe8b 	bl	8001f00 <main>
  bx  lr    
 80041ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041f4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80041f8:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 80041fc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8004200:	20000964 	.word	0x20000964

08004204 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004204:	e7fe      	b.n	8004204 <ADC_IRQHandler>

08004206 <memset>:
 8004206:	4402      	add	r2, r0
 8004208:	4603      	mov	r3, r0
 800420a:	4293      	cmp	r3, r2
 800420c:	d100      	bne.n	8004210 <memset+0xa>
 800420e:	4770      	bx	lr
 8004210:	f803 1b01 	strb.w	r1, [r3], #1
 8004214:	e7f9      	b.n	800420a <memset+0x4>
	...

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4d0d      	ldr	r5, [pc, #52]	; (8004250 <__libc_init_array+0x38>)
 800421c:	4c0d      	ldr	r4, [pc, #52]	; (8004254 <__libc_init_array+0x3c>)
 800421e:	1b64      	subs	r4, r4, r5
 8004220:	10a4      	asrs	r4, r4, #2
 8004222:	2600      	movs	r6, #0
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	4d0b      	ldr	r5, [pc, #44]	; (8004258 <__libc_init_array+0x40>)
 800422a:	4c0c      	ldr	r4, [pc, #48]	; (800425c <__libc_init_array+0x44>)
 800422c:	f000 f818 	bl	8004260 <_init>
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	2600      	movs	r6, #0
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	f855 3b04 	ldr.w	r3, [r5], #4
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	080047b4 	.word	0x080047b4
 8004254:	080047b4 	.word	0x080047b4
 8004258:	080047b4 	.word	0x080047b4
 800425c:	080047b8 	.word	0x080047b8

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
