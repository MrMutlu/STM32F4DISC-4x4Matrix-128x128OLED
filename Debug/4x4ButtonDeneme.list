
4x4ButtonDeneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a8  080064a8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064b0  080064b0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080064b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000b24  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bac  20000bac  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00038175  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037c4  00000000  00000000  00058270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000026f8  00000000  00000000  0005ba38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d80  00000000  00000000  0005e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000235e8  00000000  00000000  0005feb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c3dc  00000000  00000000  00083498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9f9f  00000000  00000000  0009f874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b0a0  00000000  00000000  00179814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001848b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ed8 	.word	0x08005ed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005ed8 	.word	0x08005ed8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_Init+0x40>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <HAL_Init+0x40>)
 8000576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <HAL_Init+0x40>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <HAL_Init+0x40>)
 8000582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <HAL_Init+0x40>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <HAL_Init+0x40>)
 800058e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000594:	2003      	movs	r0, #3
 8000596:	f000 f931 	bl	80007fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059a:	200f      	movs	r0, #15
 800059c:	f000 f808 	bl	80005b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a0:	f002 fd0c 	bl	8002fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023c00 	.word	0x40023c00

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_InitTick+0x54>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x58>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f93b 	bl	800084a <HAL_SYSTICK_Config>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	e00e      	b.n	80005fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d80a      	bhi.n	80005fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	2200      	movs	r2, #0
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f911 	bl	8000812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <HAL_InitTick+0x5c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e000      	b.n	80005fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000028 	.word	0x20000028
 8000608:	20000004 	.word	0x20000004
 800060c:	20000000 	.word	0x20000000

08000610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_IncTick+0x20>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x24>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <HAL_IncTick+0x24>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000004 	.word	0x20000004
 8000634:	200000a4 	.word	0x200000a4

08000638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <HAL_GetTick+0x14>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000a4 	.word	0x200000a4

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000658:	f7ff ffee 	bl	8000638 <HAL_GetTick>
 800065c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000668:	d005      	beq.n	8000676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_Delay+0x44>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4413      	add	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000676:	bf00      	nop
 8000678:	f7ff ffde 	bl	8000638 <HAL_GetTick>
 800067c:	4602      	mov	r2, r0
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	429a      	cmp	r2, r3
 8000686:	d8f7      	bhi.n	8000678 <HAL_Delay+0x28>
  {
  }
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c8:	d301      	bcc.n	80007ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00f      	b.n	80007ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <SysTick_Config+0x40>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d6:	210f      	movs	r1, #15
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f7ff ff8e 	bl	80006fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SysTick_Config+0x40>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SysTick_Config+0x40>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	e000e010 	.word	0xe000e010

080007fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff47 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000824:	f7ff ff5c 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	6978      	ldr	r0, [r7, #20]
 8000830:	f7ff ff8e 	bl	8000750 <NVIC_EncodePriority>
 8000834:	4602      	mov	r2, r0
 8000836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083a:	4611      	mov	r1, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff5d 	bl	80006fc <__NVIC_SetPriority>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffb0 	bl	80007b8 <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	e16b      	b.n	8000b58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000880:	2201      	movs	r2, #1
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	429a      	cmp	r2, r3
 800089a:	f040 815a 	bne.w	8000b52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d005      	beq.n	80008b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d130      	bne.n	8000918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2203      	movs	r2, #3
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4013      	ands	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4313      	orrs	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ec:	2201      	movs	r2, #1
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	091b      	lsrs	r3, r3, #4
 8000902:	f003 0201 	and.w	r2, r3, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	2b03      	cmp	r3, #3
 8000922:	d017      	beq.n	8000954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	2b02      	cmp	r3, #2
 800095e:	d123      	bne.n	80009a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	08da      	lsrs	r2, r3, #3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3208      	adds	r2, #8
 8000968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	220f      	movs	r2, #15
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	691a      	ldr	r2, [r3, #16]
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	08da      	lsrs	r2, r3, #3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3208      	adds	r2, #8
 80009a2:	69b9      	ldr	r1, [r7, #24]
 80009a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4013      	ands	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0203 	and.w	r2, r3, #3
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80b4 	beq.w	8000b52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b60      	ldr	r3, [pc, #384]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a5f      	ldr	r2, [pc, #380]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b5d      	ldr	r3, [pc, #372]	; (8000b70 <HAL_GPIO_Init+0x30c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a06:	4a5b      	ldr	r2, [pc, #364]	; (8000b74 <HAL_GPIO_Init+0x310>)
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4013      	ands	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a52      	ldr	r2, [pc, #328]	; (8000b78 <HAL_GPIO_Init+0x314>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d02b      	beq.n	8000a8a <HAL_GPIO_Init+0x226>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a51      	ldr	r2, [pc, #324]	; (8000b7c <HAL_GPIO_Init+0x318>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d025      	beq.n	8000a86 <HAL_GPIO_Init+0x222>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a50      	ldr	r2, [pc, #320]	; (8000b80 <HAL_GPIO_Init+0x31c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d01f      	beq.n	8000a82 <HAL_GPIO_Init+0x21e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4f      	ldr	r2, [pc, #316]	; (8000b84 <HAL_GPIO_Init+0x320>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d019      	beq.n	8000a7e <HAL_GPIO_Init+0x21a>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4e      	ldr	r2, [pc, #312]	; (8000b88 <HAL_GPIO_Init+0x324>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0x216>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4d      	ldr	r2, [pc, #308]	; (8000b8c <HAL_GPIO_Init+0x328>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d00d      	beq.n	8000a76 <HAL_GPIO_Init+0x212>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4c      	ldr	r2, [pc, #304]	; (8000b90 <HAL_GPIO_Init+0x32c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d007      	beq.n	8000a72 <HAL_GPIO_Init+0x20e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <HAL_GPIO_Init+0x330>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_GPIO_Init+0x20a>
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	e00e      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a6e:	2308      	movs	r3, #8
 8000a70:	e00c      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a72:	2306      	movs	r3, #6
 8000a74:	e00a      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a76:	2305      	movs	r3, #5
 8000a78:	e008      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a7e:	2303      	movs	r3, #3
 8000a80:	e004      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e002      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x228>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	69fa      	ldr	r2, [r7, #28]
 8000a8e:	f002 0203 	and.w	r2, r2, #3
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	4093      	lsls	r3, r2
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a9c:	4935      	ldr	r1, [pc, #212]	; (8000b74 <HAL_GPIO_Init+0x310>)
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ace:	4a32      	ldr	r2, [pc, #200]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000af8:	4a27      	ldr	r2, [pc, #156]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b22:	4a1d      	ldr	r2, [pc, #116]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_GPIO_Init+0x334>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	f67f ae90 	bls.w	8000880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3724      	adds	r7, #36	; 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40013800 	.word	0x40013800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40021400 	.word	0x40021400
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40021c00 	.word	0x40021c00
 8000b98:	40013c00 	.word	0x40013c00

08000b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e001      	b.n	8000bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bdc:	787b      	ldrb	r3, [r7, #1]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000be8:	e003      	b.n	8000bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	041a      	lsls	r2, r3, #16
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	619a      	str	r2, [r3, #24]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e12b      	b.n	8000e6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d106      	bne.n	8000c2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f002 f9f0 	bl	800300c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2224      	movs	r2, #36	; 0x24
 8000c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c64:	f000 fd40 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000c68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	4a81      	ldr	r2, [pc, #516]	; (8000e74 <HAL_I2C_Init+0x274>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d807      	bhi.n	8000c84 <HAL_I2C_Init+0x84>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4a80      	ldr	r2, [pc, #512]	; (8000e78 <HAL_I2C_Init+0x278>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	bf94      	ite	ls
 8000c7c:	2301      	movls	r3, #1
 8000c7e:	2300      	movhi	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	e006      	b.n	8000c92 <HAL_I2C_Init+0x92>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4a7d      	ldr	r2, [pc, #500]	; (8000e7c <HAL_I2C_Init+0x27c>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	bf94      	ite	ls
 8000c8c:	2301      	movls	r3, #1
 8000c8e:	2300      	movhi	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e0e7      	b.n	8000e6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4a78      	ldr	r2, [pc, #480]	; (8000e80 <HAL_I2C_Init+0x280>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	0c9b      	lsrs	r3, r3, #18
 8000ca4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	4a6a      	ldr	r2, [pc, #424]	; (8000e74 <HAL_I2C_Init+0x274>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d802      	bhi.n	8000cd4 <HAL_I2C_Init+0xd4>
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	e009      	b.n	8000ce8 <HAL_I2C_Init+0xe8>
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	4a69      	ldr	r2, [pc, #420]	; (8000e84 <HAL_I2C_Init+0x284>)
 8000ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce4:	099b      	lsrs	r3, r3, #6
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	430b      	orrs	r3, r1
 8000cee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000cfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	495c      	ldr	r1, [pc, #368]	; (8000e74 <HAL_I2C_Init+0x274>)
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d819      	bhi.n	8000d3c <HAL_I2C_Init+0x13c>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	1e59      	subs	r1, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d16:	1c59      	adds	r1, r3, #1
 8000d18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d1c:	400b      	ands	r3, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00a      	beq.n	8000d38 <HAL_I2C_Init+0x138>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1e59      	subs	r1, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d30:	3301      	adds	r3, #1
 8000d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d36:	e051      	b.n	8000ddc <HAL_I2C_Init+0x1dc>
 8000d38:	2304      	movs	r3, #4
 8000d3a:	e04f      	b.n	8000ddc <HAL_I2C_Init+0x1dc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <HAL_I2C_Init+0x168>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	1e58      	subs	r0, r3, #1
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6859      	ldr	r1, [r3, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	440b      	add	r3, r1
 8000d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d56:	3301      	adds	r3, #1
 8000d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf0c      	ite	eq
 8000d60:	2301      	moveq	r3, #1
 8000d62:	2300      	movne	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	e012      	b.n	8000d8e <HAL_I2C_Init+0x18e>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1e58      	subs	r0, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6859      	ldr	r1, [r3, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	0099      	lsls	r1, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bf0c      	ite	eq
 8000d88:	2301      	moveq	r3, #1
 8000d8a:	2300      	movne	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_Init+0x196>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e022      	b.n	8000ddc <HAL_I2C_Init+0x1dc>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10e      	bne.n	8000dbc <HAL_I2C_Init+0x1bc>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1e58      	subs	r0, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	440b      	add	r3, r1
 8000dac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dba:	e00f      	b.n	8000ddc <HAL_I2C_Init+0x1dc>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1e58      	subs	r0, r3, #1
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6859      	ldr	r1, [r3, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	0099      	lsls	r1, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	6809      	ldr	r1, [r1, #0]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69da      	ldr	r2, [r3, #28]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a1b      	ldr	r3, [r3, #32]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	6911      	ldr	r1, [r2, #16]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68d2      	ldr	r2, [r2, #12]
 8000e16:	4311      	orrs	r1, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695a      	ldr	r2, [r3, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2220      	movs	r2, #32
 8000e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	000186a0 	.word	0x000186a0
 8000e78:	001e847f 	.word	0x001e847f
 8000e7c:	003d08ff 	.word	0x003d08ff
 8000e80:	431bde83 	.word	0x431bde83
 8000e84:	10624dd3 	.word	0x10624dd3

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e267      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d075      	beq.n	8000f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ea6:	4b88      	ldr	r3, [pc, #544]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d00c      	beq.n	8000ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eb2:	4b85      	ldr	r3, [pc, #532]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d112      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ebe:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eca:	d10b      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ecc:	4b7e      	ldr	r3, [pc, #504]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d05b      	beq.n	8000f90 <HAL_RCC_OscConfig+0x108>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d157      	bne.n	8000f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e242      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eec:	d106      	bne.n	8000efc <HAL_RCC_OscConfig+0x74>
 8000eee:	4b76      	ldr	r3, [pc, #472]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a75      	ldr	r2, [pc, #468]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	e01d      	b.n	8000f38 <HAL_RCC_OscConfig+0xb0>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x98>
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a6f      	ldr	r2, [pc, #444]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a6c      	ldr	r2, [pc, #432]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0xb0>
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a68      	ldr	r2, [pc, #416]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d013      	beq.n	8000f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fb7a 	bl	8000638 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fb76 	bl	8000638 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	; 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e207      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	4b5b      	ldr	r3, [pc, #364]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f0      	beq.n	8000f48 <HAL_RCC_OscConfig+0xc0>
 8000f66:	e014      	b.n	8000f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fb66 	bl	8000638 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fb62 	bl	8000638 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e1f3      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0xe8>
 8000f8e:	e000      	b.n	8000f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d063      	beq.n	8001066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f9e:	4b4a      	ldr	r3, [pc, #296]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d11c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fb6:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d116      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc2:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <HAL_RCC_OscConfig+0x152>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d001      	beq.n	8000fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e1c7      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4937      	ldr	r1, [pc, #220]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	e03a      	b.n	8001066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d020      	beq.n	800103a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff8:	4b34      	ldr	r3, [pc, #208]	; (80010cc <HAL_RCC_OscConfig+0x244>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fb1b 	bl	8000638 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fb17 	bl	8000638 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e1a8      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f0      	beq.n	8001006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001024:	4b28      	ldr	r3, [pc, #160]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4925      	ldr	r1, [pc, #148]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 8001034:	4313      	orrs	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
 8001038:	e015      	b.n	8001066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_RCC_OscConfig+0x244>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001040:	f7ff fafa 	bl	8000638 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001048:	f7ff faf6 	bl	8000638 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e187      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	2b00      	cmp	r3, #0
 8001070:	d036      	beq.n	80010e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d016      	beq.n	80010a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_RCC_OscConfig+0x248>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001080:	f7ff fada 	bl	8000638 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001088:	f7ff fad6 	bl	8000638 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e167      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x240>)
 800109c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0x200>
 80010a6:	e01b      	b.n	80010e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_RCC_OscConfig+0x248>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fac3 	bl	8000638 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b4:	e00e      	b.n	80010d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b6:	f7ff fabf 	bl	8000638 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d907      	bls.n	80010d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e150      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
 80010c8:	40023800 	.word	0x40023800
 80010cc:	42470000 	.word	0x42470000
 80010d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d4:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 80010d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ea      	bne.n	80010b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8097 	beq.w	800121c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f2:	4b81      	ldr	r3, [pc, #516]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10f      	bne.n	800111e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b7d      	ldr	r3, [pc, #500]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a7c      	ldr	r2, [pc, #496]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b7a      	ldr	r3, [pc, #488]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800111a:	2301      	movs	r3, #1
 800111c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111e:	4b77      	ldr	r3, [pc, #476]	; (80012fc <HAL_RCC_OscConfig+0x474>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d118      	bne.n	800115c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112a:	4b74      	ldr	r3, [pc, #464]	; (80012fc <HAL_RCC_OscConfig+0x474>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a73      	ldr	r2, [pc, #460]	; (80012fc <HAL_RCC_OscConfig+0x474>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001136:	f7ff fa7f 	bl	8000638 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113e:	f7ff fa7b 	bl	8000638 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e10c      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_RCC_OscConfig+0x474>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x2ea>
 8001164:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001168:	4a63      	ldr	r2, [pc, #396]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6713      	str	r3, [r2, #112]	; 0x70
 8001170:	e01c      	b.n	80011ac <HAL_RCC_OscConfig+0x324>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x30c>
 800117a:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 800117c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117e:	4a5e      	ldr	r2, [pc, #376]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6713      	str	r3, [r2, #112]	; 0x70
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118a:	4a5b      	ldr	r2, [pc, #364]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6713      	str	r3, [r2, #112]	; 0x70
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0x324>
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001198:	4a57      	ldr	r2, [pc, #348]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	6713      	str	r3, [r2, #112]	; 0x70
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 80011a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a4:	4a54      	ldr	r2, [pc, #336]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 80011a6:	f023 0304 	bic.w	r3, r3, #4
 80011aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b4:	f7ff fa40 	bl	8000638 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011bc:	f7ff fa3c 	bl	8000638 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e0cb      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d2:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0ee      	beq.n	80011bc <HAL_RCC_OscConfig+0x334>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e0:	f7ff fa2a 	bl	8000638 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff fa26 	bl	8000638 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e0b5      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1ee      	bne.n	80011e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001210:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a38      	ldr	r2, [pc, #224]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80a1 	beq.w	8001368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001226:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b08      	cmp	r3, #8
 8001230:	d05c      	beq.n	80012ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d141      	bne.n	80012be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_RCC_OscConfig+0x478>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff f9fa 	bl	8000638 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff f9f6 	bl	8000638 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e087      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69da      	ldr	r2, [r3, #28]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	085b      	lsrs	r3, r3, #1
 800127e:	3b01      	subs	r3, #1
 8001280:	041b      	lsls	r3, r3, #16
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	491b      	ldr	r1, [pc, #108]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_RCC_OscConfig+0x478>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff f9cf 	bl	8000638 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff f9cb 	bl	8000638 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e05c      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x416>
 80012bc:	e054      	b.n	8001368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_RCC_OscConfig+0x478>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff f9b8 	bl	8000638 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff f9b4 	bl	8000638 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e045      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RCC_OscConfig+0x470>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x444>
 80012ea:	e03d      	b.n	8001368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e038      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000
 8001300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_RCC_OscConfig+0x4ec>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d028      	beq.n	8001364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800131c:	429a      	cmp	r2, r3
 800131e:	d121      	bne.n	8001364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d11a      	bne.n	8001364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001334:	4013      	ands	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800133a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800133c:	4293      	cmp	r3, r2
 800133e:	d111      	bne.n	8001364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	3b01      	subs	r3, #1
 800134e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d107      	bne.n	8001364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0cc      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d90c      	bls.n	80013b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b65      	ldr	r3, [pc, #404]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0b8      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a58      	ldr	r2, [pc, #352]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f0:	4b50      	ldr	r3, [pc, #320]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	494d      	ldr	r1, [pc, #308]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d044      	beq.n	8001498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d107      	bne.n	8001426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d119      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e07f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d003      	beq.n	8001436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001432:	2b03      	cmp	r3, #3
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b3f      	ldr	r3, [pc, #252]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e06f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e067      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b37      	ldr	r3, [pc, #220]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4934      	ldr	r1, [pc, #208]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff f8e6 	bl	8000638 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff f8e2 	bl	8000638 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e04f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d20c      	bcs.n	80014c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e032      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4916      	ldr	r1, [pc, #88]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014fe:	f000 f821 	bl	8001544 <HAL_RCC_GetSysClockFreq>
 8001502:	4602      	mov	r2, r0
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	490a      	ldr	r1, [pc, #40]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	5ccb      	ldrb	r3, [r1, r3]
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f846 	bl	80005b0 <HAL_InitTick>

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00
 8001534:	40023800 	.word	0x40023800
 8001538:	08006004 	.word	0x08006004
 800153c:	20000028 	.word	0x20000028
 8001540:	20000000 	.word	0x20000000

08001544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001548:	b090      	sub	sp, #64	; 0x40
 800154a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
 8001550:	2300      	movs	r3, #0
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001554:	2300      	movs	r3, #0
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d00d      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x40>
 8001568:	2b08      	cmp	r3, #8
 800156a:	f200 80a1 	bhi.w	80016b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x34>
 8001572:	2b04      	cmp	r3, #4
 8001574:	d003      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x3a>
 8001576:	e09b      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800157c:	e09b      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800157e:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001582:	e098      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800158e:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d028      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159a:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	2200      	movs	r2, #0
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	627a      	str	r2, [r7, #36]	; 0x24
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015ac:	2100      	movs	r1, #0
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_GetSysClockFreq+0x188>)
 80015b0:	fb03 f201 	mul.w	r2, r3, r1
 80015b4:	2300      	movs	r3, #0
 80015b6:	fb00 f303 	mul.w	r3, r0, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_RCC_GetSysClockFreq+0x188>)
 80015be:	fba0 1202 	umull	r1, r2, r0, r2
 80015c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015c4:	460a      	mov	r2, r1
 80015c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80015c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ca:	4413      	add	r3, r2
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d0:	2200      	movs	r2, #0
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	61fa      	str	r2, [r7, #28]
 80015d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015de:	f7fe fe47 	bl	8000270 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4613      	mov	r3, r2
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ea:	e053      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	2200      	movs	r2, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	617a      	str	r2, [r7, #20]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015fe:	f04f 0b00 	mov.w	fp, #0
 8001602:	4652      	mov	r2, sl
 8001604:	465b      	mov	r3, fp
 8001606:	f04f 0000 	mov.w	r0, #0
 800160a:	f04f 0100 	mov.w	r1, #0
 800160e:	0159      	lsls	r1, r3, #5
 8001610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001614:	0150      	lsls	r0, r2, #5
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ebb2 080a 	subs.w	r8, r2, sl
 800161e:	eb63 090b 	sbc.w	r9, r3, fp
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800162e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001632:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001636:	ebb2 0408 	subs.w	r4, r2, r8
 800163a:	eb63 0509 	sbc.w	r5, r3, r9
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	00eb      	lsls	r3, r5, #3
 8001648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800164c:	00e2      	lsls	r2, r4, #3
 800164e:	4614      	mov	r4, r2
 8001650:	461d      	mov	r5, r3
 8001652:	eb14 030a 	adds.w	r3, r4, sl
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	eb45 030b 	adc.w	r3, r5, fp
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800166a:	4629      	mov	r1, r5
 800166c:	028b      	lsls	r3, r1, #10
 800166e:	4621      	mov	r1, r4
 8001670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001674:	4621      	mov	r1, r4
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	2200      	movs	r2, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001688:	f7fe fdf2 	bl	8000270 <__aeabi_uldivmod>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4613      	mov	r3, r2
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	0c1b      	lsrs	r3, r3, #16
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	3301      	adds	r3, #1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80016a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016ae:	e002      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3740      	adds	r7, #64	; 0x40
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	00f42400 	.word	0x00f42400
 80016cc:	017d7840 	.word	0x017d7840

080016d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000028 	.word	0x20000028

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff0 	bl	80016d0 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0a9b      	lsrs	r3, r3, #10
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	; (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	08006014 	.word	0x08006014

08001710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001714:	f7ff ffdc 	bl	80016d0 <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	0b5b      	lsrs	r3, r3, #13
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	; (8001734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	08006014 	.word	0x08006014

08001738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e07b      	b.n	8001842 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	2b00      	cmp	r3, #0
 8001750:	d108      	bne.n	8001764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800175a:	d009      	beq.n	8001770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
 8001762:	e005      	b.n	8001770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f001 fc86 	bl	800309c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	431a      	orrs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f4:	ea42 0103 	orr.w	r1, r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	f003 0104 	and.w	r1, r3, #4
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f003 0210 	and.w	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b088      	sub	sp, #32
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4613      	mov	r3, r2
 8001858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_SPI_Transmit+0x22>
 8001868:	2302      	movs	r3, #2
 800186a:	e126      	b.n	8001aba <HAL_SPI_Transmit+0x270>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001874:	f7fe fee0 	bl	8000638 <HAL_GetTick>
 8001878:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d002      	beq.n	8001890 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800188a:	2302      	movs	r3, #2
 800188c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800188e:	e10b      	b.n	8001aa8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_SPI_Transmit+0x52>
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018a0:	e102      	b.n	8001aa8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2203      	movs	r2, #3
 80018a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e8:	d10f      	bne.n	800190a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001908:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b40      	cmp	r3, #64	; 0x40
 8001916:	d007      	beq.n	8001928 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001930:	d14b      	bne.n	80019ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_SPI_Transmit+0xf6>
 800193a:	8afb      	ldrh	r3, [r7, #22]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d13e      	bne.n	80019be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	1c9a      	adds	r2, r3, #2
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001964:	e02b      	b.n	80019be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b02      	cmp	r3, #2
 8001972:	d112      	bne.n	800199a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	1c9a      	adds	r2, r3, #2
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	86da      	strh	r2, [r3, #54]	; 0x36
 8001998:	e011      	b.n	80019be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800199a:	f7fe fe4d 	bl	8000638 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d803      	bhi.n	80019b2 <HAL_SPI_Transmit+0x168>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d102      	bne.n	80019b8 <HAL_SPI_Transmit+0x16e>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019bc:	e074      	b.n	8001aa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ce      	bne.n	8001966 <HAL_SPI_Transmit+0x11c>
 80019c8:	e04c      	b.n	8001a64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_SPI_Transmit+0x18e>
 80019d2:	8afb      	ldrh	r3, [r7, #22]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d140      	bne.n	8001a5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	330c      	adds	r3, #12
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019fe:	e02c      	b.n	8001a5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d113      	bne.n	8001a36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	330c      	adds	r3, #12
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a34:	e011      	b.n	8001a5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a36:	f7fe fdff 	bl	8000638 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d803      	bhi.n	8001a4e <HAL_SPI_Transmit+0x204>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d102      	bne.n	8001a54 <HAL_SPI_Transmit+0x20a>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a58:	e026      	b.n	8001aa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1cd      	bne.n	8001a00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f8b3 	bl	8001bd4 <SPI_EndRxTxTransaction>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	77fb      	strb	r3, [r7, #31]
 8001aa4:	e000      	b.n	8001aa8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001aa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ad4:	f7fe fdb0 	bl	8000638 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ae4:	f7fe fda8 	bl	8000638 <HAL_GetTick>
 8001ae8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	0d1b      	lsrs	r3, r3, #20
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001afa:	e054      	b.n	8001ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d050      	beq.n	8001ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b04:	f7fe fd98 	bl	8000638 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d902      	bls.n	8001b1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d13d      	bne.n	8001b96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b32:	d111      	bne.n	8001b58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b3c:	d004      	beq.n	8001b48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d107      	bne.n	8001b58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b60:	d10f      	bne.n	8001b82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e017      	b.n	8001bc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d19b      	bne.n	8001afc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3720      	adds	r7, #32
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000028 	.word	0x20000028

08001bd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <SPI_EndRxTxTransaction+0x7c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <SPI_EndRxTxTransaction+0x80>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0d5b      	lsrs	r3, r3, #21
 8001bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bfe:	d112      	bne.n	8001c26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f7ff ff5a 	bl	8001ac4 <SPI_WaitFlagStateUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d016      	beq.n	8001c44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f043 0220 	orr.w	r2, r3, #32
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e00f      	b.n	8001c46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00a      	beq.n	8001c42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3c:	2b80      	cmp	r3, #128	; 0x80
 8001c3e:	d0f2      	beq.n	8001c26 <SPI_EndRxTxTransaction+0x52>
 8001c40:	e000      	b.n	8001c44 <SPI_EndRxTxTransaction+0x70>
        break;
 8001c42:	bf00      	nop
  }

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000028 	.word	0x20000028
 8001c54:	165e9f81 	.word	0x165e9f81

08001c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e03f      	b.n	8001cea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f001 fa54 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	; 0x24
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f929 	bl	8001ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b08a      	sub	sp, #40	; 0x28
 8001cf6:	af02      	add	r7, sp, #8
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	d17c      	bne.n	8001e0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_UART_Transmit+0x2c>
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e075      	b.n	8001e0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_UART_Transmit+0x3e>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e06e      	b.n	8001e0e <HAL_UART_Transmit+0x11c>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2221      	movs	r2, #33	; 0x21
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d46:	f7fe fc77 	bl	8000638 <HAL_GetTick>
 8001d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d60:	d108      	bne.n	8001d74 <HAL_UART_Transmit+0x82>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d104      	bne.n	8001d74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	e003      	b.n	8001d7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d84:	e02a      	b.n	8001ddc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f840 	bl	8001e16 <UART_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e036      	b.n	8001e0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	3302      	adds	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	e007      	b.n	8001dce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	781a      	ldrb	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1cf      	bne.n	8001d86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2140      	movs	r1, #64	; 0x40
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f810 	bl	8001e16 <UART_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e006      	b.n	8001e0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b090      	sub	sp, #64	; 0x40
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e26:	e050      	b.n	8001eca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2e:	d04c      	beq.n	8001eca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e36:	f7fe fbff 	bl	8000638 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d241      	bcs.n	8001eca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	330c      	adds	r3, #12
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	e853 3f00 	ldrex	r3, [r3]
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	330c      	adds	r3, #12
 8001e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e66:	637a      	str	r2, [r7, #52]	; 0x34
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e6e:	e841 2300 	strex	r3, r2, [r1]
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e5      	bne.n	8001e46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3314      	adds	r3, #20
 8001e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	e853 3f00 	ldrex	r3, [r3]
 8001e88:	613b      	str	r3, [r7, #16]
   return(result);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	3314      	adds	r3, #20
 8001e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e9a:	623a      	str	r2, [r7, #32]
 8001e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e9e:	69f9      	ldr	r1, [r7, #28]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	e841 2300 	strex	r3, r2, [r1]
 8001ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e5      	bne.n	8001e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e00f      	b.n	8001eea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	bf0c      	ite	eq
 8001eda:	2301      	moveq	r3, #1
 8001edc:	2300      	movne	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d09f      	beq.n	8001e28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3740      	adds	r7, #64	; 0x40
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef8:	b0c0      	sub	sp, #256	; 0x100
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f10:	68d9      	ldr	r1, [r3, #12]
 8001f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	ea40 0301 	orr.w	r3, r0, r1
 8001f1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f4c:	f021 010c 	bic.w	r1, r1, #12
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f6e:	6999      	ldr	r1, [r3, #24]
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	ea40 0301 	orr.w	r3, r0, r1
 8001f7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b8f      	ldr	r3, [pc, #572]	; (80021c0 <UART_SetConfig+0x2cc>)
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d005      	beq.n	8001f94 <UART_SetConfig+0xa0>
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b8d      	ldr	r3, [pc, #564]	; (80021c4 <UART_SetConfig+0x2d0>)
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d104      	bne.n	8001f9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f94:	f7ff fbbc 	bl	8001710 <HAL_RCC_GetPCLK2Freq>
 8001f98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f9c:	e003      	b.n	8001fa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f9e:	f7ff fba3 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8001fa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb0:	f040 810c 	bne.w	80021cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	462b      	mov	r3, r5
 8001fca:	1891      	adds	r1, r2, r2
 8001fcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fce:	415b      	adcs	r3, r3
 8001fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	eb12 0801 	adds.w	r8, r2, r1
 8001fdc:	4629      	mov	r1, r5
 8001fde:	eb43 0901 	adc.w	r9, r3, r1
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	eb18 0303 	adds.w	r3, r8, r3
 8002000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002004:	462b      	mov	r3, r5
 8002006:	eb49 0303 	adc.w	r3, r9, r3
 800200a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800201a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800201e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002022:	460b      	mov	r3, r1
 8002024:	18db      	adds	r3, r3, r3
 8002026:	653b      	str	r3, [r7, #80]	; 0x50
 8002028:	4613      	mov	r3, r2
 800202a:	eb42 0303 	adc.w	r3, r2, r3
 800202e:	657b      	str	r3, [r7, #84]	; 0x54
 8002030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002038:	f7fe f91a 	bl	8000270 <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <UART_SetConfig+0x2d4>)
 8002042:	fba3 2302 	umull	r2, r3, r3, r2
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	011c      	lsls	r4, r3, #4
 800204a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800204e:	2200      	movs	r2, #0
 8002050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002054:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	1891      	adds	r1, r2, r2
 8002062:	64b9      	str	r1, [r7, #72]	; 0x48
 8002064:	415b      	adcs	r3, r3
 8002066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800206c:	4641      	mov	r1, r8
 800206e:	eb12 0a01 	adds.w	sl, r2, r1
 8002072:	4649      	mov	r1, r9
 8002074:	eb43 0b01 	adc.w	fp, r3, r1
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800208c:	4692      	mov	sl, r2
 800208e:	469b      	mov	fp, r3
 8002090:	4643      	mov	r3, r8
 8002092:	eb1a 0303 	adds.w	r3, sl, r3
 8002096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800209a:	464b      	mov	r3, r9
 800209c:	eb4b 0303 	adc.w	r3, fp, r3
 80020a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80020b8:	460b      	mov	r3, r1
 80020ba:	18db      	adds	r3, r3, r3
 80020bc:	643b      	str	r3, [r7, #64]	; 0x40
 80020be:	4613      	mov	r3, r2
 80020c0:	eb42 0303 	adc.w	r3, r2, r3
 80020c4:	647b      	str	r3, [r7, #68]	; 0x44
 80020c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020ce:	f7fe f8cf 	bl	8000270 <__aeabi_uldivmod>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4611      	mov	r1, r2
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <UART_SetConfig+0x2d4>)
 80020da:	fba3 2301 	umull	r2, r3, r3, r1
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2264      	movs	r2, #100	; 0x64
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	1acb      	subs	r3, r1, r3
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <UART_SetConfig+0x2d4>)
 80020f0:	fba3 2302 	umull	r2, r3, r3, r2
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020fc:	441c      	add	r4, r3
 80020fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002102:	2200      	movs	r2, #0
 8002104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002108:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800210c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002110:	4642      	mov	r2, r8
 8002112:	464b      	mov	r3, r9
 8002114:	1891      	adds	r1, r2, r2
 8002116:	63b9      	str	r1, [r7, #56]	; 0x38
 8002118:	415b      	adcs	r3, r3
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002120:	4641      	mov	r1, r8
 8002122:	1851      	adds	r1, r2, r1
 8002124:	6339      	str	r1, [r7, #48]	; 0x30
 8002126:	4649      	mov	r1, r9
 8002128:	414b      	adcs	r3, r1
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002138:	4659      	mov	r1, fp
 800213a:	00cb      	lsls	r3, r1, #3
 800213c:	4651      	mov	r1, sl
 800213e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002142:	4651      	mov	r1, sl
 8002144:	00ca      	lsls	r2, r1, #3
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	4603      	mov	r3, r0
 800214c:	4642      	mov	r2, r8
 800214e:	189b      	adds	r3, r3, r2
 8002150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002154:	464b      	mov	r3, r9
 8002156:	460a      	mov	r2, r1
 8002158:	eb42 0303 	adc.w	r3, r2, r3
 800215c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800216c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002174:	460b      	mov	r3, r1
 8002176:	18db      	adds	r3, r3, r3
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
 800217a:	4613      	mov	r3, r2
 800217c:	eb42 0303 	adc.w	r3, r2, r3
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800218a:	f7fe f871 	bl	8000270 <__aeabi_uldivmod>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <UART_SetConfig+0x2d4>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	2164      	movs	r1, #100	; 0x64
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	3332      	adds	r3, #50	; 0x32
 80021a6:	4a08      	ldr	r2, [pc, #32]	; (80021c8 <UART_SetConfig+0x2d4>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	f003 0207 	and.w	r2, r3, #7
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4422      	add	r2, r4
 80021ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021bc:	e106      	b.n	80023cc <UART_SetConfig+0x4d8>
 80021be:	bf00      	nop
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40011400 	.word	0x40011400
 80021c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d0:	2200      	movs	r2, #0
 80021d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80021d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80021da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80021de:	4642      	mov	r2, r8
 80021e0:	464b      	mov	r3, r9
 80021e2:	1891      	adds	r1, r2, r2
 80021e4:	6239      	str	r1, [r7, #32]
 80021e6:	415b      	adcs	r3, r3
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021ee:	4641      	mov	r1, r8
 80021f0:	1854      	adds	r4, r2, r1
 80021f2:	4649      	mov	r1, r9
 80021f4:	eb43 0501 	adc.w	r5, r3, r1
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	00eb      	lsls	r3, r5, #3
 8002202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002206:	00e2      	lsls	r2, r4, #3
 8002208:	4614      	mov	r4, r2
 800220a:	461d      	mov	r5, r3
 800220c:	4643      	mov	r3, r8
 800220e:	18e3      	adds	r3, r4, r3
 8002210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002214:	464b      	mov	r3, r9
 8002216:	eb45 0303 	adc.w	r3, r5, r3
 800221a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800221e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800222a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800223a:	4629      	mov	r1, r5
 800223c:	008b      	lsls	r3, r1, #2
 800223e:	4621      	mov	r1, r4
 8002240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002244:	4621      	mov	r1, r4
 8002246:	008a      	lsls	r2, r1, #2
 8002248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800224c:	f7fe f810 	bl	8000270 <__aeabi_uldivmod>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4b60      	ldr	r3, [pc, #384]	; (80023d8 <UART_SetConfig+0x4e4>)
 8002256:	fba3 2302 	umull	r2, r3, r3, r2
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	011c      	lsls	r4, r3, #4
 800225e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002262:	2200      	movs	r2, #0
 8002264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002268:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800226c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002270:	4642      	mov	r2, r8
 8002272:	464b      	mov	r3, r9
 8002274:	1891      	adds	r1, r2, r2
 8002276:	61b9      	str	r1, [r7, #24]
 8002278:	415b      	adcs	r3, r3
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002280:	4641      	mov	r1, r8
 8002282:	1851      	adds	r1, r2, r1
 8002284:	6139      	str	r1, [r7, #16]
 8002286:	4649      	mov	r1, r9
 8002288:	414b      	adcs	r3, r1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002298:	4659      	mov	r1, fp
 800229a:	00cb      	lsls	r3, r1, #3
 800229c:	4651      	mov	r1, sl
 800229e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022a2:	4651      	mov	r1, sl
 80022a4:	00ca      	lsls	r2, r1, #3
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	4642      	mov	r2, r8
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022b4:	464b      	mov	r3, r9
 80022b6:	460a      	mov	r2, r1
 80022b8:	eb42 0303 	adc.w	r3, r2, r3
 80022bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80022d8:	4649      	mov	r1, r9
 80022da:	008b      	lsls	r3, r1, #2
 80022dc:	4641      	mov	r1, r8
 80022de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022e2:	4641      	mov	r1, r8
 80022e4:	008a      	lsls	r2, r1, #2
 80022e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80022ea:	f7fd ffc1 	bl	8000270 <__aeabi_uldivmod>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <UART_SetConfig+0x4e4>)
 80022f6:	fba3 2301 	umull	r2, r3, r3, r1
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2264      	movs	r2, #100	; 0x64
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	1acb      	subs	r3, r1, r3
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	3332      	adds	r3, #50	; 0x32
 8002308:	4a33      	ldr	r2, [pc, #204]	; (80023d8 <UART_SetConfig+0x4e4>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002314:	441c      	add	r4, r3
 8002316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800231a:	2200      	movs	r2, #0
 800231c:	673b      	str	r3, [r7, #112]	; 0x70
 800231e:	677a      	str	r2, [r7, #116]	; 0x74
 8002320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002324:	4642      	mov	r2, r8
 8002326:	464b      	mov	r3, r9
 8002328:	1891      	adds	r1, r2, r2
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	415b      	adcs	r3, r3
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002334:	4641      	mov	r1, r8
 8002336:	1851      	adds	r1, r2, r1
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	4649      	mov	r1, r9
 800233c:	414b      	adcs	r3, r1
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800234c:	4659      	mov	r1, fp
 800234e:	00cb      	lsls	r3, r1, #3
 8002350:	4651      	mov	r1, sl
 8002352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002356:	4651      	mov	r1, sl
 8002358:	00ca      	lsls	r2, r1, #3
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	4603      	mov	r3, r0
 8002360:	4642      	mov	r2, r8
 8002362:	189b      	adds	r3, r3, r2
 8002364:	66bb      	str	r3, [r7, #104]	; 0x68
 8002366:	464b      	mov	r3, r9
 8002368:	460a      	mov	r2, r1
 800236a:	eb42 0303 	adc.w	r3, r2, r3
 800236e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	663b      	str	r3, [r7, #96]	; 0x60
 800237a:	667a      	str	r2, [r7, #100]	; 0x64
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002388:	4649      	mov	r1, r9
 800238a:	008b      	lsls	r3, r1, #2
 800238c:	4641      	mov	r1, r8
 800238e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002392:	4641      	mov	r1, r8
 8002394:	008a      	lsls	r2, r1, #2
 8002396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800239a:	f7fd ff69 	bl	8000270 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <UART_SetConfig+0x4e4>)
 80023a4:	fba3 1302 	umull	r1, r3, r3, r2
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	2164      	movs	r1, #100	; 0x64
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	3332      	adds	r3, #50	; 0x32
 80023b6:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <UART_SetConfig+0x4e4>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	f003 020f 	and.w	r2, r3, #15
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4422      	add	r2, r4
 80023ca:	609a      	str	r2, [r3, #8]
}
 80023cc:	bf00      	nop
 80023ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023d2:	46bd      	mov	sp, r7
 80023d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d8:	51eb851f 	.word	0x51eb851f

080023dc <processKeyPress>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void processKeyPress(char key) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
    // Clear the buffer and set common settings
    u8g2_SetFontMode(&u8g2, 0);  // Transparent
 80023e6:	2100      	movs	r1, #0
 80023e8:	48b3      	ldr	r0, [pc, #716]	; (80026b8 <processKeyPress+0x2dc>)
 80023ea:	f001 fd7c 	bl	8003ee6 <u8g2_SetFontMode>
    u8g2_SetFontDirection(&u8g2, 0);
 80023ee:	2100      	movs	r1, #0
 80023f0:	48b1      	ldr	r0, [pc, #708]	; (80026b8 <processKeyPress+0x2dc>)
 80023f2:	f001 fef3 	bl	80041dc <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 80023f6:	49b1      	ldr	r1, [pc, #708]	; (80026bc <processKeyPress+0x2e0>)
 80023f8:	48af      	ldr	r0, [pc, #700]	; (80026b8 <processKeyPress+0x2dc>)
 80023fa:	f001 fed5 	bl	80041a8 <u8g2_SetFont>

    switch (key) {
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	3b23      	subs	r3, #35	; 0x23
 8002402:	2b21      	cmp	r3, #33	; 0x21
 8002404:	f200 81b7 	bhi.w	8002776 <processKeyPress+0x39a>
 8002408:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <processKeyPress+0x34>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	080024f7 	.word	0x080024f7
 8002414:	08002777 	.word	0x08002777
 8002418:	08002777 	.word	0x08002777
 800241c:	08002777 	.word	0x08002777
 8002420:	08002777 	.word	0x08002777
 8002424:	08002777 	.word	0x08002777
 8002428:	08002777 	.word	0x08002777
 800242c:	080024d7 	.word	0x080024d7
 8002430:	08002777 	.word	0x08002777
 8002434:	08002777 	.word	0x08002777
 8002438:	08002777 	.word	0x08002777
 800243c:	08002777 	.word	0x08002777
 8002440:	08002777 	.word	0x08002777
 8002444:	08002499 	.word	0x08002499
 8002448:	08002499 	.word	0x08002499
 800244c:	08002499 	.word	0x08002499
 8002450:	08002499 	.word	0x08002499
 8002454:	08002499 	.word	0x08002499
 8002458:	08002499 	.word	0x08002499
 800245c:	08002499 	.word	0x08002499
 8002460:	08002499 	.word	0x08002499
 8002464:	08002499 	.word	0x08002499
 8002468:	08002499 	.word	0x08002499
 800246c:	08002777 	.word	0x08002777
 8002470:	08002777 	.word	0x08002777
 8002474:	08002777 	.word	0x08002777
 8002478:	08002777 	.word	0x08002777
 800247c:	08002777 	.word	0x08002777
 8002480:	08002777 	.word	0x08002777
 8002484:	08002777 	.word	0x08002777
 8002488:	08002539 	.word	0x08002539
 800248c:	080025b9 	.word	0x080025b9
 8002490:	08002639 	.word	0x08002639
 8002494:	080026f9 	.word	0x080026f9
        case '6':
        case '7':
        case '8':
        case '9':
        case '0':
            if (bufferIndex < 4) {
 8002498:	4b89      	ldr	r3, [pc, #548]	; (80026c0 <processKeyPress+0x2e4>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b03      	cmp	r3, #3
 800249e:	f200 816c 	bhi.w	800277a <processKeyPress+0x39e>
                numBuffer[bufferIndex++] = key;
 80024a2:	4b87      	ldr	r3, [pc, #540]	; (80026c0 <processKeyPress+0x2e4>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	b2d1      	uxtb	r1, r2
 80024aa:	4a85      	ldr	r2, [pc, #532]	; (80026c0 <processKeyPress+0x2e4>)
 80024ac:	7011      	strb	r1, [r2, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	79f9      	ldrb	r1, [r7, #7]
 80024b2:	4b84      	ldr	r3, [pc, #528]	; (80026c4 <processKeyPress+0x2e8>)
 80024b4:	5499      	strb	r1, [r3, r2]
                u8g2_ClearBuffer(&u8g2);
 80024b6:	4880      	ldr	r0, [pc, #512]	; (80026b8 <processKeyPress+0x2dc>)
 80024b8:	f001 f83e 	bl	8003538 <u8g2_ClearBuffer>
                u8g2_SendBuffer(&u8g2);
 80024bc:	487e      	ldr	r0, [pc, #504]	; (80026b8 <processKeyPress+0x2dc>)
 80024be:	f001 f8ae 	bl	800361e <u8g2_SendBuffer>
                u8g2_DrawStr(&u8g2, 60, 60, &key);
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	223c      	movs	r2, #60	; 0x3c
 80024c6:	213c      	movs	r1, #60	; 0x3c
 80024c8:	487b      	ldr	r0, [pc, #492]	; (80026b8 <processKeyPress+0x2dc>)
 80024ca:	f001 fdcb 	bl	8004064 <u8g2_DrawStr>
                u8g2_SendBuffer(&u8g2);
 80024ce:	487a      	ldr	r0, [pc, #488]	; (80026b8 <processKeyPress+0x2dc>)
 80024d0:	f001 f8a5 	bl	800361e <u8g2_SendBuffer>
            }
            break;
 80024d4:	e151      	b.n	800277a <processKeyPress+0x39e>
        case '*':
            bufferIndex = 0;
 80024d6:	4b7a      	ldr	r3, [pc, #488]	; (80026c0 <processKeyPress+0x2e4>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
            u8g2_ClearBuffer(&u8g2);
 80024dc:	4876      	ldr	r0, [pc, #472]	; (80026b8 <processKeyPress+0x2dc>)
 80024de:	f001 f82b 	bl	8003538 <u8g2_ClearBuffer>
            u8g2_DrawStr(&u8g2, 60, 60, "DELETED! ");
 80024e2:	4b79      	ldr	r3, [pc, #484]	; (80026c8 <processKeyPress+0x2ec>)
 80024e4:	223c      	movs	r2, #60	; 0x3c
 80024e6:	213c      	movs	r1, #60	; 0x3c
 80024e8:	4873      	ldr	r0, [pc, #460]	; (80026b8 <processKeyPress+0x2dc>)
 80024ea:	f001 fdbb 	bl	8004064 <u8g2_DrawStr>
            u8g2_SendBuffer(&u8g2);
 80024ee:	4872      	ldr	r0, [pc, #456]	; (80026b8 <processKeyPress+0x2dc>)
 80024f0:	f001 f895 	bl	800361e <u8g2_SendBuffer>
            break;
 80024f4:	e14c      	b.n	8002790 <processKeyPress+0x3b4>
        case '#':
            if (bufferIndex > 0) {
 80024f6:	4b72      	ldr	r3, [pc, #456]	; (80026c0 <processKeyPress+0x2e4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 813f 	beq.w	800277e <processKeyPress+0x3a2>
                // Decrement bufferIndex to point to the last entered digit
                --bufferIndex;
 8002500:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <processKeyPress+0x2e4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	3b01      	subs	r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <processKeyPress+0x2e4>)
 800250a:	701a      	strb	r2, [r3, #0]
                numBuffer[bufferIndex] = '\0';  // Set the last digit to null character
 800250c:	4b6c      	ldr	r3, [pc, #432]	; (80026c0 <processKeyPress+0x2e4>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <processKeyPress+0x2e8>)
 8002514:	2100      	movs	r1, #0
 8002516:	5499      	strb	r1, [r3, r2]
                u8g2_ClearBuffer(&u8g2);
 8002518:	4867      	ldr	r0, [pc, #412]	; (80026b8 <processKeyPress+0x2dc>)
 800251a:	f001 f80d 	bl	8003538 <u8g2_ClearBuffer>
                u8g2_SendBuffer(&u8g2);
 800251e:	4866      	ldr	r0, [pc, #408]	; (80026b8 <processKeyPress+0x2dc>)
 8002520:	f001 f87d 	bl	800361e <u8g2_SendBuffer>
                u8g2_DrawStr(&u8g2, 60, 60, (char*)numBuffer);  // Redraw the buffer without the last digit
 8002524:	4b67      	ldr	r3, [pc, #412]	; (80026c4 <processKeyPress+0x2e8>)
 8002526:	223c      	movs	r2, #60	; 0x3c
 8002528:	213c      	movs	r1, #60	; 0x3c
 800252a:	4863      	ldr	r0, [pc, #396]	; (80026b8 <processKeyPress+0x2dc>)
 800252c:	f001 fd9a 	bl	8004064 <u8g2_DrawStr>
                u8g2_SendBuffer(&u8g2);
 8002530:	4861      	ldr	r0, [pc, #388]	; (80026b8 <processKeyPress+0x2dc>)
 8002532:	f001 f874 	bl	800361e <u8g2_SendBuffer>
            }
            break;
 8002536:	e122      	b.n	800277e <processKeyPress+0x3a2>
        case 'A':
        	if(bufferIndex == 4){
 8002538:	4b61      	ldr	r3, [pc, #388]	; (80026c0 <processKeyPress+0x2e4>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b04      	cmp	r3, #4
 800253e:	f040 8120 	bne.w	8002782 <processKeyPress+0x3a6>
        		bufferAIndex = 0;
 8002542:	4b62      	ldr	r3, [pc, #392]	; (80026cc <processKeyPress+0x2f0>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]

        	    for (int i = 0; i < 4; ++i) {
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
 800254c:	e00b      	b.n	8002566 <processKeyPress+0x18a>
        	        numABuffer[i] = numBuffer[i];
 800254e:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <processKeyPress+0x2e8>)
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	4413      	add	r3, r2
 8002554:	7819      	ldrb	r1, [r3, #0]
 8002556:	4a5e      	ldr	r2, [pc, #376]	; (80026d0 <processKeyPress+0x2f4>)
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	4413      	add	r3, r2
 800255c:	460a      	mov	r2, r1
 800255e:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	3301      	adds	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	2b03      	cmp	r3, #3
 800256a:	ddf0      	ble.n	800254e <processKeyPress+0x172>
        	    }
                for (int i = 0; i < 4; ++i) {
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	e007      	b.n	8002582 <processKeyPress+0x1a6>
                    numBuffer[i] = 0;  // Set to null character
 8002572:	4a54      	ldr	r2, [pc, #336]	; (80026c4 <processKeyPress+0x2e8>)
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	4413      	add	r3, r2
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < 4; ++i) {
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	3301      	adds	r3, #1
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	2b03      	cmp	r3, #3
 8002586:	ddf4      	ble.n	8002572 <processKeyPress+0x196>
                }
                u8g2_ClearBuffer(&u8g2);
 8002588:	484b      	ldr	r0, [pc, #300]	; (80026b8 <processKeyPress+0x2dc>)
 800258a:	f000 ffd5 	bl	8003538 <u8g2_ClearBuffer>
                u8g2_DrawStr(&u8g2, 5, 60, "A SAVED ");
 800258e:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <processKeyPress+0x2f8>)
 8002590:	223c      	movs	r2, #60	; 0x3c
 8002592:	2105      	movs	r1, #5
 8002594:	4848      	ldr	r0, [pc, #288]	; (80026b8 <processKeyPress+0x2dc>)
 8002596:	f001 fd65 	bl	8004064 <u8g2_DrawStr>
                u8g2_SendBuffer(&u8g2);
 800259a:	4847      	ldr	r0, [pc, #284]	; (80026b8 <processKeyPress+0x2dc>)
 800259c:	f001 f83f 	bl	800361e <u8g2_SendBuffer>
                bufferIndex = 0;
 80025a0:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <processKeyPress+0x2e4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
                printf("numABuffer after saving: %s\n", numABuffer);
 80025a6:	494a      	ldr	r1, [pc, #296]	; (80026d0 <processKeyPress+0x2f4>)
 80025a8:	484b      	ldr	r0, [pc, #300]	; (80026d8 <processKeyPress+0x2fc>)
 80025aa:	f002 fe1f 	bl	80051ec <iprintf>
                printf("numBuffer after saving: %s\n", numBuffer);
 80025ae:	4945      	ldr	r1, [pc, #276]	; (80026c4 <processKeyPress+0x2e8>)
 80025b0:	484a      	ldr	r0, [pc, #296]	; (80026dc <processKeyPress+0x300>)
 80025b2:	f002 fe1b 	bl	80051ec <iprintf>
        	}
            break;
 80025b6:	e0e4      	b.n	8002782 <processKeyPress+0x3a6>
        case 'B':
        	if(bufferIndex == 4){
 80025b8:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <processKeyPress+0x2e4>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	f040 80e2 	bne.w	8002786 <processKeyPress+0x3aa>
        		bufferBIndex = 0;
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <processKeyPress+0x304>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]

        	    for (int i = 0; i < 4; ++i) {
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e00b      	b.n	80025e6 <processKeyPress+0x20a>
        	        numBBuffer[i] = numBuffer[i];
 80025ce:	4a3d      	ldr	r2, [pc, #244]	; (80026c4 <processKeyPress+0x2e8>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	7819      	ldrb	r1, [r3, #0]
 80025d6:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <processKeyPress+0x308>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	460a      	mov	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3301      	adds	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	ddf0      	ble.n	80025ce <processKeyPress+0x1f2>
        	    }
                for (int i = 0; i < 4; ++i) {
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	e007      	b.n	8002602 <processKeyPress+0x226>
                    numBuffer[i] = 0;  // Set to null character
 80025f2:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <processKeyPress+0x2e8>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < 4; ++i) {
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	3301      	adds	r3, #1
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b03      	cmp	r3, #3
 8002606:	ddf4      	ble.n	80025f2 <processKeyPress+0x216>
                }
                u8g2_ClearBuffer(&u8g2);
 8002608:	482b      	ldr	r0, [pc, #172]	; (80026b8 <processKeyPress+0x2dc>)
 800260a:	f000 ff95 	bl	8003538 <u8g2_ClearBuffer>
                u8g2_DrawStr(&u8g2, 50, 50, "B SAVED ");
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <processKeyPress+0x30c>)
 8002610:	2232      	movs	r2, #50	; 0x32
 8002612:	2132      	movs	r1, #50	; 0x32
 8002614:	4828      	ldr	r0, [pc, #160]	; (80026b8 <processKeyPress+0x2dc>)
 8002616:	f001 fd25 	bl	8004064 <u8g2_DrawStr>
                u8g2_SendBuffer(&u8g2);
 800261a:	4827      	ldr	r0, [pc, #156]	; (80026b8 <processKeyPress+0x2dc>)
 800261c:	f000 ffff 	bl	800361e <u8g2_SendBuffer>
                bufferIndex = 0;
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <processKeyPress+0x2e4>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
                printf("numABuffer after saving: %s\n", numBBuffer);
 8002626:	492f      	ldr	r1, [pc, #188]	; (80026e4 <processKeyPress+0x308>)
 8002628:	482b      	ldr	r0, [pc, #172]	; (80026d8 <processKeyPress+0x2fc>)
 800262a:	f002 fddf 	bl	80051ec <iprintf>
                printf("numBuffer after saving: %s\n", numBuffer);
 800262e:	4925      	ldr	r1, [pc, #148]	; (80026c4 <processKeyPress+0x2e8>)
 8002630:	482a      	ldr	r0, [pc, #168]	; (80026dc <processKeyPress+0x300>)
 8002632:	f002 fddb 	bl	80051ec <iprintf>
        	}
            break;
 8002636:	e0a6      	b.n	8002786 <processKeyPress+0x3aa>
        case 'C':
        	if(bufferIndex == 4){
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <processKeyPress+0x2e4>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b04      	cmp	r3, #4
 800263e:	f040 80a4 	bne.w	800278a <processKeyPress+0x3ae>
        		bufferCIndex = 0;
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <processKeyPress+0x310>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]

        	    for (int i = 0; i < 4; ++i) {
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e00b      	b.n	8002666 <processKeyPress+0x28a>
        	        numCBuffer[i] = numBuffer[i];
 800264e:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <processKeyPress+0x2e8>)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4413      	add	r3, r2
 8002654:	7819      	ldrb	r1, [r3, #0]
 8002656:	4a26      	ldr	r2, [pc, #152]	; (80026f0 <processKeyPress+0x314>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	460a      	mov	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b03      	cmp	r3, #3
 800266a:	ddf0      	ble.n	800264e <processKeyPress+0x272>
        	    }
                for (int i = 0; i < 4; ++i) {
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	e007      	b.n	8002682 <processKeyPress+0x2a6>
                    numBuffer[i] = 0;  // Set to null character
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <processKeyPress+0x2e8>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < 4; ++i) {
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	3301      	adds	r3, #1
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b03      	cmp	r3, #3
 8002686:	ddf4      	ble.n	8002672 <processKeyPress+0x296>
                }
                u8g2_ClearBuffer(&u8g2);
 8002688:	480b      	ldr	r0, [pc, #44]	; (80026b8 <processKeyPress+0x2dc>)
 800268a:	f000 ff55 	bl	8003538 <u8g2_ClearBuffer>
                u8g2_DrawStr(&u8g2, 50, 50, "C SAVED ");
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <processKeyPress+0x318>)
 8002690:	2232      	movs	r2, #50	; 0x32
 8002692:	2132      	movs	r1, #50	; 0x32
 8002694:	4808      	ldr	r0, [pc, #32]	; (80026b8 <processKeyPress+0x2dc>)
 8002696:	f001 fce5 	bl	8004064 <u8g2_DrawStr>
                u8g2_SendBuffer(&u8g2);
 800269a:	4807      	ldr	r0, [pc, #28]	; (80026b8 <processKeyPress+0x2dc>)
 800269c:	f000 ffbf 	bl	800361e <u8g2_SendBuffer>
                bufferIndex = 0;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <processKeyPress+0x2e4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
                printf("numABuffer after saving: %s\n", numCBuffer);
 80026a6:	4912      	ldr	r1, [pc, #72]	; (80026f0 <processKeyPress+0x314>)
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <processKeyPress+0x2fc>)
 80026aa:	f002 fd9f 	bl	80051ec <iprintf>
                printf("numBuffer after saving: %s\n", numBuffer);
 80026ae:	4905      	ldr	r1, [pc, #20]	; (80026c4 <processKeyPress+0x2e8>)
 80026b0:	480a      	ldr	r0, [pc, #40]	; (80026dc <processKeyPress+0x300>)
 80026b2:	f002 fd9b 	bl	80051ec <iprintf>

        	}
            break;
 80026b6:	e068      	b.n	800278a <processKeyPress+0x3ae>
 80026b8:	200001b4 	.word	0x200001b4
 80026bc:	0800601c 	.word	0x0800601c
 80026c0:	200001ac 	.word	0x200001ac
 80026c4:	20000198 	.word	0x20000198
 80026c8:	08005ef0 	.word	0x08005ef0
 80026cc:	200001ad 	.word	0x200001ad
 80026d0:	2000019c 	.word	0x2000019c
 80026d4:	08005efc 	.word	0x08005efc
 80026d8:	08005f08 	.word	0x08005f08
 80026dc:	08005f28 	.word	0x08005f28
 80026e0:	200001ae 	.word	0x200001ae
 80026e4:	200001a0 	.word	0x200001a0
 80026e8:	08005f44 	.word	0x08005f44
 80026ec:	200001af 	.word	0x200001af
 80026f0:	200001a4 	.word	0x200001a4
 80026f4:	08005f50 	.word	0x08005f50
        case 'D':
        	if(bufferIndex == 4){
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <processKeyPress+0x40c>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d146      	bne.n	800278e <processKeyPress+0x3b2>
        		bufferDIndex = 0;
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <processKeyPress+0x410>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]

        	    for (int i = 0; i < 4; ++i) {
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e00b      	b.n	8002724 <processKeyPress+0x348>
        	        numDBuffer[i] = numBuffer[i];
 800270c:	4a38      	ldr	r2, [pc, #224]	; (80027f0 <processKeyPress+0x414>)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	7819      	ldrb	r1, [r3, #0]
 8002714:	4a37      	ldr	r2, [pc, #220]	; (80027f4 <processKeyPress+0x418>)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4413      	add	r3, r2
 800271a:	460a      	mov	r2, r1
 800271c:	701a      	strb	r2, [r3, #0]
        	    for (int i = 0; i < 4; ++i) {
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b03      	cmp	r3, #3
 8002728:	ddf0      	ble.n	800270c <processKeyPress+0x330>
        	    }
                for (int i = 0; i < 4; ++i) {
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	e007      	b.n	8002740 <processKeyPress+0x364>
                    numBuffer[i] = 0;  // Set to null character
 8002730:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <processKeyPress+0x414>)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4413      	add	r3, r2
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < 4; ++i) {
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3301      	adds	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b03      	cmp	r3, #3
 8002744:	ddf4      	ble.n	8002730 <processKeyPress+0x354>
                }
                u8g2_ClearBuffer(&u8g2);
 8002746:	482c      	ldr	r0, [pc, #176]	; (80027f8 <processKeyPress+0x41c>)
 8002748:	f000 fef6 	bl	8003538 <u8g2_ClearBuffer>
                u8g2_DrawStr(&u8g2, 50, 50, "D SAVED ");
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <processKeyPress+0x420>)
 800274e:	2232      	movs	r2, #50	; 0x32
 8002750:	2132      	movs	r1, #50	; 0x32
 8002752:	4829      	ldr	r0, [pc, #164]	; (80027f8 <processKeyPress+0x41c>)
 8002754:	f001 fc86 	bl	8004064 <u8g2_DrawStr>
                u8g2_SendBuffer(&u8g2);
 8002758:	4827      	ldr	r0, [pc, #156]	; (80027f8 <processKeyPress+0x41c>)
 800275a:	f000 ff60 	bl	800361e <u8g2_SendBuffer>
                bufferIndex = 0;
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <processKeyPress+0x40c>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
                printf("numABuffer after saving: %s\n", numDBuffer);
 8002764:	4923      	ldr	r1, [pc, #140]	; (80027f4 <processKeyPress+0x418>)
 8002766:	4826      	ldr	r0, [pc, #152]	; (8002800 <processKeyPress+0x424>)
 8002768:	f002 fd40 	bl	80051ec <iprintf>
                printf("numBuffer after saving: %s\n", numBuffer);
 800276c:	4920      	ldr	r1, [pc, #128]	; (80027f0 <processKeyPress+0x414>)
 800276e:	4825      	ldr	r0, [pc, #148]	; (8002804 <processKeyPress+0x428>)
 8002770:	f002 fd3c 	bl	80051ec <iprintf>
        	}
            break;
 8002774:	e00b      	b.n	800278e <processKeyPress+0x3b2>
        default:
            // Handle other key presses or invalid keys
            break;
 8002776:	bf00      	nop
 8002778:	e00a      	b.n	8002790 <processKeyPress+0x3b4>
            break;
 800277a:	bf00      	nop
 800277c:	e008      	b.n	8002790 <processKeyPress+0x3b4>
            break;
 800277e:	bf00      	nop
 8002780:	e006      	b.n	8002790 <processKeyPress+0x3b4>
            break;
 8002782:	bf00      	nop
 8002784:	e004      	b.n	8002790 <processKeyPress+0x3b4>
            break;
 8002786:	bf00      	nop
 8002788:	e002      	b.n	8002790 <processKeyPress+0x3b4>
            break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <processKeyPress+0x3b4>
            break;
 800278e:	bf00      	nop

    }
    if(bufferIndex == 4){
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <processKeyPress+0x40c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d123      	bne.n	80027e0 <processKeyPress+0x404>
    u8g2_ClearBuffer(&u8g2);
 8002798:	4817      	ldr	r0, [pc, #92]	; (80027f8 <processKeyPress+0x41c>)
 800279a:	f000 fecd 	bl	8003538 <u8g2_ClearBuffer>
    u8g2_DrawStr(&u8g2, 32, 40, (char*)numBuffer);
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <processKeyPress+0x414>)
 80027a0:	2228      	movs	r2, #40	; 0x28
 80027a2:	2120      	movs	r1, #32
 80027a4:	4814      	ldr	r0, [pc, #80]	; (80027f8 <processKeyPress+0x41c>)
 80027a6:	f001 fc5d 	bl	8004064 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 8, 50, "PRESS * TO DELETE ALL ");
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <processKeyPress+0x42c>)
 80027ac:	2232      	movs	r2, #50	; 0x32
 80027ae:	2108      	movs	r1, #8
 80027b0:	4811      	ldr	r0, [pc, #68]	; (80027f8 <processKeyPress+0x41c>)
 80027b2:	f001 fc57 	bl	8004064 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 8, 60, "OR PRESS A/B/C/D ");
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <processKeyPress+0x430>)
 80027b8:	223c      	movs	r2, #60	; 0x3c
 80027ba:	2108      	movs	r1, #8
 80027bc:	480e      	ldr	r0, [pc, #56]	; (80027f8 <processKeyPress+0x41c>)
 80027be:	f001 fc51 	bl	8004064 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 8, 70, "OR # TO DELETE ");
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <processKeyPress+0x434>)
 80027c4:	2246      	movs	r2, #70	; 0x46
 80027c6:	2108      	movs	r1, #8
 80027c8:	480b      	ldr	r0, [pc, #44]	; (80027f8 <processKeyPress+0x41c>)
 80027ca:	f001 fc4b 	bl	8004064 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 8, 80, "LAST NUMBER ");
 80027ce:	4b11      	ldr	r3, [pc, #68]	; (8002814 <processKeyPress+0x438>)
 80027d0:	2250      	movs	r2, #80	; 0x50
 80027d2:	2108      	movs	r1, #8
 80027d4:	4808      	ldr	r0, [pc, #32]	; (80027f8 <processKeyPress+0x41c>)
 80027d6:	f001 fc45 	bl	8004064 <u8g2_DrawStr>
    u8g2_SendBuffer(&u8g2);
 80027da:	4807      	ldr	r0, [pc, #28]	; (80027f8 <processKeyPress+0x41c>)
 80027dc:	f000 ff1f 	bl	800361e <u8g2_SendBuffer>
    }

}
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200001ac 	.word	0x200001ac
 80027ec:	200001b0 	.word	0x200001b0
 80027f0:	20000198 	.word	0x20000198
 80027f4:	200001a8 	.word	0x200001a8
 80027f8:	200001b4 	.word	0x200001b4
 80027fc:	08005f5c 	.word	0x08005f5c
 8002800:	08005f08 	.word	0x08005f08
 8002804:	08005f28 	.word	0x08005f28
 8002808:	08005f68 	.word	0x08005f68
 800280c:	08005f80 	.word	0x08005f80
 8002810:	08005f94 	.word	0x08005f94
 8002814:	08005fa4 	.word	0x08005fa4

08002818 <showKeyPress>:

void showKeyPress(char key) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
    // Clear the buffer and set common settings
    u8g2_SetFontMode(&u8g2, 0);  // Transparent
 8002822:	2100      	movs	r1, #0
 8002824:	4829      	ldr	r0, [pc, #164]	; (80028cc <showKeyPress+0xb4>)
 8002826:	f001 fb5e 	bl	8003ee6 <u8g2_SetFontMode>
    u8g2_SetFontDirection(&u8g2, 0);
 800282a:	2100      	movs	r1, #0
 800282c:	4827      	ldr	r0, [pc, #156]	; (80028cc <showKeyPress+0xb4>)
 800282e:	f001 fcd5 	bl	80041dc <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 8002832:	4927      	ldr	r1, [pc, #156]	; (80028d0 <showKeyPress+0xb8>)
 8002834:	4825      	ldr	r0, [pc, #148]	; (80028cc <showKeyPress+0xb4>)
 8002836:	f001 fcb7 	bl	80041a8 <u8g2_SetFont>

    switch (key) {
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	3b41      	subs	r3, #65	; 0x41
 800283e:	2b03      	cmp	r3, #3
 8002840:	d83e      	bhi.n	80028c0 <showKeyPress+0xa8>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <showKeyPress+0x30>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	08002859 	.word	0x08002859
 800284c:	08002873 	.word	0x08002873
 8002850:	0800288d 	.word	0x0800288d
 8002854:	080028a7 	.word	0x080028a7

        case 'A':
            u8g2_ClearBuffer(&u8g2);
 8002858:	481c      	ldr	r0, [pc, #112]	; (80028cc <showKeyPress+0xb4>)
 800285a:	f000 fe6d 	bl	8003538 <u8g2_ClearBuffer>
            u8g2_DrawStr(&u8g2, 56, 50, (char*)numABuffer);
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <showKeyPress+0xbc>)
 8002860:	2232      	movs	r2, #50	; 0x32
 8002862:	2138      	movs	r1, #56	; 0x38
 8002864:	4819      	ldr	r0, [pc, #100]	; (80028cc <showKeyPress+0xb4>)
 8002866:	f001 fbfd 	bl	8004064 <u8g2_DrawStr>
            u8g2_SendBuffer(&u8g2);
 800286a:	4818      	ldr	r0, [pc, #96]	; (80028cc <showKeyPress+0xb4>)
 800286c:	f000 fed7 	bl	800361e <u8g2_SendBuffer>
            break;
 8002870:	e027      	b.n	80028c2 <showKeyPress+0xaa>
        case 'B':
            u8g2_ClearBuffer(&u8g2);
 8002872:	4816      	ldr	r0, [pc, #88]	; (80028cc <showKeyPress+0xb4>)
 8002874:	f000 fe60 	bl	8003538 <u8g2_ClearBuffer>
            u8g2_DrawStr(&u8g2, 56, 50, (char*)numBBuffer);
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <showKeyPress+0xc0>)
 800287a:	2232      	movs	r2, #50	; 0x32
 800287c:	2138      	movs	r1, #56	; 0x38
 800287e:	4813      	ldr	r0, [pc, #76]	; (80028cc <showKeyPress+0xb4>)
 8002880:	f001 fbf0 	bl	8004064 <u8g2_DrawStr>
            u8g2_SendBuffer(&u8g2);
 8002884:	4811      	ldr	r0, [pc, #68]	; (80028cc <showKeyPress+0xb4>)
 8002886:	f000 feca 	bl	800361e <u8g2_SendBuffer>
            break;
 800288a:	e01a      	b.n	80028c2 <showKeyPress+0xaa>
        case 'C':
            u8g2_ClearBuffer(&u8g2);
 800288c:	480f      	ldr	r0, [pc, #60]	; (80028cc <showKeyPress+0xb4>)
 800288e:	f000 fe53 	bl	8003538 <u8g2_ClearBuffer>
            u8g2_DrawStr(&u8g2, 56, 50, (char*)numCBuffer);
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <showKeyPress+0xc4>)
 8002894:	2232      	movs	r2, #50	; 0x32
 8002896:	2138      	movs	r1, #56	; 0x38
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <showKeyPress+0xb4>)
 800289a:	f001 fbe3 	bl	8004064 <u8g2_DrawStr>
            u8g2_SendBuffer(&u8g2);
 800289e:	480b      	ldr	r0, [pc, #44]	; (80028cc <showKeyPress+0xb4>)
 80028a0:	f000 febd 	bl	800361e <u8g2_SendBuffer>
            break;
 80028a4:	e00d      	b.n	80028c2 <showKeyPress+0xaa>
        case 'D':
            u8g2_ClearBuffer(&u8g2);
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <showKeyPress+0xb4>)
 80028a8:	f000 fe46 	bl	8003538 <u8g2_ClearBuffer>
            u8g2_DrawStr(&u8g2, 56, 50, (char*)numDBuffer);
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <showKeyPress+0xc8>)
 80028ae:	2232      	movs	r2, #50	; 0x32
 80028b0:	2138      	movs	r1, #56	; 0x38
 80028b2:	4806      	ldr	r0, [pc, #24]	; (80028cc <showKeyPress+0xb4>)
 80028b4:	f001 fbd6 	bl	8004064 <u8g2_DrawStr>
            u8g2_SendBuffer(&u8g2);
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <showKeyPress+0xb4>)
 80028ba:	f000 feb0 	bl	800361e <u8g2_SendBuffer>
            break;
 80028be:	e000      	b.n	80028c2 <showKeyPress+0xaa>
        default:
            break;
 80028c0:	bf00      	nop
    }
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200001b4 	.word	0x200001b4
 80028d0:	0800601c 	.word	0x0800601c
 80028d4:	2000019c 	.word	0x2000019c
 80028d8:	200001a0 	.word	0x200001a0
 80028dc:	200001a4 	.word	0x200001a4
 80028e0:	200001a8 	.word	0x200001a8

080028e4 <keypad_scan>:


char keypad_scan(void)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'A'},
 80028ea:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <keypad_scan+0x1b0>)
 80028ec:	1d3c      	adds	r4, r7, #4
 80028ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'B'},
                     {'7', '8', '9', 'C'},
                     {'*', '0', '#', 'D'}};

  for(int i = 0; i < 4; i++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e0c0      	b.n	8002a7c <keypad_scan+0x198>
  {
    // Set current column as output and low
    switch(i)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d87f      	bhi.n	8002a00 <keypad_scan+0x11c>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <keypad_scan+0x24>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002919 	.word	0x08002919
 800290c:	08002953 	.word	0x08002953
 8002910:	0800298d 	.word	0x0800298d
 8002914:	080029c7 	.word	0x080029c7
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 8002918:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <keypad_scan+0x1b4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	2102      	movs	r1, #2
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe f953 	bl	8000bcc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <keypad_scan+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	2101      	movs	r1, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe f94c 	bl	8000bcc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8002934:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <keypad_scan+0x1bc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	2108      	movs	r1, #8
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f945 	bl	8000bcc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8002942:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <keypad_scan+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	2104      	movs	r1, #4
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f93e 	bl	8000bcc <HAL_GPIO_WritePin>
        break;
 8002950:	e056      	b.n	8002a00 <keypad_scan+0x11c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <keypad_scan+0x1b4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	2102      	movs	r1, #2
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe f936 	bl	8000bcc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 8002960:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <keypad_scan+0x1b8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	2101      	movs	r1, #1
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe f92f 	bl	8000bcc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <keypad_scan+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2201      	movs	r2, #1
 8002974:	2108      	movs	r1, #8
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f928 	bl	8000bcc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 800297c:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <keypad_scan+0x1c0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	2104      	movs	r1, #4
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f921 	bl	8000bcc <HAL_GPIO_WritePin>
        break;
 800298a:	e039      	b.n	8002a00 <keypad_scan+0x11c>

	  case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <keypad_scan+0x1b4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f919 	bl	8000bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800299a:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <keypad_scan+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2201      	movs	r2, #1
 80029a0:	2101      	movs	r1, #1
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe f912 	bl	8000bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 80029a8:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <keypad_scan+0x1bc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	2108      	movs	r1, #8
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe f90b 	bl	8000bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <keypad_scan+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	2104      	movs	r1, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f904 	bl	8000bcc <HAL_GPIO_WritePin>
		break;
 80029c4:	e01c      	b.n	8002a00 <keypad_scan+0x11c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <keypad_scan+0x1b4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	2102      	movs	r1, #2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe f8fc 	bl	8000bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <keypad_scan+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe f8f5 	bl	8000bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80029e2:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <keypad_scan+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2201      	movs	r2, #1
 80029e8:	2108      	movs	r1, #8
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f8ee 	bl	8000bcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <keypad_scan+0x1c0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2104      	movs	r1, #4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe f8e7 	bl	8000bcc <HAL_GPIO_WritePin>
		break;
 80029fe:	bf00      	nop
}
// Read current rows
if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8002a00:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <keypad_scan+0x1c4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f8c8 	bl	8000b9c <HAL_GPIO_ReadPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <keypad_scan+0x138>
  return keys[0][i];
 8002a12:	1d3a      	adds	r2, r7, #4
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	e037      	b.n	8002a8c <keypad_scan+0x1a8>
if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8002a1c:	4b23      	ldr	r3, [pc, #140]	; (8002aac <keypad_scan+0x1c8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f8ba 	bl	8000b9c <HAL_GPIO_ReadPin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <keypad_scan+0x156>
  return keys[1][i];
 8002a2e:	f107 0208 	add.w	r2, r7, #8
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4413      	add	r3, r2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	e028      	b.n	8002a8c <keypad_scan+0x1a8>
if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <keypad_scan+0x1cc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2108      	movs	r1, #8
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe f8ab 	bl	8000b9c <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <keypad_scan+0x174>
  return keys[2][i];
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	e019      	b.n	8002a8c <keypad_scan+0x1a8>
if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <keypad_scan+0x1d0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe f89c 	bl	8000b9c <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <keypad_scan+0x192>
  return keys[3][i];
 8002a6a:	f107 0210 	add.w	r2, r7, #16
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4413      	add	r3, r2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	e00a      	b.n	8002a8c <keypad_scan+0x1a8>
  for(int i = 0; i < 4; i++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	f77f af3b 	ble.w	80028fa <keypad_scan+0x16>
}
  HAL_Delay(50);
 8002a84:	2032      	movs	r0, #50	; 0x32
 8002a86:	f7fd fde3 	bl	8000650 <HAL_Delay>

return 0; // No key pressed
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	08005fb4 	.word	0x08005fb4
 8002a98:	20000018 	.word	0x20000018
 8002a9c:	2000001c 	.word	0x2000001c
 8002aa0:	20000020 	.word	0x20000020
 8002aa4:	20000024 	.word	0x20000024
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	2000000c 	.word	0x2000000c
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	20000014 	.word	0x20000014

08002ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char key_pressed = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ac2:	f7fd fd53 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ac6:	f000 f8a3 	bl	8002c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aca:	f000 f999 	bl	8002e00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ace:	f000 f909 	bl	8002ce4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002ad2:	f000 f935 	bl	8002d40 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002ad6:	f000 f969 	bl	8002dac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	u8g2_Setup_ssd1327_ea_w128128_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 8002ada:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <main+0x124>)
 8002adc:	4a40      	ldr	r2, [pc, #256]	; (8002be0 <main+0x128>)
 8002ade:	4941      	ldr	r1, [pc, #260]	; (8002be4 <main+0x12c>)
 8002ae0:	4841      	ldr	r0, [pc, #260]	; (8002be8 <main+0x130>)
 8002ae2:	f000 fdbb 	bl	800365c <u8g2_Setup_ssd1327_ea_w128128_f>
	u8g2_InitDisplay(&u8g2);
 8002ae6:	4840      	ldr	r0, [pc, #256]	; (8002be8 <main+0x130>)
 8002ae8:	f002 f9f2 	bl	8004ed0 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002aec:	2100      	movs	r1, #0
 8002aee:	483e      	ldr	r0, [pc, #248]	; (8002be8 <main+0x130>)
 8002af0:	f002 f9fd 	bl	8004eee <u8x8_SetPowerSave>
    u8g2_SetFontMode(&u8g2, 0);  // Transparent
 8002af4:	2100      	movs	r1, #0
 8002af6:	483c      	ldr	r0, [pc, #240]	; (8002be8 <main+0x130>)
 8002af8:	f001 f9f5 	bl	8003ee6 <u8g2_SetFontMode>
    u8g2_SetFontDirection(&u8g2, 0);
 8002afc:	2100      	movs	r1, #0
 8002afe:	483a      	ldr	r0, [pc, #232]	; (8002be8 <main+0x130>)
 8002b00:	f001 fb6c 	bl	80041dc <u8g2_SetFontDirection>
    u8g2_SetFont(&u8g2, u8g2_font_6x12_tr);
 8002b04:	4939      	ldr	r1, [pc, #228]	; (8002bec <main+0x134>)
 8002b06:	4838      	ldr	r0, [pc, #224]	; (8002be8 <main+0x130>)
 8002b08:	f001 fb4e 	bl	80041a8 <u8g2_SetFont>
    u8g2_DrawStr(&u8g2, 8, 30, "Choose 4 numbers");
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <main+0x138>)
 8002b0e:	221e      	movs	r2, #30
 8002b10:	2108      	movs	r1, #8
 8002b12:	4835      	ldr	r0, [pc, #212]	; (8002be8 <main+0x130>)
 8002b14:	f001 faa6 	bl	8004064 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 8, 60, "Click White Button");
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <main+0x13c>)
 8002b1a:	223c      	movs	r2, #60	; 0x3c
 8002b1c:	2108      	movs	r1, #8
 8002b1e:	4832      	ldr	r0, [pc, #200]	; (8002be8 <main+0x130>)
 8002b20:	f001 faa0 	bl	8004064 <u8g2_DrawStr>
    u8g2_DrawStr(&u8g2, 8, 90, "To Start!");
 8002b24:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <main+0x140>)
 8002b26:	225a      	movs	r2, #90	; 0x5a
 8002b28:	2108      	movs	r1, #8
 8002b2a:	482f      	ldr	r0, [pc, #188]	; (8002be8 <main+0x130>)
 8002b2c:	f001 fa9a 	bl	8004064 <u8g2_DrawStr>
    u8g2_SendBuffer(&u8g2);
 8002b30:	482d      	ldr	r0, [pc, #180]	; (8002be8 <main+0x130>)
 8002b32:	f000 fd74 	bl	800361e <u8g2_SendBuffer>
    printf("hello world");
 8002b36:	4831      	ldr	r0, [pc, #196]	; (8002bfc <main+0x144>)
 8002b38:	f002 fb58 	bl	80051ec <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)) {
 8002b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b40:	482f      	ldr	r0, [pc, #188]	; (8002c00 <main+0x148>)
 8002b42:	f7fe f82b 	bl	8000b9c <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01f      	beq.n	8002b8c <main+0xd4>
	        // Button is pressed
	    	if(!firstTime){
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <main+0x14c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <main+0xb4>
	    		firstTime = 1;
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <main+0x14c>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
	            u8g2_ClearBuffer(&u8g2);
 8002b60:	4821      	ldr	r0, [pc, #132]	; (8002be8 <main+0x130>)
 8002b62:	f000 fce9 	bl	8003538 <u8g2_ClearBuffer>
	            u8g2_SendBuffer(&u8g2);
 8002b66:	4820      	ldr	r0, [pc, #128]	; (8002be8 <main+0x130>)
 8002b68:	f000 fd59 	bl	800361e <u8g2_SendBuffer>

	    	}
	        if (!buttonPressed) {
 8002b6c:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <main+0x150>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10e      	bne.n	8002b92 <main+0xda>
	            buttonPressed = 1;  // Set the flag
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <main+0x150>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]

	            key_pressed = keypad_scan();
 8002b7a:	f7ff feb3 	bl	80028e4 <keypad_scan>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
	            processKeyPress(key_pressed);
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fc29 	bl	80023dc <processKeyPress>
 8002b8a:	e002      	b.n	8002b92 <main+0xda>
	        }
	    } else {
	        buttonPressed = 0;  // Reset the flag when the button is released
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <main+0x150>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
	    }

	    if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13)) {
 8002b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b96:	481a      	ldr	r0, [pc, #104]	; (8002c00 <main+0x148>)
 8002b98:	f7fe f800 	bl	8000b9c <HAL_GPIO_ReadPin>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d015      	beq.n	8002bce <main+0x116>
	        // Button is pressed

	        if (!button2Pressed) {
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <main+0x154>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <main+0x104>
	            button2Pressed = 1;  // Set the flag
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <main+0x154>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
	            u8g2_ClearBuffer(&u8g2);
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <main+0x130>)
 8002bb2:	f000 fcc1 	bl	8003538 <u8g2_ClearBuffer>
	            u8g2_SendBuffer(&u8g2);}
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <main+0x130>)
 8002bb8:	f000 fd31 	bl	800361e <u8g2_SendBuffer>
	            key_pressed = keypad_scan();
 8002bbc:	f7ff fe92 	bl	80028e4 <keypad_scan>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
	            showKeyPress(key_pressed);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fe26 	bl	8002818 <showKeyPress>
 8002bcc:	e002      	b.n	8002bd4 <main+0x11c>

	    } else {
	        button2Pressed = 0;  // Reset the flag when the button is released
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <main+0x154>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
	    }
	    HAL_Delay(10);
 8002bd4:	200a      	movs	r0, #10
 8002bd6:	f7fd fd3b 	bl	8000650 <HAL_Delay>
	    if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15)) {
 8002bda:	e7af      	b.n	8002b3c <main+0x84>
 8002bdc:	0800337d 	.word	0x0800337d
 8002be0:	08003475 	.word	0x08003475
 8002be4:	080063e8 	.word	0x080063e8
 8002be8:	200001b4 	.word	0x200001b4
 8002bec:	0800601c 	.word	0x0800601c
 8002bf0:	08005fc4 	.word	0x08005fc4
 8002bf4:	08005fd8 	.word	0x08005fd8
 8002bf8:	08005fec 	.word	0x08005fec
 8002bfc:	08005ff8 	.word	0x08005ff8
 8002c00:	40021000 	.word	0x40021000
 8002c04:	200001b3 	.word	0x200001b3
 8002c08:	200001b1 	.word	0x200001b1
 8002c0c:	200001b2 	.word	0x200001b2

08002c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b094      	sub	sp, #80	; 0x50
 8002c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c16:	f107 0320 	add.w	r3, r7, #32
 8002c1a:	2230      	movs	r2, #48	; 0x30
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 fb39 	bl	8005296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	2300      	movs	r3, #0
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <SystemClock_Config+0xcc>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <SystemClock_Config+0xcc>)
 8002c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <SystemClock_Config+0xcc>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c50:	2300      	movs	r3, #0
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <SystemClock_Config+0xd0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <SystemClock_Config+0xd0>)
 8002c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <SystemClock_Config+0xd0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c76:	2302      	movs	r3, #2
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8002c80:	230f      	movs	r3, #15
 8002c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002c84:	2390      	movs	r3, #144	; 0x90
 8002c86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002c8c:	2305      	movs	r3, #5
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c90:	f107 0320 	add.w	r3, r7, #32
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe f8f7 	bl	8000e88 <HAL_RCC_OscConfig>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ca0:	f000 f986 	bl	8002fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	2103      	movs	r1, #3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fb58 	bl	8001378 <HAL_RCC_ClockConfig>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cce:	f000 f96f 	bl	8002fb0 <Error_Handler>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3750      	adds	r7, #80	; 0x50
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000

08002ce4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <MX_I2C1_Init+0x54>)
 8002cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002cf0:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <MX_I2C1_Init+0x58>)
 8002cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d20:	4804      	ldr	r0, [pc, #16]	; (8002d34 <MX_I2C1_Init+0x50>)
 8002d22:	f7fd ff6d 	bl	8000c00 <HAL_I2C_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d2c:	f000 f940 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200000a8 	.word	0x200000a8
 8002d38:	40005400 	.word	0x40005400
 8002d3c:	000186a0 	.word	0x000186a0

08002d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <MX_SPI2_Init+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d74:	2208      	movs	r2, #8
 8002d76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d8c:	220a      	movs	r2, #10
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <MX_SPI2_Init+0x64>)
 8002d92:	f7fe fcd1 	bl	8001738 <HAL_SPI_Init>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d9c:	f000 f908 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	200000fc 	.word	0x200000fc
 8002da8:	40003800 	.word	0x40003800

08002dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <MX_USART2_UART_Init+0x50>)
 8002db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <MX_USART2_UART_Init+0x4c>)
 8002de4:	f7fe ff38 	bl	8001c58 <HAL_UART_Init>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002dee:	f000 f8df 	bl	8002fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000154 	.word	0x20000154
 8002dfc:	40004400 	.word	0x40004400

08002e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	4b56      	ldr	r3, [pc, #344]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a55      	ldr	r2, [pc, #340]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a40      	ldr	r2, [pc, #256]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e74:	f043 0310 	orr.w	r3, r3, #16
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <MX_GPIO_Init+0x174>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL_2_Pin|COL_1_Pin|COL_4_Pin|COL_3_Pin, GPIO_PIN_RESET);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	482d      	ldr	r0, [pc, #180]	; (8002f78 <MX_GPIO_Init+0x178>)
 8002ec4:	f7fd fe82 	bl	8000bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin|OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8002ece:	482b      	ldr	r0, [pc, #172]	; (8002f7c <MX_GPIO_Init+0x17c>)
 8002ed0:	f7fd fe7c 	bl	8000bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8002eda:	4829      	ldr	r0, [pc, #164]	; (8002f80 <MX_GPIO_Init+0x180>)
 8002edc:	f7fd fe76 	bl	8000bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROW_2_Pin ROW_1_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_1_Pin|ROW_4_Pin|ROW_3_Pin;
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4824      	ldr	r0, [pc, #144]	; (8002f84 <MX_GPIO_Init+0x184>)
 8002ef4:	f7fd fcb6 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_2_Pin COL_1_Pin COL_4_Pin COL_3_Pin */
  GPIO_InitStruct.Pin = COL_2_Pin|COL_1_Pin|COL_4_Pin|COL_3_Pin;
 8002ef8:	230f      	movs	r3, #15
 8002efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	481a      	ldr	r0, [pc, #104]	; (8002f78 <MX_GPIO_Init+0x178>)
 8002f10:	f7fd fca8 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002f14:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f22:	f107 031c 	add.w	r3, r7, #28
 8002f26:	4619      	mov	r1, r3
 8002f28:	4817      	ldr	r0, [pc, #92]	; (8002f88 <MX_GPIO_Init+0x188>)
 8002f2a:	f7fd fc9b 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_CS_Pin|OLED_DC_Pin;
 8002f2e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	4619      	mov	r1, r3
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <MX_GPIO_Init+0x17c>)
 8002f48:	f7fd fc8c 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8002f4c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5e:	f107 031c 	add.w	r3, r7, #28
 8002f62:	4619      	mov	r1, r3
 8002f64:	4806      	ldr	r0, [pc, #24]	; (8002f80 <MX_GPIO_Init+0x180>)
 8002f66:	f7fd fc7d 	bl	8000864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f6a:	bf00      	nop
 8002f6c:	3730      	adds	r7, #48	; 0x30
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40021000 	.word	0x40021000

08002f8c <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002f94:	1d39      	adds	r1, r7, #4
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4803      	ldr	r0, [pc, #12]	; (8002fac <__io_putchar+0x20>)
 8002f9e:	f7fe fea8 	bl	8001cf2 <HAL_UART_Transmit>
  return ch;
 8002fa2:	687b      	ldr	r3, [r7, #4]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000154 	.word	0x20000154

08002fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <Error_Handler+0x8>
	...

08002fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_MspInit+0x4c>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_MspInit+0x4c>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_MspInit+0x4c>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <HAL_MspInit+0x4c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a08      	ldr	r2, [pc, #32]	; (8003008 <HAL_MspInit+0x4c>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_MspInit+0x4c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800

0800300c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_I2C_MspInit+0x84>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d12b      	bne.n	8003086 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_I2C_MspInit+0x88>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4a17      	ldr	r2, [pc, #92]	; (8003094 <HAL_I2C_MspInit+0x88>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6313      	str	r3, [r2, #48]	; 0x30
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_I2C_MspInit+0x88>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800304a:	23c0      	movs	r3, #192	; 0xc0
 800304c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800304e:	2312      	movs	r3, #18
 8003050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800305a:	2304      	movs	r3, #4
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	4619      	mov	r1, r3
 8003064:	480c      	ldr	r0, [pc, #48]	; (8003098 <HAL_I2C_MspInit+0x8c>)
 8003066:	f7fd fbfd 	bl	8000864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_I2C_MspInit+0x88>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <HAL_I2C_MspInit+0x88>)
 8003074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_I2C_MspInit+0x88>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003086:	bf00      	nop
 8003088:	3728      	adds	r7, #40	; 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40005400 	.word	0x40005400
 8003094:	40023800 	.word	0x40023800
 8003098:	40020400 	.word	0x40020400

0800309c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_SPI_MspInit+0x84>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12c      	bne.n	8003118 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_SPI_MspInit+0x88>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_SPI_MspInit+0x88>)
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_SPI_MspInit+0x88>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_SPI_MspInit+0x88>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_SPI_MspInit+0x88>)
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_SPI_MspInit+0x88>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80030f6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80030fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003108:	2305      	movs	r3, #5
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4619      	mov	r1, r3
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <HAL_SPI_MspInit+0x8c>)
 8003114:	f7fd fba6 	bl	8000864 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003118:	bf00      	nop
 800311a:	3728      	adds	r7, #40	; 0x28
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40003800 	.word	0x40003800
 8003124:	40023800 	.word	0x40023800
 8003128:	40020400 	.word	0x40020400

0800312c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_UART_MspInit+0x84>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d12b      	bne.n	80031a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <HAL_UART_MspInit+0x88>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_UART_MspInit+0x88>)
 8003158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315c:	6413      	str	r3, [r2, #64]	; 0x40
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_UART_MspInit+0x88>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <HAL_UART_MspInit+0x88>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_UART_MspInit+0x88>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_UART_MspInit+0x88>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003186:	2360      	movs	r3, #96	; 0x60
 8003188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003196:	2307      	movs	r3, #7
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4805      	ldr	r0, [pc, #20]	; (80031b8 <HAL_UART_MspInit+0x8c>)
 80031a2:	f7fd fb5f 	bl	8000864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031a6:	bf00      	nop
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40004400 	.word	0x40004400
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020c00 	.word	0x40020c00

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <NMI_Handler+0x4>

080031c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <HardFault_Handler+0x4>

080031c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <MemManage_Handler+0x4>

080031ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d2:	e7fe      	b.n	80031d2 <BusFault_Handler+0x4>

080031d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d8:	e7fe      	b.n	80031d8 <UsageFault_Handler+0x4>

080031da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003208:	f7fd fa02 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}

08003210 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e00a      	b.n	8003238 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003222:	f3af 8000 	nop.w
 8003226:	4601      	mov	r1, r0
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	60ba      	str	r2, [r7, #8]
 800322e:	b2ca      	uxtb	r2, r1
 8003230:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	dbf0      	blt.n	8003222 <_read+0x12>
  }

  return len;
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e009      	b.n	8003270 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	60ba      	str	r2, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fe91 	bl	8002f8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3301      	adds	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	dbf1      	blt.n	800325c <_write+0x12>
  }
  return len;
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <_close>:

int _close(int file)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032aa:	605a      	str	r2, [r3, #4]
  return 0;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <_isatty>:

int _isatty(int file)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <_sbrk+0x5c>)
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <_sbrk+0x60>)
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <_sbrk+0x64>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <_sbrk+0x64>)
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <_sbrk+0x68>)
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <_sbrk+0x64>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	429a      	cmp	r2, r3
 800331a:	d207      	bcs.n	800332c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800331c:	f002 f80a 	bl	8005334 <__errno>
 8003320:	4603      	mov	r3, r0
 8003322:	220c      	movs	r2, #12
 8003324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	e009      	b.n	8003340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <_sbrk+0x64>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <_sbrk+0x64>)
 800333c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20020000 	.word	0x20020000
 800334c:	00000400 	.word	0x00000400
 8003350:	2000023c 	.word	0x2000023c
 8003354:	20000bb0 	.word	0x20000bb0

08003358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <SystemInit+0x20>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	4a05      	ldr	r2, [pc, #20]	; (8003378 <SystemInit+0x20>)
 8003364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <u8x8_stm32_gpio_and_delay>:

extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	72fb      	strb	r3, [r7, #11]
 800338a:	4613      	mov	r3, r2
 800338c:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	3b28      	subs	r3, #40	; 0x28
 8003392:	2b23      	cmp	r3, #35	; 0x23
 8003394:	d867      	bhi.n	8003466 <u8x8_stm32_gpio_and_delay+0xea>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <u8x8_stm32_gpio_and_delay+0x20>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	08003467 	.word	0x08003467
 80033a0:	0800342d 	.word	0x0800342d
 80033a4:	08003467 	.word	0x08003467
 80033a8:	08003467 	.word	0x08003467
 80033ac:	08003467 	.word	0x08003467
 80033b0:	08003467 	.word	0x08003467
 80033b4:	08003467 	.word	0x08003467
 80033b8:	08003467 	.word	0x08003467
 80033bc:	08003467 	.word	0x08003467
 80033c0:	08003467 	.word	0x08003467
 80033c4:	08003467 	.word	0x08003467
 80033c8:	08003467 	.word	0x08003467
 80033cc:	08003467 	.word	0x08003467
 80033d0:	08003467 	.word	0x08003467
 80033d4:	08003467 	.word	0x08003467
 80033d8:	08003467 	.word	0x08003467
 80033dc:	08003467 	.word	0x08003467
 80033e0:	08003467 	.word	0x08003467
 80033e4:	08003467 	.word	0x08003467
 80033e8:	08003467 	.word	0x08003467
 80033ec:	08003467 	.word	0x08003467
 80033f0:	08003467 	.word	0x08003467
 80033f4:	08003467 	.word	0x08003467
 80033f8:	08003467 	.word	0x08003467
 80033fc:	08003467 	.word	0x08003467
 8003400:	08003467 	.word	0x08003467
 8003404:	08003467 	.word	0x08003467
 8003408:	08003467 	.word	0x08003467
 800340c:	08003467 	.word	0x08003467
 8003410:	08003467 	.word	0x08003467
 8003414:	08003467 	.word	0x08003467
 8003418:	08003467 	.word	0x08003467
 800341c:	08003467 	.word	0x08003467
 8003420:	08003437 	.word	0x08003437
 8003424:	08003447 	.word	0x08003447
 8003428:	08003457 	.word	0x08003457
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 800342c:	7abb      	ldrb	r3, [r7, #10]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f90e 	bl	8000650 <HAL_Delay>
		break;
 8003434:	e017      	b.n	8003466 <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8003436:	7abb      	ldrb	r3, [r7, #10]
 8003438:	461a      	mov	r2, r3
 800343a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800343e:	480c      	ldr	r0, [pc, #48]	; (8003470 <u8x8_stm32_gpio_and_delay+0xf4>)
 8003440:	f7fd fbc4 	bl	8000bcc <HAL_GPIO_WritePin>
		break;
 8003444:	e00f      	b.n	8003466 <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8003446:	7abb      	ldrb	r3, [r7, #10]
 8003448:	461a      	mov	r2, r3
 800344a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800344e:	4808      	ldr	r0, [pc, #32]	; (8003470 <u8x8_stm32_gpio_and_delay+0xf4>)
 8003450:	f7fd fbbc 	bl	8000bcc <HAL_GPIO_WritePin>
		break;
 8003454:	e007      	b.n	8003466 <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8003456:	7abb      	ldrb	r3, [r7, #10]
 8003458:	461a      	mov	r2, r3
 800345a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800345e:	4804      	ldr	r0, [pc, #16]	; (8003470 <u8x8_stm32_gpio_and_delay+0xf4>)
 8003460:	f7fd fbb4 	bl	8000bcc <HAL_GPIO_WritePin>
		break;
 8003464:	bf00      	nop
	}
	return 1;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40020400 	.word	0x40020400

08003474 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	72fb      	strb	r3, [r7, #11]
 8003482:	4613      	mov	r3, r2
 8003484:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	3b14      	subs	r3, #20
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d847      	bhi.n	800351e <u8x8_byte_stm32_hw_spi+0xaa>
 800348e:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <u8x8_byte_stm32_hw_spi+0x20>)
 8003490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003494:	08003523 	.word	0x08003523
 8003498:	0800351f 	.word	0x0800351f
 800349c:	0800351f 	.word	0x0800351f
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034ef 	.word	0x080034ef
 80034a8:	08003507 	.word	0x08003507
 80034ac:	0800351f 	.word	0x0800351f
 80034b0:	0800351f 	.word	0x0800351f
 80034b4:	0800351f 	.word	0x0800351f
 80034b8:	0800351f 	.word	0x0800351f
 80034bc:	0800351f 	.word	0x0800351f
 80034c0:	0800351f 	.word	0x0800351f
 80034c4:	080034e1 	.word	0x080034e1
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80034c8:	7abb      	ldrb	r3, [r7, #10]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	2364      	movs	r3, #100	; 0x64
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4818      	ldr	r0, [pc, #96]	; (8003534 <u8x8_byte_stm32_hw_spi+0xc0>)
 80034d2:	f7fe f9ba 	bl	800184a <HAL_SPI_Transmit>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d024      	beq.n	8003526 <u8x8_byte_stm32_hw_spi+0xb2>
 80034dc:	2300      	movs	r3, #0
 80034de:	e024      	b.n	800352a <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80034e0:	7abb      	ldrb	r3, [r7, #10]
 80034e2:	461a      	mov	r2, r3
 80034e4:	214a      	movs	r1, #74	; 0x4a
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f001 fd21 	bl	8004f2e <u8x8_gpio_call>
		break;
 80034ec:	e01c      	b.n	8003528 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	2149      	movs	r1, #73	; 0x49
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f001 fd18 	bl	8004f2e <u8x8_gpio_call>
		HAL_Delay(1);
 80034fe:	2001      	movs	r0, #1
 8003500:	f7fd f8a6 	bl	8000650 <HAL_Delay>
		break;
 8003504:	e010      	b.n	8003528 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8003506:	2001      	movs	r0, #1
 8003508:	f7fd f8a2 	bl	8000650 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	461a      	mov	r2, r3
 8003514:	2149      	movs	r1, #73	; 0x49
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f001 fd09 	bl	8004f2e <u8x8_gpio_call>
		break;
 800351c:	e004      	b.n	8003528 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 800351e:	2300      	movs	r3, #0
 8003520:	e003      	b.n	800352a <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8003526:	bf00      	nop
	}
	return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200000fc 	.word	0x200000fc

08003538 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	7c1b      	ldrb	r3, [r3, #16]
 8003546:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	2100      	movs	r1, #0
 8003566:	4618      	mov	r0, r3
 8003568:	f001 fe95 	bl	8005296 <memset>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
 8003580:	4613      	mov	r3, r2
 8003582:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	7c1b      	ldrb	r3, [r3, #16]
 800358a:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	b29b      	uxth	r3, r3
 800359a:	89ba      	ldrh	r2, [r7, #12]
 800359c:	fb12 f303 	smulbb	r3, r2, r3
 80035a0:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80035a2:	89bb      	ldrh	r3, [r7, #12]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80035a8:	89bb      	ldrh	r3, [r7, #12]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80035b0:	7bf9      	ldrb	r1, [r7, #15]
 80035b2:	78ba      	ldrb	r2, [r7, #2]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	460b      	mov	r3, r1
 80035ba:	2100      	movs	r1, #0
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f001 fc56 	bl	8004e6e <u8x8_DrawTile>
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	7c5b      	ldrb	r3, [r3, #17]
 80035ec:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80035ee:	7bba      	ldrb	r2, [r7, #14]
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	4619      	mov	r1, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ffbd 	bl	8003574 <u8g2_send_tile_row>
    src_row++;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	3301      	adds	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003600:	7bbb      	ldrb	r3, [r7, #14]
 8003602:	3301      	adds	r3, #1
 8003604:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	7b7b      	ldrb	r3, [r7, #13]
 800360a:	429a      	cmp	r2, r3
 800360c:	d203      	bcs.n	8003616 <u8g2_send_buffer+0x4c>
 800360e:	7bba      	ldrb	r2, [r7, #14]
 8003610:	7b3b      	ldrb	r3, [r7, #12]
 8003612:	429a      	cmp	r2, r3
 8003614:	d3eb      	bcc.n	80035ee <u8g2_send_buffer+0x24>
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffcf 	bl	80035ca <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f001 fc6f 	bl	8004f10 <u8x8_RefreshDisplay>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <u8g2_m_16_16_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_16_f(uint8_t *page_cnt)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  static uint8_t buf[2048];
  *page_cnt = 16;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2210      	movs	r2, #16
 8003648:	701a      	strb	r2, [r3, #0]
  return buf;
 800364a:	4b03      	ldr	r3, [pc, #12]	; (8003658 <u8g2_m_16_16_f+0x1c>)
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	20000240 	.word	0x20000240

0800365c <u8g2_Setup_ssd1327_ea_w128128_f>:
  buf = u8g2_m_16_16_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1327 f */
void u8g2_Setup_ssd1327_ea_w128128_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1327_ea_w128128, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <u8g2_Setup_ssd1327_ea_w128128_f+0x44>)
 8003672:	490c      	ldr	r1, [pc, #48]	; (80036a4 <u8g2_Setup_ssd1327_ea_w128128_f+0x48>)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f001 fcaf 	bl	8004fd8 <u8x8_Setup>
  buf = u8g2_m_16_16_f(&tile_buf_height);
 800367a:	f107 0313 	add.w	r3, r7, #19
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ffdc 	bl	800363c <u8g2_m_16_16_f>
 8003684:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003686:	7cfa      	ldrb	r2, [r7, #19]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <u8g2_Setup_ssd1327_ea_w128128_f+0x4c>)
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 ffc1 	bl	8004618 <u8g2_SetupBuffer>
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	08004ac9 	.word	0x08004ac9
 80036a4:	08004d25 	.word	0x08004d25
 80036a8:	0800449d 	.word	0x0800449d

080036ac <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	781b      	ldrb	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	81fb      	strh	r3, [r7, #14]
    font++;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3301      	adds	r3, #1
 80036ee:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80036f0:	89fb      	ldrh	r3, [r7, #14]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	89fb      	ldrh	r3, [r7, #14]
 80036fe:	4413      	add	r3, r2
 8003700:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003702:	89fb      	ldrh	r3, [r7, #14]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800371a:	2100      	movs	r1, #0
 800371c:	6838      	ldr	r0, [r7, #0]
 800371e:	f7ff ffc5 	bl	80036ac <u8g2_font_get_byte>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800372a:	2101      	movs	r1, #1
 800372c:	6838      	ldr	r0, [r7, #0]
 800372e:	f7ff ffbd 	bl	80036ac <u8g2_font_get_byte>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800373a:	2102      	movs	r1, #2
 800373c:	6838      	ldr	r0, [r7, #0]
 800373e:	f7ff ffb5 	bl	80036ac <u8g2_font_get_byte>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800374a:	2103      	movs	r1, #3
 800374c:	6838      	ldr	r0, [r7, #0]
 800374e:	f7ff ffad 	bl	80036ac <u8g2_font_get_byte>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800375a:	2104      	movs	r1, #4
 800375c:	6838      	ldr	r0, [r7, #0]
 800375e:	f7ff ffa5 	bl	80036ac <u8g2_font_get_byte>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800376a:	2105      	movs	r1, #5
 800376c:	6838      	ldr	r0, [r7, #0]
 800376e:	f7ff ff9d 	bl	80036ac <u8g2_font_get_byte>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800377a:	2106      	movs	r1, #6
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	f7ff ff95 	bl	80036ac <u8g2_font_get_byte>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800378a:	2107      	movs	r1, #7
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	f7ff ff8d 	bl	80036ac <u8g2_font_get_byte>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800379a:	2108      	movs	r1, #8
 800379c:	6838      	ldr	r0, [r7, #0]
 800379e:	f7ff ff85 	bl	80036ac <u8g2_font_get_byte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80037aa:	2109      	movs	r1, #9
 80037ac:	6838      	ldr	r0, [r7, #0]
 80037ae:	f7ff ff7d 	bl	80036ac <u8g2_font_get_byte>
 80037b2:	4603      	mov	r3, r0
 80037b4:	b25a      	sxtb	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80037ba:	210a      	movs	r1, #10
 80037bc:	6838      	ldr	r0, [r7, #0]
 80037be:	f7ff ff75 	bl	80036ac <u8g2_font_get_byte>
 80037c2:	4603      	mov	r3, r0
 80037c4:	b25a      	sxtb	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80037ca:	210b      	movs	r1, #11
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f7ff ff6d 	bl	80036ac <u8g2_font_get_byte>
 80037d2:	4603      	mov	r3, r0
 80037d4:	b25a      	sxtb	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80037da:	210c      	movs	r1, #12
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f7ff ff65 	bl	80036ac <u8g2_font_get_byte>
 80037e2:	4603      	mov	r3, r0
 80037e4:	b25a      	sxtb	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80037ea:	210d      	movs	r1, #13
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	f7ff ff5d 	bl	80036ac <u8g2_font_get_byte>
 80037f2:	4603      	mov	r3, r0
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80037fa:	210e      	movs	r1, #14
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f7ff ff55 	bl	80036ac <u8g2_font_get_byte>
 8003802:	4603      	mov	r3, r0
 8003804:	b25a      	sxtb	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800380a:	210f      	movs	r1, #15
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	f7ff ff4d 	bl	80036ac <u8g2_font_get_byte>
 8003812:	4603      	mov	r3, r0
 8003814:	b25a      	sxtb	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800381a:	2110      	movs	r1, #16
 800381c:	6838      	ldr	r0, [r7, #0]
 800381e:	f7ff ff45 	bl	80036ac <u8g2_font_get_byte>
 8003822:	4603      	mov	r3, r0
 8003824:	b25a      	sxtb	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800382a:	2111      	movs	r1, #17
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f7ff ff4f 	bl	80036d0 <u8g2_font_get_word>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800383a:	2113      	movs	r1, #19
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f7ff ff47 	bl	80036d0 <u8g2_font_get_word>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800384a:	2115      	movs	r1, #21
 800384c:	6838      	ldr	r0, [r7, #0]
 800384e:	f7ff ff3f 	bl	80036d0 <u8g2_font_get_word>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	82da      	strh	r2, [r3, #22]
#endif
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7a9b      	ldrb	r3, [r3, #10]
 8003872:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	7b7b      	ldrb	r3, [r7, #13]
 8003880:	fa42 f303 	asr.w	r3, r2, r3
 8003884:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003886:	7b7b      	ldrb	r3, [r7, #13]
 8003888:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800388a:	7bba      	ldrb	r2, [r7, #14]
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	4413      	add	r3, r2
 8003890:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003892:	7bbb      	ldrb	r3, [r7, #14]
 8003894:	2b07      	cmp	r3, #7
 8003896:	d91a      	bls.n	80038ce <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003898:	2308      	movs	r3, #8
 800389a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800389c:	7b3a      	ldrb	r2, [r7, #12]
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	7b3b      	ldrb	r3, [r7, #12]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	b25a      	sxtb	r2, r3
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	3b08      	subs	r3, #8
 80038cc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	4013      	ands	r3, r2
 80038e2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7bba      	ldrb	r2, [r7, #14]
 80038e8:	729a      	strb	r2, [r3, #10]
  return val;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ffaa 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	3b01      	subs	r3, #1
 800391a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800391c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	73fb      	strb	r3, [r7, #15]
  return v;
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800393e:	b490      	push	{r4, r7}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4604      	mov	r4, r0
 8003946:	4608      	mov	r0, r1
 8003948:	4611      	mov	r1, r2
 800394a:	461a      	mov	r2, r3
 800394c:	4623      	mov	r3, r4
 800394e:	71fb      	strb	r3, [r7, #7]
 8003950:	4603      	mov	r3, r0
 8003952:	71bb      	strb	r3, [r7, #6]
 8003954:	460b      	mov	r3, r1
 8003956:	717b      	strb	r3, [r7, #5]
 8003958:	4613      	mov	r3, r2
 800395a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800395c:	793b      	ldrb	r3, [r7, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d010      	beq.n	8003984 <u8g2_add_vector_y+0x46>
 8003962:	2b02      	cmp	r3, #2
 8003964:	dc13      	bgt.n	800398e <u8g2_add_vector_y+0x50>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <u8g2_add_vector_y+0x32>
 800396a:	2b01      	cmp	r3, #1
 800396c:	d005      	beq.n	800397a <u8g2_add_vector_y+0x3c>
 800396e:	e00e      	b.n	800398e <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8003970:	797a      	ldrb	r2, [r7, #5]
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	4413      	add	r3, r2
 8003976:	71fb      	strb	r3, [r7, #7]
      break;
 8003978:	e00e      	b.n	8003998 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 800397a:	79ba      	ldrb	r2, [r7, #6]
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	4413      	add	r3, r2
 8003980:	71fb      	strb	r3, [r7, #7]
      break;
 8003982:	e009      	b.n	8003998 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8003984:	797b      	ldrb	r3, [r7, #5]
 8003986:	79fa      	ldrb	r2, [r7, #7]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	71fb      	strb	r3, [r7, #7]
      break;
 800398c:	e004      	b.n	8003998 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800398e:	79bb      	ldrb	r3, [r7, #6]
 8003990:	79fa      	ldrb	r2, [r7, #7]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	71fb      	strb	r3, [r7, #7]
      break;      
 8003996:	bf00      	nop
  }
  return dy;
 8003998:	79fb      	ldrb	r3, [r7, #7]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc90      	pop	{r4, r7}
 80039a2:	4770      	bx	lr

080039a4 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80039a4:	b490      	push	{r4, r7}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4623      	mov	r3, r4
 80039b4:	71fb      	strb	r3, [r7, #7]
 80039b6:	4603      	mov	r3, r0
 80039b8:	71bb      	strb	r3, [r7, #6]
 80039ba:	460b      	mov	r3, r1
 80039bc:	717b      	strb	r3, [r7, #5]
 80039be:	4613      	mov	r3, r2
 80039c0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80039c2:	793b      	ldrb	r3, [r7, #4]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d010      	beq.n	80039ea <u8g2_add_vector_x+0x46>
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	dc13      	bgt.n	80039f4 <u8g2_add_vector_x+0x50>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <u8g2_add_vector_x+0x32>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d005      	beq.n	80039e0 <u8g2_add_vector_x+0x3c>
 80039d4:	e00e      	b.n	80039f4 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 80039d6:	79ba      	ldrb	r2, [r7, #6]
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	4413      	add	r3, r2
 80039dc:	71fb      	strb	r3, [r7, #7]
      break;
 80039de:	e00e      	b.n	80039fe <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 80039e0:	797b      	ldrb	r3, [r7, #5]
 80039e2:	79fa      	ldrb	r2, [r7, #7]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	71fb      	strb	r3, [r7, #7]
      break;
 80039e8:	e009      	b.n	80039fe <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 80039ea:	79bb      	ldrb	r3, [r7, #6]
 80039ec:	79fa      	ldrb	r2, [r7, #7]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	71fb      	strb	r3, [r7, #7]
      break;
 80039f2:	e004      	b.n	80039fe <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 80039f4:	797a      	ldrb	r2, [r7, #5]
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4413      	add	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]
      break;      
 80039fc:	bf00      	nop
  }
  return dx;
 80039fe:	79fb      	ldrb	r3, [r7, #7]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc90      	pop	{r4, r7}
 8003a08:	4770      	bx	lr

08003a0a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b088      	sub	sp, #32
 8003a0e:	af02      	add	r7, sp, #8
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
 8003a16:	4613      	mov	r3, r2
 8003a18:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3358      	adds	r3, #88	; 0x58
 8003a1e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003a2a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003a32:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003a3a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	7d7b      	ldrb	r3, [r7, #21]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003a48:	7dfa      	ldrb	r2, [r7, #23]
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d201      	bcs.n	8003a54 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	795b      	ldrb	r3, [r3, #5]
 8003a5e:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003a60:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003a64:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	7b9b      	ldrb	r3, [r3, #14]
 8003a6c:	7bb8      	ldrb	r0, [r7, #14]
 8003a6e:	f7ff ff99 	bl	80039a4 <u8g2_add_vector_x>
 8003a72:	4603      	mov	r3, r0
 8003a74:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003a76:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003a7a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	7b9b      	ldrb	r3, [r3, #14]
 8003a82:	7b78      	ldrb	r0, [r7, #13]
 8003a84:	f7ff ff5b 	bl	800393e <u8g2_add_vector_y>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003a8c:	78bb      	ldrb	r3, [r7, #2]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00f      	beq.n	8003ab2 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	7b1a      	ldrb	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	7b9b      	ldrb	r3, [r3, #14]
 8003aa0:	7db8      	ldrb	r0, [r7, #22]
 8003aa2:	7b7a      	ldrb	r2, [r7, #13]
 8003aa4:	7bb9      	ldrb	r1, [r7, #14]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fc15 	bl	80042da <u8g2_DrawHVLine>
 8003ab0:	e012      	b.n	8003ad8 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	7adb      	ldrb	r3, [r3, #11]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10e      	bne.n	8003ad8 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	7b5a      	ldrb	r2, [r3, #13]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	7b9b      	ldrb	r3, [r3, #14]
 8003ac8:	7db8      	ldrb	r0, [r7, #22]
 8003aca:	7b7a      	ldrb	r2, [r7, #13]
 8003acc:	7bb9      	ldrb	r1, [r7, #14]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fc01 	bl	80042da <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003ad8:	7dfa      	ldrb	r2, [r7, #23]
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d309      	bcc.n	8003af4 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8003ae0:	7dfa      	ldrb	r2, [r7, #23]
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	757b      	strb	r3, [r7, #21]
    ly++;
 8003aec:	7d3b      	ldrb	r3, [r7, #20]
 8003aee:	3301      	adds	r3, #1
 8003af0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003af2:	e79f      	b.n	8003a34 <u8g2_font_decode_len+0x2a>
      break;
 8003af4:	bf00      	nop
  }
  lx += cnt;
 8003af6:	7d7a      	ldrb	r2, [r7, #21]
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	4413      	add	r3, r2
 8003afc:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003afe:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8003b06:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	71da      	strb	r2, [r3, #7]
  
}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3358      	adds	r3, #88	; 0x58
 8003b24:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003b38:	4619      	mov	r1, r3
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff fe91 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003b40:	4603      	mov	r3, r0
 8003b42:	b25a      	sxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003b4e:	4619      	mov	r1, r3
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff fe86 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003b56:	4603      	mov	r3, r0
 8003b58:	b25a      	sxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	7b1b      	ldrb	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	735a      	strb	r2, [r3, #13]
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3358      	adds	r3, #88	; 0x58
 8003b92:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffbd 	bl	8003b16 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003ba2:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8003baa:	4619      	mov	r1, r3
 8003bac:	6938      	ldr	r0, [r7, #16]
 8003bae:	f7ff fea3 	bl	80038f8 <u8g2_font_decode_get_signed_bits>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	6938      	ldr	r0, [r7, #16]
 8003bc0:	f7ff fe9a 	bl	80038f8 <u8g2_font_decode_get_signed_bits>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6938      	ldr	r0, [r7, #16]
 8003bd2:	f7ff fe91 	bl	80038f8 <u8g2_font_decode_get_signed_bits>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f340 80cf 	ble.w	8003d84 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	7918      	ldrb	r0, [r3, #4]
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	7b7b      	ldrb	r3, [r7, #13]
 8003bee:	4413      	add	r3, r2
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	425b      	negs	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	b25a      	sxtb	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	7b9b      	ldrb	r3, [r3, #14]
 8003bfc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003c00:	f7ff fed0 	bl	80039a4 <u8g2_add_vector_x>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	7958      	ldrb	r0, [r3, #5]
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	7b7b      	ldrb	r3, [r7, #13]
 8003c14:	4413      	add	r3, r2
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	425b      	negs	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	b25a      	sxtb	r2, r3
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	7b9b      	ldrb	r3, [r3, #14]
 8003c22:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003c26:	f7ff fe8a 	bl	800393e <u8g2_add_vector_y>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	791b      	ldrb	r3, [r3, #4]
 8003c36:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	795b      	ldrb	r3, [r3, #5]
 8003c3c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8003c42:	7d7b      	ldrb	r3, [r7, #21]
 8003c44:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	7b9b      	ldrb	r3, [r3, #14]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d852      	bhi.n	8003cf4 <u8g2_font_decode_glyph+0x170>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <u8g2_font_decode_glyph+0xd0>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003ca1 	.word	0x08003ca1
 8003c60:	08003cd1 	.word	0x08003cd1
      {
	case 0:
	    x1 += decode->glyph_width;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	7dbb      	ldrb	r3, [r7, #22]
 8003c6e:	4413      	add	r3, r2
 8003c70:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8003c72:	7bfa      	ldrb	r2, [r7, #15]
 8003c74:	7d3b      	ldrb	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	753b      	strb	r3, [r7, #20]
	    break;
 8003c7a:	e03b      	b.n	8003cf4 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	7dfa      	ldrb	r2, [r7, #23]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	3301      	adds	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8003c8a:	7dbb      	ldrb	r3, [r7, #22]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	7d3b      	ldrb	r3, [r7, #20]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	753b      	strb	r3, [r7, #20]
	    break;
 8003c9e:	e029      	b.n	8003cf4 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	7dfa      	ldrb	r2, [r7, #23]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8003cb4:	7dbb      	ldrb	r3, [r7, #22]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	7d7a      	ldrb	r2, [r7, #21]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003cc2:	7d7b      	ldrb	r3, [r7, #21]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003cc8:	7d3b      	ldrb	r3, [r7, #20]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	753b      	strb	r3, [r7, #20]
	    break;	  
 8003cce:	e011      	b.n	8003cf4 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	7dbb      	ldrb	r3, [r7, #22]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	7d7a      	ldrb	r2, [r7, #21]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003ce6:	7d7b      	ldrb	r3, [r7, #21]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003cec:	7d3b      	ldrb	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	753b      	strb	r3, [r7, #20]
	    break;	  
 8003cf2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003cf4:	7db8      	ldrb	r0, [r7, #22]
 8003cf6:	7d7a      	ldrb	r2, [r7, #21]
 8003cf8:	7df9      	ldrb	r1, [r7, #23]
 8003cfa:	7d3b      	ldrb	r3, [r7, #20]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	4603      	mov	r3, r0
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fba0 	bl	8004446 <u8g2_IsIntersection>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <u8g2_font_decode_glyph+0x18e>
	return d;
 8003d0c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003d10:	e03a      	b.n	8003d88 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2200      	movs	r2, #0
 8003d16:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003d24:	4619      	mov	r1, r3
 8003d26:	6938      	ldr	r0, [r7, #16]
 8003d28:	f7ff fd9b 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8003d36:	4619      	mov	r1, r3
 8003d38:	6938      	ldr	r0, [r7, #16]
 8003d3a:	f7ff fd92 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	2200      	movs	r2, #0
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff fe5e 	bl	8003a0a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003d4e:	7abb      	ldrb	r3, [r7, #10]
 8003d50:	2201      	movs	r2, #1
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fe58 	bl	8003a0a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	6938      	ldr	r0, [r7, #16]
 8003d5e:	f7ff fd80 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ec      	bne.n	8003d42 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003d6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	dd00      	ble.n	8003d78 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003d76:	e7d2      	b.n	8003d1e <u8g2_font_decode_glyph+0x19a>
	break;
 8003d78:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	7b1a      	ldrb	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8003d84:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3317      	adds	r3, #23
 8003da6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003da8:	887b      	ldrh	r3, [r7, #2]
 8003daa:	2bff      	cmp	r3, #255	; 0xff
 8003dac:	d82a      	bhi.n	8003e04 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d907      	bls.n	8003dc4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8003dba:	461a      	mov	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e009      	b.n	8003dd8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d906      	bls.n	8003dd8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d04e      	beq.n	8003e80 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	887a      	ldrh	r2, [r7, #2]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d102      	bne.n	8003df4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3302      	adds	r3, #2
 8003df2:	e049      	b.n	8003e88 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3301      	adds	r3, #1
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4413      	add	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003e02:	e7e9      	b.n	8003dd8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003e16:	2100      	movs	r1, #0
 8003e18:	6938      	ldr	r0, [r7, #16]
 8003e1a:	f7ff fc59 	bl	80036d0 <u8g2_font_get_word>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	461a      	mov	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4413      	add	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003e28:	2102      	movs	r1, #2
 8003e2a:	6938      	ldr	r0, [r7, #16]
 8003e2c:	f7ff fc50 	bl	80036d0 <u8g2_font_get_word>
 8003e30:	4603      	mov	r3, r0
 8003e32:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3304      	adds	r3, #4
 8003e38:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003e3a:	89fa      	ldrh	r2, [r7, #14]
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3e9      	bcc.n	8003e16 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003e48:	89fb      	ldrh	r3, [r7, #14]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3301      	adds	r3, #1
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	89fb      	ldrh	r3, [r7, #14]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003e5c:	89fb      	ldrh	r3, [r7, #14]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003e62:	89fa      	ldrh	r2, [r7, #14]
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d102      	bne.n	8003e70 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	3303      	adds	r3, #3
 8003e6e:	e00b      	b.n	8003e88 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3302      	adds	r3, #2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003e7e:	e7e0      	b.n	8003e42 <u8g2_font_get_glyph_data+0xb2>
	break;
 8003e80:	bf00      	nop
 8003e82:	e000      	b.n	8003e86 <u8g2_font_get_glyph_data+0xf6>
	break;
 8003e84:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	4608      	mov	r0, r1
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	70fb      	strb	r3, [r7, #3]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	70bb      	strb	r3, [r7, #2]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	78ba      	ldrb	r2, [r7, #2]
 8003eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003ebe:	883b      	ldrh	r3, [r7, #0]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ff64 	bl	8003d90 <u8g2_font_get_glyph_data>
 8003ec8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fe56 	bl	8003b84 <u8g2_font_decode_glyph>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	70fb      	strb	r3, [r7, #3]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	70bb      	strb	r3, [r7, #2]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d833      	bhi.n	8003f94 <u8g2_DrawGlyph+0x8c>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <u8g2_DrawGlyph+0x2c>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f59 	.word	0x08003f59
 8003f3c:	08003f6d 	.word	0x08003f6d
 8003f40:	08003f81 	.word	0x08003f81
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	78bb      	ldrb	r3, [r7, #2]
 8003f52:	4413      	add	r3, r2
 8003f54:	70bb      	strb	r3, [r7, #2]
      break;
 8003f56:	e01d      	b.n	8003f94 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	4798      	blx	r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	70fb      	strb	r3, [r7, #3]
      break;
 8003f6a:	e013      	b.n	8003f94 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	78bb      	ldrb	r3, [r7, #2]
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	70bb      	strb	r3, [r7, #2]
      break;
 8003f7e:	e009      	b.n	8003f94 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	4413      	add	r3, r2
 8003f90:	70fb      	strb	r3, [r7, #3]
      break;
 8003f92:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003f94:	883b      	ldrh	r3, [r7, #0]
 8003f96:	78ba      	ldrb	r2, [r7, #2]
 8003f98:	78f9      	ldrb	r1, [r7, #3]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff ff78 	bl	8003e90 <u8g2_font_draw_glyph>
 8003fa0:	4603      	mov	r3, r0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop

08003fac <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	72fb      	strb	r3, [r7, #11]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fc7e 	bl	80048c0 <u8x8_utf8_init>
  sum = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	4798      	blx	r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003fda:	8abb      	ldrh	r3, [r7, #20]
 8003fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d038      	beq.n	8004056 <u8g2_draw_string+0xaa>
      break;
    str++;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003fea:	8abb      	ldrh	r3, [r7, #20]
 8003fec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d0e9      	beq.n	8003fc8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003ff4:	8abb      	ldrh	r3, [r7, #20]
 8003ff6:	7aba      	ldrb	r2, [r7, #10]
 8003ff8:	7af9      	ldrb	r1, [r7, #11]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7ff ff84 	bl	8003f08 <u8g2_DrawGlyph>
 8004000:	4603      	mov	r3, r0
 8004002:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800400a:	2b03      	cmp	r3, #3
 800400c:	d81e      	bhi.n	800404c <u8g2_draw_string+0xa0>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <u8g2_draw_string+0x68>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004025 	.word	0x08004025
 8004018:	0800402f 	.word	0x0800402f
 800401c:	08004039 	.word	0x08004039
 8004020:	08004043 	.word	0x08004043
      {
	case 0:
	  x += delta;
 8004024:	7afa      	ldrb	r2, [r7, #11]
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	4413      	add	r3, r2
 800402a:	72fb      	strb	r3, [r7, #11]
	  break;
 800402c:	e00e      	b.n	800404c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800402e:	7aba      	ldrb	r2, [r7, #10]
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	4413      	add	r3, r2
 8004034:	72bb      	strb	r3, [r7, #10]
	  break;
 8004036:	e009      	b.n	800404c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004038:	7afa      	ldrb	r2, [r7, #11]
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	72fb      	strb	r3, [r7, #11]
	  break;
 8004040:	e004      	b.n	800404c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004042:	7aba      	ldrb	r2, [r7, #10]
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	72bb      	strb	r3, [r7, #10]
	  break;
 800404a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800404c:	7dfa      	ldrb	r2, [r7, #23]
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	4413      	add	r3, r2
 8004052:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004054:	e7b8      	b.n	8003fc8 <u8g2_draw_string+0x1c>
      break;
 8004056:	bf00      	nop
    }
  }
  return sum;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop

08004064 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	72fb      	strb	r3, [r7, #11]
 8004072:	4613      	mov	r3, r2
 8004074:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a06      	ldr	r2, [pc, #24]	; (8004094 <u8g2_DrawStr+0x30>)
 800407a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800407c:	7aba      	ldrb	r2, [r7, #10]
 800407e:	7af9      	ldrb	r1, [r7, #11]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff ff92 	bl	8003fac <u8g2_draw_string>
 8004088:	4603      	mov	r3, r0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	080048dd 	.word	0x080048dd

08004098 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d05d      	beq.n	8004164 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d04d      	beq.n	8004166 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d11c      	bne.n	800410e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 80040e0:	429a      	cmp	r2, r3
 80040e2:	da05      	bge.n	80040f0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 80040fc:	429a      	cmp	r2, r3
 80040fe:	dd32      	ble.n	8004166 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800410c:	e02b      	b.n	8004166 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800411c:	4619      	mov	r1, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004124:	440b      	add	r3, r1
 8004126:	429a      	cmp	r2, r3
 8004128:	da0d      	bge.n	8004146 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8004130:	b2da      	uxtb	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4413      	add	r3, r2
 800413c:	b2db      	uxtb	r3, r3
 800413e:	b25a      	sxtb	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004152:	429a      	cmp	r2, r3
 8004154:	dd07      	ble.n	8004166 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004162:	e000      	b.n	8004166 <u8g2_UpdateRefHeight+0xce>
    return;
 8004164:	bf00      	nop
  }  
}
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  return 0;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <u8g2_SetFontPosBaseline+0x1c>)
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	08004171 	.word	0x08004171

080041a8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d00b      	beq.n	80041d4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3368      	adds	r3, #104	; 0x68
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff faa1 	bl	8003710 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ff62 	bl	8004098 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	460b      	mov	r3, r1
 800420c:	71fb      	strb	r3, [r7, #7]
 800420e:	4613      	mov	r3, r2
 8004210:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	7dbb      	ldrb	r3, [r7, #22]
 8004222:	4413      	add	r3, r2
 8004224:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004226:	7dfa      	ldrb	r2, [r7, #23]
 8004228:	7dbb      	ldrb	r3, [r7, #22]
 800422a:	429a      	cmp	r2, r3
 800422c:	d90b      	bls.n	8004246 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800422e:	7dfa      	ldrb	r2, [r7, #23]
 8004230:	79bb      	ldrb	r3, [r7, #6]
 8004232:	429a      	cmp	r2, r3
 8004234:	d205      	bcs.n	8004242 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004236:	79bb      	ldrb	r3, [r7, #6]
 8004238:	75bb      	strb	r3, [r7, #22]
      b--;
 800423a:	7dbb      	ldrb	r3, [r7, #22]
 800423c:	3b01      	subs	r3, #1
 800423e:	75bb      	strb	r3, [r7, #22]
 8004240:	e001      	b.n	8004246 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004246:	7dfa      	ldrb	r2, [r7, #23]
 8004248:	79bb      	ldrb	r3, [r7, #6]
 800424a:	429a      	cmp	r2, r3
 800424c:	d301      	bcc.n	8004252 <u8g2_clip_intersection2+0x56>
    return 0;
 800424e:	2300      	movs	r3, #0
 8004250:	e01c      	b.n	800428c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004252:	7dba      	ldrb	r2, [r7, #22]
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	429a      	cmp	r2, r3
 8004258:	d801      	bhi.n	800425e <u8g2_clip_intersection2+0x62>
    return 0;
 800425a:	2300      	movs	r3, #0
 800425c:	e016      	b.n	800428c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800425e:	7dfa      	ldrb	r2, [r7, #23]
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	429a      	cmp	r2, r3
 8004264:	d201      	bcs.n	800426a <u8g2_clip_intersection2+0x6e>
    a = c;
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 800426a:	7dba      	ldrb	r2, [r7, #22]
 800426c:	79bb      	ldrb	r3, [r7, #6]
 800426e:	429a      	cmp	r2, r3
 8004270:	d901      	bls.n	8004276 <u8g2_clip_intersection2+0x7a>
    b = d;
 8004272:	79bb      	ldrb	r3, [r7, #6]
 8004274:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	7dfa      	ldrb	r2, [r7, #23]
 800427a:	701a      	strb	r2, [r3, #0]
  b -= a;
 800427c:	7dba      	ldrb	r2, [r7, #22]
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	7dba      	ldrb	r2, [r7, #22]
 8004288:	701a      	strb	r2, [r3, #0]
  return 1;
 800428a:	2301      	movs	r3, #1
}
 800428c:	4618      	mov	r0, r3
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b085      	sub	sp, #20
 800429c:	af02      	add	r7, sp, #8
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	70fb      	strb	r3, [r7, #3]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70bb      	strb	r3, [r7, #2]
 80042ae:	4613      	mov	r3, r2
 80042b0:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b8:	78ba      	ldrb	r2, [r7, #2]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80042c2:	7878      	ldrb	r0, [r7, #1]
 80042c4:	78ba      	ldrb	r2, [r7, #2]
 80042c6:	78f9      	ldrb	r1, [r7, #3]
 80042c8:	7e3b      	ldrb	r3, [r7, #24]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	4603      	mov	r3, r0
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	47a0      	blx	r4
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd90      	pop	{r4, r7, pc}

080042da <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80042da:	b590      	push	{r4, r7, lr}
 80042dc:	b085      	sub	sp, #20
 80042de:	af02      	add	r7, sp, #8
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	4608      	mov	r0, r1
 80042e4:	4611      	mov	r1, r2
 80042e6:	461a      	mov	r2, r3
 80042e8:	4603      	mov	r3, r0
 80042ea:	70fb      	strb	r3, [r7, #3]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70bb      	strb	r3, [r7, #2]
 80042f0:	4613      	mov	r3, r2
 80042f2:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d06d      	beq.n	80043da <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80042fe:	787b      	ldrb	r3, [r7, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d06a      	beq.n	80043da <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004304:	787b      	ldrb	r3, [r7, #1]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d918      	bls.n	800433c <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800430a:	7e3b      	ldrb	r3, [r7, #24]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d109      	bne.n	8004324 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	787b      	ldrb	r3, [r7, #1]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	70fb      	strb	r3, [r7, #3]
	  x++;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	3301      	adds	r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	70fb      	strb	r3, [r7, #3]
 8004322:	e00b      	b.n	800433c <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8004324:	7e3b      	ldrb	r3, [r7, #24]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d108      	bne.n	800433c <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 800432a:	78ba      	ldrb	r2, [r7, #2]
 800432c:	787b      	ldrb	r3, [r7, #1]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	70bb      	strb	r3, [r7, #2]
	  y++;
 8004334:	78bb      	ldrb	r3, [r7, #2]
 8004336:	3301      	adds	r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 800433c:	7e3b      	ldrb	r3, [r7, #24]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004344:	7e3b      	ldrb	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8004350:	78bb      	ldrb	r3, [r7, #2]
 8004352:	429a      	cmp	r2, r3
 8004354:	d838      	bhi.n	80043c8 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800435c:	78bb      	ldrb	r3, [r7, #2]
 800435e:	429a      	cmp	r2, r3
 8004360:	d934      	bls.n	80043cc <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800436e:	1c79      	adds	r1, r7, #1
 8004370:	1cf8      	adds	r0, r7, #3
 8004372:	f7ff ff43 	bl	80041fc <u8g2_clip_intersection2>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d119      	bne.n	80043b0 <u8g2_DrawHVLine+0xd6>
	  return;
 800437c:	e02d      	b.n	80043da <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	429a      	cmp	r2, r3
 8004388:	d822      	bhi.n	80043d0 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	429a      	cmp	r2, r3
 8004394:	d91e      	bls.n	80043d4 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80043a2:	1c79      	adds	r1, r7, #1
 80043a4:	1cb8      	adds	r0, r7, #2
 80043a6:	f7ff ff29 	bl	80041fc <u8g2_clip_intersection2>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d013      	beq.n	80043d8 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	689c      	ldr	r4, [r3, #8]
 80043b6:	78f9      	ldrb	r1, [r7, #3]
 80043b8:	78ba      	ldrb	r2, [r7, #2]
 80043ba:	7878      	ldrb	r0, [r7, #1]
 80043bc:	7e3b      	ldrb	r3, [r7, #24]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4603      	mov	r3, r0
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	47a0      	blx	r4
 80043c6:	e008      	b.n	80043da <u8g2_DrawHVLine+0x100>
	  return;
 80043c8:	bf00      	nop
 80043ca:	e006      	b.n	80043da <u8g2_DrawHVLine+0x100>
	  return;
 80043cc:	bf00      	nop
 80043ce:	e004      	b.n	80043da <u8g2_DrawHVLine+0x100>
	  return;
 80043d0:	bf00      	nop
 80043d2:	e002      	b.n	80043da <u8g2_DrawHVLine+0x100>
	  return;
 80043d4:	bf00      	nop
 80043d6:	e000      	b.n	80043da <u8g2_DrawHVLine+0x100>
	  return;
 80043d8:	bf00      	nop
    }
}
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd90      	pop	{r4, r7, pc}

080043e0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80043e0:	b490      	push	{r4, r7}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	71fb      	strb	r3, [r7, #7]
 80043f2:	4603      	mov	r3, r0
 80043f4:	71bb      	strb	r3, [r7, #6]
 80043f6:	460b      	mov	r3, r1
 80043f8:	717b      	strb	r3, [r7, #5]
 80043fa:	4613      	mov	r3, r2
 80043fc:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80043fe:	797a      	ldrb	r2, [r7, #5]
 8004400:	79bb      	ldrb	r3, [r7, #6]
 8004402:	429a      	cmp	r2, r3
 8004404:	d20d      	bcs.n	8004422 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004406:	793a      	ldrb	r2, [r7, #4]
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	429a      	cmp	r2, r3
 800440c:	d901      	bls.n	8004412 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800440e:	2301      	movs	r3, #1
 8004410:	e014      	b.n	800443c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004412:	797a      	ldrb	r2, [r7, #5]
 8004414:	793b      	ldrb	r3, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d901      	bls.n	800441e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800441a:	2301      	movs	r3, #1
 800441c:	e00e      	b.n	800443c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800441e:	2300      	movs	r3, #0
 8004420:	e00c      	b.n	800443c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004422:	793a      	ldrb	r2, [r7, #4]
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	429a      	cmp	r2, r3
 8004428:	d907      	bls.n	800443a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800442a:	797a      	ldrb	r2, [r7, #5]
 800442c:	793b      	ldrb	r3, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d901      	bls.n	8004436 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004432:	2301      	movs	r3, #1
 8004434:	e002      	b.n	800443c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800443a:	2300      	movs	r3, #0
    }
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bc90      	pop	{r4, r7}
 8004444:	4770      	bx	lr

08004446 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	4608      	mov	r0, r1
 8004450:	4611      	mov	r1, r2
 8004452:	461a      	mov	r2, r3
 8004454:	4603      	mov	r3, r0
 8004456:	70fb      	strb	r3, [r7, #3]
 8004458:	460b      	mov	r3, r1
 800445a:	70bb      	strb	r3, [r7, #2]
 800445c:	4613      	mov	r3, r2
 800445e:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800446c:	7c3b      	ldrb	r3, [r7, #16]
 800446e:	78ba      	ldrb	r2, [r7, #2]
 8004470:	f7ff ffb6 	bl	80043e0 <u8g2_is_intersection_decision_tree>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <u8g2_IsIntersection+0x38>
    return 0; 
 800447a:	2300      	movs	r3, #0
 800447c:	e00a      	b.n	8004494 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800448a:	787b      	ldrb	r3, [r7, #1]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	f7ff ffa7 	bl	80043e0 <u8g2_is_intersection_decision_tree>
 8004492:	4603      	mov	r3, r0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	4608      	mov	r0, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	461a      	mov	r2, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	70fb      	strb	r3, [r7, #3]
 80044ae:	460b      	mov	r3, r1
 80044b0:	70bb      	strb	r3, [r7, #2]
 80044b2:	4613      	mov	r3, r2
 80044b4:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80044b6:	78bb      	ldrb	r3, [r7, #2]
 80044b8:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80044ba:	7cfb      	ldrb	r3, [r7, #19]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80044c6:	7c3a      	ldrb	r2, [r7, #16]
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d801      	bhi.n	80044e6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80044e2:	7c3b      	ldrb	r3, [r7, #16]
 80044e4:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d001      	beq.n	80044f4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80044f0:	7c3b      	ldrb	r3, [r7, #16]
 80044f2:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80044f4:	78bb      	ldrb	r3, [r7, #2]
 80044f6:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80044f8:	89fb      	ldrh	r3, [r7, #14]
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	7c1b      	ldrb	r3, [r3, #16]
 8004506:	b29b      	uxth	r3, r3
 8004508:	89fa      	ldrh	r2, [r7, #14]
 800450a:	fb12 f303 	smulbb	r3, r2, r3
 800450e:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8004516:	89fb      	ldrh	r3, [r7, #14]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
  ptr += x;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4413      	add	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8004526:	f897 3020 	ldrb.w	r3, [r7, #32]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d117      	bne.n	800455e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	7cbb      	ldrb	r3, [r7, #18]
 8004534:	4313      	orrs	r3, r2
 8004536:	b2da      	uxtb	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	781a      	ldrb	r2, [r3, #0]
 8004540:	7c7b      	ldrb	r3, [r7, #17]
 8004542:	4053      	eors	r3, r2
 8004544:	b2da      	uxtb	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	701a      	strb	r2, [r3, #0]
	ptr++;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	3301      	adds	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
	len--;
 8004550:	787b      	ldrb	r3, [r7, #1]
 8004552:	3b01      	subs	r3, #1
 8004554:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8004556:	787b      	ldrb	r3, [r7, #1]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e8      	bne.n	800452e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800455c:	e039      	b.n	80045d2 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	7cbb      	ldrb	r3, [r7, #18]
 8004564:	4313      	orrs	r3, r2
 8004566:	b2da      	uxtb	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	7c7b      	ldrb	r3, [r7, #17]
 8004572:	4053      	eors	r3, r2
 8004574:	b2da      	uxtb	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	3301      	adds	r3, #1
 800457e:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	74fb      	strb	r3, [r7, #19]
      len--;
 8004588:	787b      	ldrb	r3, [r7, #1]
 800458a:	3b01      	subs	r3, #1
 800458c:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d115      	bne.n	80045c0 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459a:	461a      	mov	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d801      	bhi.n	80045b0 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d008      	beq.n	80045cc <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	747b      	strb	r3, [r7, #17]
 80045be:	e005      	b.n	80045cc <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80045c0:	7cbb      	ldrb	r3, [r7, #18]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80045c6:	7c7b      	ldrb	r3, [r7, #17]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80045cc:	787b      	ldrb	r3, [r7, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1c5      	bne.n	800455e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	22ff      	movs	r2, #255	; 0xff
 80045fa:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	22ff      	movs	r2, #255	; 0xff
 8004602:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	79fa      	ldrb	r2, [r7, #7]
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff ffaf 	bl	80045de <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff fd81 	bl	8004188 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046aa:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	7c1b      	ldrb	r3, [r3, #16]
 80046be:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b1f      	cmp	r3, #31
 80046c4:	d901      	bls.n	80046ca <u8g2_update_dimension_common+0x34>
    t = 31;
 80046c6:	231f      	movs	r3, #31
 80046c8:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046de:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80046fe:	4413      	add	r3, r2
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	7c52      	ldrb	r2, [r2, #17]
 8004704:	4293      	cmp	r3, r2
 8004706:	dd06      	ble.n	8004716 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	7c5a      	ldrb	r2, [r3, #17]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	4413      	add	r3, r2
 800473e:	b2da      	uxtb	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	22f0      	movs	r2, #240	; 0xf0
 800474a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	8a9b      	ldrh	r3, [r3, #20]
 8004752:	2bf0      	cmp	r3, #240	; 0xf0
 8004754:	d805      	bhi.n	8004762 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	8a9b      	ldrh	r3, [r3, #20]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	8adb      	ldrh	r3, [r3, #22]
 8004766:	b2da      	uxtb	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af02      	add	r7, sp, #8
 8004780:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fe51 	bl	8004446 <u8g2_IsIntersection>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d104      	bne.n	80047b4 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80047b2:	e03b      	b.n	800482c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d205      	bcs.n	80047d8 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d905      	bls.n	80047f4 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004800:	429a      	cmp	r2, r3
 8004802:	d205      	bcs.n	8004810 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800481c:	429a      	cmp	r2, r3
 800481e:	d905      	bls.n	800482c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff2a 	bl	8004696 <u8g2_update_dimension_common>
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff7b 	bl	800477a <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	4608      	mov	r0, r1
 8004896:	4611      	mov	r1, r2
 8004898:	461a      	mov	r2, r3
 800489a:	4603      	mov	r3, r0
 800489c:	70fb      	strb	r3, [r7, #3]
 800489e:	460b      	mov	r3, r1
 80048a0:	70bb      	strb	r3, [r7, #2]
 80048a2:	4613      	mov	r3, r2
 80048a4:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80048a6:	7878      	ldrb	r0, [r7, #1]
 80048a8:	78ba      	ldrb	r2, [r7, #2]
 80048aa:	78f9      	ldrb	r1, [r7, #3]
 80048ac:	7c3b      	ldrb	r3, [r7, #16]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	4603      	mov	r3, r0
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff fcf0 	bl	8004298 <u8g2_draw_hv_line_2dir>
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <u8x8_ascii_next+0x18>
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	2b0a      	cmp	r3, #10
 80048f2:	d102      	bne.n	80048fa <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80048f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048f8:	e001      	b.n	80048fe <u8x8_ascii_next+0x22>
  return b;
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	b29b      	uxth	r3, r3
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800490a:	b590      	push	{r4, r7, lr}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691c      	ldr	r4, [r3, #16]
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	2300      	movs	r3, #0
 800491e:	2120      	movs	r1, #32
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	47a0      	blx	r4
 8004924:	4603      	mov	r3, r0
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bd90      	pop	{r4, r7, pc}

0800492e <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800492e:	b590      	push	{r4, r7, lr}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	460b      	mov	r3, r1
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691c      	ldr	r4, [r3, #16]
 8004940:	7afa      	ldrb	r2, [r7, #11]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2117      	movs	r1, #23
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	47a0      	blx	r4
 800494a:	4603      	mov	r3, r0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bd90      	pop	{r4, r7, pc}

08004954 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004960:	1cfb      	adds	r3, r7, #3
 8004962:	461a      	mov	r2, r3
 8004964:	2101      	movs	r1, #1
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ffe1 	bl	800492e <u8x8_byte_SendBytes>
 800496c:	4603      	mov	r3, r0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004976:	b590      	push	{r4, r7, lr}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68dc      	ldr	r4, [r3, #12]
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	2300      	movs	r3, #0
 800498a:	2115      	movs	r1, #21
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	47a0      	blx	r4
 8004990:	4603      	mov	r3, r0
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	bd90      	pop	{r4, r7, pc}

0800499a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800499a:	b590      	push	{r4, r7, lr}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68dc      	ldr	r4, [r3, #12]
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	2300      	movs	r3, #0
 80049ae:	2116      	movs	r1, #22
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	47a0      	blx	r4
 80049b4:	4603      	mov	r3, r0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd90      	pop	{r4, r7, pc}

080049be <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80049be:	b590      	push	{r4, r7, lr}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	460b      	mov	r3, r1
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68dc      	ldr	r4, [r3, #12]
 80049d0:	7afa      	ldrb	r2, [r7, #11]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2117      	movs	r1, #23
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	47a0      	blx	r4
 80049da:	4603      	mov	r3, r0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd90      	pop	{r4, r7, pc}

080049e4 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68dc      	ldr	r4, [r3, #12]
 80049f0:	2300      	movs	r3, #0
 80049f2:	2200      	movs	r2, #0
 80049f4:	2118      	movs	r1, #24
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	47a0      	blx	r4
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd90      	pop	{r4, r7, pc}

08004a04 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68dc      	ldr	r4, [r3, #12]
 8004a10:	2300      	movs	r3, #0
 8004a12:	2200      	movs	r2, #0
 8004a14:	2119      	movs	r1, #25
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	47a0      	blx	r4
 8004a1a:	4603      	mov	r3, r0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd90      	pop	{r4, r7, pc}

08004a24 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	73fb      	strb	r3, [r7, #15]
    data++;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	3301      	adds	r3, #1
 8004a38:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	2bfe      	cmp	r3, #254	; 0xfe
 8004a3e:	d031      	beq.n	8004aa4 <u8x8_cad_SendSequence+0x80>
 8004a40:	2bfe      	cmp	r3, #254	; 0xfe
 8004a42:	dc3d      	bgt.n	8004ac0 <u8x8_cad_SendSequence+0x9c>
 8004a44:	2b19      	cmp	r3, #25
 8004a46:	dc3b      	bgt.n	8004ac0 <u8x8_cad_SendSequence+0x9c>
 8004a48:	2b18      	cmp	r3, #24
 8004a4a:	da23      	bge.n	8004a94 <u8x8_cad_SendSequence+0x70>
 8004a4c:	2b16      	cmp	r3, #22
 8004a4e:	dc02      	bgt.n	8004a56 <u8x8_cad_SendSequence+0x32>
 8004a50:	2b15      	cmp	r3, #21
 8004a52:	da03      	bge.n	8004a5c <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004a54:	e034      	b.n	8004ac0 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004a56:	2b17      	cmp	r3, #23
 8004a58:	d00e      	beq.n	8004a78 <u8x8_cad_SendSequence+0x54>
	return;
 8004a5a:	e031      	b.n	8004ac0 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68dc      	ldr	r4, [r3, #12]
 8004a66:	7bba      	ldrb	r2, [r7, #14]
 8004a68:	7bf9      	ldrb	r1, [r7, #15]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	47a0      	blx	r4
	  data++;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	603b      	str	r3, [r7, #0]
	  break;
 8004a76:	e022      	b.n	8004abe <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004a7e:	f107 030e 	add.w	r3, r7, #14
 8004a82:	461a      	mov	r2, r3
 8004a84:	2101      	movs	r1, #1
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff ff99 	bl	80049be <u8x8_cad_SendData>
	  data++;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	603b      	str	r3, [r7, #0]
	  break;
 8004a92:	e014      	b.n	8004abe <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68dc      	ldr	r4, [r3, #12]
 8004a98:	7bf9      	ldrb	r1, [r7, #15]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	47a0      	blx	r4
	  break;
 8004aa2:	e00c      	b.n	8004abe <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004aaa:	7bbb      	ldrb	r3, [r7, #14]
 8004aac:	461a      	mov	r2, r3
 8004aae:	2129      	movs	r1, #41	; 0x29
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa3c 	bl	8004f2e <u8x8_gpio_call>
	  data++;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	603b      	str	r3, [r7, #0]
	  break;
 8004abc:	bf00      	nop
    cmd = *data;
 8004abe:	e7b6      	b.n	8004a2e <u8x8_cad_SendSequence+0xa>
	return;
 8004ac0:	bf00      	nop
    }
  }
}
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd90      	pop	{r4, r7, pc}

08004ac8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	72fb      	strb	r3, [r7, #11]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8004ada:	7afb      	ldrb	r3, [r7, #11]
 8004adc:	3b14      	subs	r3, #20
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d82f      	bhi.n	8004b42 <u8x8_cad_001+0x7a>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <u8x8_cad_001+0x20>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b01 	.word	0x08004b01
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b31 	.word	0x08004b31
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004b00:	2100      	movs	r1, #0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff ff01 	bl	800490a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004b08:	7abb      	ldrb	r3, [r7, #10]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff ff21 	bl	8004954 <u8x8_byte_SendByte>
      break;
 8004b12:	e018      	b.n	8004b46 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004b14:	2100      	movs	r1, #0
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff fef7 	bl	800490a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004b1c:	7abb      	ldrb	r3, [r7, #10]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ff17 	bl	8004954 <u8x8_byte_SendByte>
      break;
 8004b26:	e00e      	b.n	8004b46 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8004b28:	2101      	movs	r1, #1
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff feed 	bl	800490a <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691c      	ldr	r4, [r3, #16]
 8004b34:	7aba      	ldrb	r2, [r7, #10]
 8004b36:	7af9      	ldrb	r1, [r7, #11]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	47a0      	blx	r4
 8004b3e:	4603      	mov	r3, r0
 8004b40:	e002      	b.n	8004b48 <u8x8_cad_001+0x80>
    default:
      return 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	e000      	b.n	8004b48 <u8x8_cad_001+0x80>
  }
  return 1;
 8004b46:	2301      	movs	r3, #1
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd90      	pop	{r4, r7, pc}

08004b50 <u8x8_ssd1327_8to32>:
*/

static uint8_t u8x8_ssd1327_8to32_dest_buf[32];

static uint8_t *u8x8_ssd1327_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	74fb      	strb	r3, [r7, #19]
 8004b5e:	e03d      	b.n	8004bdc <u8x8_ssd1327_8to32+0x8c>
  {
    dest = u8x8_ssd1327_8to32_dest_buf;
 8004b60:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <u8x8_ssd1327_8to32+0xa0>)
 8004b62:	60fb      	str	r3, [r7, #12]
    dest += j;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	75bb      	strb	r3, [r7, #22]
    ptr++;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	603b      	str	r3, [r7, #0]
    b = *ptr;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	757b      	strb	r3, [r7, #21]
    ptr++;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 8004b84:	2300      	movs	r3, #0
 8004b86:	753b      	strb	r3, [r7, #20]
 8004b88:	e022      	b.n	8004bd0 <u8x8_ssd1327_8to32+0x80>
    {
      v = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 8004b8e:	7dbb      	ldrb	r3, [r7, #22]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <u8x8_ssd1327_8to32+0x50>
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	f063 030f 	orn	r3, r3, #15
 8004b9e:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 8004ba0:	7d7b      	ldrb	r3, [r7, #21]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <u8x8_ssd1327_8to32+0x62>
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	f043 030f 	orr.w	r3, r3, #15
 8004bb0:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	7dfa      	ldrb	r2, [r7, #23]
 8004bb6:	701a      	strb	r2, [r3, #0]
      dest+=4;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 8004bbe:	7dbb      	ldrb	r3, [r7, #22]
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 8004bc4:	7d7b      	ldrb	r3, [r7, #21]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 8004bca:	7d3b      	ldrb	r3, [r7, #20]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	753b      	strb	r3, [r7, #20]
 8004bd0:	7d3b      	ldrb	r3, [r7, #20]
 8004bd2:	2b07      	cmp	r3, #7
 8004bd4:	d9d9      	bls.n	8004b8a <u8x8_ssd1327_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	74fb      	strb	r3, [r7, #19]
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d9be      	bls.n	8004b60 <u8x8_ssd1327_8to32+0x10>
    }
  }
  
  return u8x8_ssd1327_8to32_dest_buf;
 8004be2:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <u8x8_ssd1327_8to32+0xa0>)
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000a40 	.word	0x20000a40

08004bf4 <u8x8_d_ssd1327_96x96_generic>:




static uint8_t u8x8_d_ssd1327_96x96_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	72fb      	strb	r3, [r7, #11]
 8004c02:	4613      	mov	r3, r2
 8004c04:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8004c06:	7afb      	ldrb	r3, [r7, #11]
 8004c08:	2b0f      	cmp	r3, #15
 8004c0a:	d023      	beq.n	8004c54 <u8x8_d_ssd1327_96x96_generic+0x60>
 8004c0c:	2b0f      	cmp	r3, #15
 8004c0e:	dc7e      	bgt.n	8004d0e <u8x8_d_ssd1327_96x96_generic+0x11a>
 8004c10:	2b0b      	cmp	r3, #11
 8004c12:	d002      	beq.n	8004c1a <u8x8_d_ssd1327_96x96_generic+0x26>
 8004c14:	2b0e      	cmp	r3, #14
 8004c16:	d00d      	beq.n	8004c34 <u8x8_d_ssd1327_96x96_generic+0x40>
 8004c18:	e079      	b.n	8004d0e <u8x8_d_ssd1327_96x96_generic+0x11a>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004c1a:	7abb      	ldrb	r3, [r7, #10]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <u8x8_d_ssd1327_96x96_generic+0x36>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave0_seq);
 8004c20:	493e      	ldr	r1, [pc, #248]	; (8004d1c <u8x8_d_ssd1327_96x96_generic+0x128>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff fefe 	bl	8004a24 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave1_seq);
      break;
 8004c28:	e073      	b.n	8004d12 <u8x8_d_ssd1327_96x96_generic+0x11e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_96x96_powersave1_seq);
 8004c2a:	493d      	ldr	r1, [pc, #244]	; (8004d20 <u8x8_d_ssd1327_96x96_generic+0x12c>)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff fef9 	bl	8004a24 <u8x8_cad_SendSequence>
      break;
 8004c32:	e06e      	b.n	8004d12 <u8x8_d_ssd1327_96x96_generic+0x11e>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff fed5 	bl	80049e4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004c3a:	2181      	movs	r1, #129	; 0x81
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fe9a 	bl	8004976 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1327 has range from 0 to 255 */
 8004c42:	7abb      	ldrb	r3, [r7, #10]
 8004c44:	4619      	mov	r1, r3
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fea7 	bl	800499a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7ff fed9 	bl	8004a04 <u8x8_cad_EndTransfer>
      break;
 8004c52:	e05e      	b.n	8004d12 <u8x8_d_ssd1327_96x96_generic+0x11e>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fec5 	bl	80049e4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	795b      	ldrb	r3, [r3, #5]
 8004c5e:	77fb      	strb	r3, [r7, #31]
      x *= 4;
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
      x+=u8x8->x_offset/2;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	7ffb      	ldrb	r3, [r7, #31]
 8004c72:	4413      	add	r3, r2
 8004c74:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	799b      	ldrb	r3, [r3, #6]
 8004c7a:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8004c82:	2175      	movs	r1, #117	; 0x75
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7ff fe76 	bl	8004976 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7ff fe83 	bl	800499a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	3307      	adds	r3, #7
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f7ff fe7c 	bl	800499a <u8x8_cad_SendArg>
	  
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	791b      	ldrb	r3, [r3, #4]
 8004ca6:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 8004cae:	2115      	movs	r1, #21
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff fe60 	bl	8004976 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 8004cb6:	7ffb      	ldrb	r3, [r7, #31]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f7ff fe6d 	bl	800499a <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+3 );	/* end */
 8004cc0:	7ffb      	ldrb	r3, [r7, #31]
 8004cc2:	3303      	adds	r3, #3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fe66 	bl	800499a <u8x8_cad_SendArg>

	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1327_8to32(u8x8, ptr));
 8004cce:	69b9      	ldr	r1, [r7, #24]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff ff3d 	bl	8004b50 <u8x8_ssd1327_8to32>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2120      	movs	r1, #32
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7ff fe6e 	bl	80049be <u8x8_cad_SendData>
	  ptr += 8;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	61bb      	str	r3, [r7, #24]
	  x += 4;
 8004ce8:	7ffb      	ldrb	r3, [r7, #31]
 8004cea:	3304      	adds	r3, #4
 8004cec:	77fb      	strb	r3, [r7, #31]
	  c--;
 8004cee:	7fbb      	ldrb	r3, [r7, #30]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 8004cf4:	7fbb      	ldrb	r3, [r7, #30]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1d9      	bne.n	8004cae <u8x8_d_ssd1327_96x96_generic+0xba>
	
	//x += 4;
	arg_int--;
 8004cfa:	7abb      	ldrb	r3, [r7, #10]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004d00:	7abb      	ldrb	r3, [r7, #10]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1cd      	bne.n	8004ca2 <u8x8_d_ssd1327_96x96_generic+0xae>
      
      u8x8_cad_EndTransfer(u8x8);
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff fe7c 	bl	8004a04 <u8x8_cad_EndTransfer>
      break;
 8004d0c:	e001      	b.n	8004d12 <u8x8_d_ssd1327_96x96_generic+0x11e>
    default:
      return 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <u8x8_d_ssd1327_96x96_generic+0x120>
  }
  return 1;
 8004d12:	2301      	movs	r3, #1
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	080063f4 	.word	0x080063f4
 8004d20:	080063fc 	.word	0x080063fc

08004d24 <u8x8_d_ssd1327_ea_w128128>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_ssd1327_ea_w128128(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	72fb      	strb	r3, [r7, #11]
 8004d32:	4613      	mov	r3, r2
 8004d34:	72bb      	strb	r3, [r7, #10]
  if ( u8x8_d_ssd1327_96x96_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004d36:	7aba      	ldrb	r2, [r7, #10]
 8004d38:	7af9      	ldrb	r1, [r7, #11]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff ff59 	bl	8004bf4 <u8x8_d_ssd1327_96x96_generic>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <u8x8_d_ssd1327_ea_w128128+0x28>
    return 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e032      	b.n	8004db2 <u8x8_d_ssd1327_ea_w128128+0x8e>
  if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	2b09      	cmp	r3, #9
 8004d50:	d105      	bne.n	8004d5e <u8x8_d_ssd1327_ea_w128128+0x3a>
  {
    u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1327_ea_w128128_display_info);
 8004d52:	491a      	ldr	r1, [pc, #104]	; (8004dbc <u8x8_d_ssd1327_ea_w128128+0x98>)
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f839 	bl	8004dcc <u8x8_d_helper_display_setup_memory>
    return 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e029      	b.n	8004db2 <u8x8_d_ssd1327_ea_w128128+0x8e>
  }
  else if ( msg == U8X8_MSG_DISPLAY_INIT )
 8004d5e:	7afb      	ldrb	r3, [r7, #11]
 8004d60:	2b0a      	cmp	r3, #10
 8004d62:	d108      	bne.n	8004d76 <u8x8_d_ssd1327_ea_w128128+0x52>
  {
    u8x8_d_helper_display_init(u8x8);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f845 	bl	8004df4 <u8x8_d_helper_display_init>
    u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_init_seq);    
 8004d6a:	4915      	ldr	r1, [pc, #84]	; (8004dc0 <u8x8_d_ssd1327_ea_w128128+0x9c>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff fe59 	bl	8004a24 <u8x8_cad_SendSequence>
    return 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e01d      	b.n	8004db2 <u8x8_d_ssd1327_ea_w128128+0x8e>
  }
  else if  ( msg == U8X8_MSG_DISPLAY_SET_FLIP_MODE )
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	2b0d      	cmp	r3, #13
 8004d7a:	d119      	bne.n	8004db0 <u8x8_d_ssd1327_ea_w128128+0x8c>
  {
    if ( arg_int == 0 )
 8004d7c:	7abb      	ldrb	r3, [r7, #10]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <u8x8_d_ssd1327_ea_w128128+0x74>
    {
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip0_seq);
 8004d82:	4910      	ldr	r1, [pc, #64]	; (8004dc4 <u8x8_d_ssd1327_ea_w128128+0xa0>)
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff fe4d 	bl	8004a24 <u8x8_cad_SendSequence>
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	7c9a      	ldrb	r2, [r3, #18]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004d96:	e009      	b.n	8004dac <u8x8_d_ssd1327_ea_w128128+0x88>
    }
    else
    {
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1327_ea_w128128_flip1_seq);
 8004d98:	490b      	ldr	r1, [pc, #44]	; (8004dc8 <u8x8_d_ssd1327_ea_w128128+0xa4>)
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fe42 	bl	8004a24 <u8x8_cad_SendSequence>
      u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	7cda      	ldrb	r2, [r3, #19]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
    return 1;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <u8x8_d_ssd1327_ea_w128128+0x8e>
  }
  return 0;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	08006404 	.word	0x08006404
 8004dc0:	0800641c 	.word	0x0800641c
 8004dc4:	0800645c 	.word	0x0800645c
 8004dc8:	08006468 	.word	0x08006468

08004dcc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	7c9a      	ldrb	r2, [r3, #18]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695c      	ldr	r4, [r3, #20]
 8004e00:	2300      	movs	r3, #0
 8004e02:	2200      	movs	r2, #0
 8004e04:	2128      	movs	r1, #40	; 0x28
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68dc      	ldr	r4, [r3, #12]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2200      	movs	r2, #0
 8004e12:	2114      	movs	r1, #20
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004e18:	2201      	movs	r2, #1
 8004e1a:	214b      	movs	r1, #75	; 0x4b
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f886 	bl	8004f2e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	791b      	ldrb	r3, [r3, #4]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2129      	movs	r1, #41	; 0x29
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f87e 	bl	8004f2e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004e32:	2200      	movs	r2, #0
 8004e34:	214b      	movs	r1, #75	; 0x4b
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f879 	bl	8004f2e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	461a      	mov	r2, r3
 8004e44:	2129      	movs	r1, #41	; 0x29
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f871 	bl	8004f2e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	214b      	movs	r1, #75	; 0x4b
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f86c 	bl	8004f2e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	795b      	ldrb	r3, [r3, #5]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2129      	movs	r1, #41	; 0x29
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f864 	bl	8004f2e <u8x8_gpio_call>
}    
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd90      	pop	{r4, r7, pc}

08004e6e <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004e6e:	b590      	push	{r4, r7, lr}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	4608      	mov	r0, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	70fb      	strb	r3, [r7, #3]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70bb      	strb	r3, [r7, #2]
 8004e84:	4613      	mov	r3, r2
 8004e86:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004e8c:	78bb      	ldrb	r3, [r7, #2]
 8004e8e:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004e90:	787b      	ldrb	r3, [r7, #1]
 8004e92:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689c      	ldr	r4, [r3, #8]
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	210f      	movs	r1, #15
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	47a0      	blx	r4
 8004ea8:	4603      	mov	r3, r0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}

08004eb2 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004eb2:	b590      	push	{r4, r7, lr}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689c      	ldr	r4, [r3, #8]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2109      	movs	r1, #9
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	47a0      	blx	r4
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689c      	ldr	r4, [r3, #8]
 8004edc:	2300      	movs	r3, #0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	210a      	movs	r1, #10
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	47a0      	blx	r4
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd90      	pop	{r4, r7, pc}

08004eee <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004eee:	b590      	push	{r4, r7, lr}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689c      	ldr	r4, [r3, #8]
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	2300      	movs	r3, #0
 8004f02:	210b      	movs	r1, #11
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	47a0      	blx	r4
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd90      	pop	{r4, r7, pc}

08004f10 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689c      	ldr	r4, [r3, #8]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2110      	movs	r1, #16
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	47a0      	blx	r4
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd90      	pop	{r4, r7, pc}

08004f2e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004f2e:	b590      	push	{r4, r7, lr}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70fb      	strb	r3, [r7, #3]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695c      	ldr	r4, [r3, #20]
 8004f42:	78ba      	ldrb	r2, [r7, #2]
 8004f44:	78f9      	ldrb	r1, [r7, #3]
 8004f46:	2300      	movs	r3, #0
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	47a0      	blx	r4
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd90      	pop	{r4, r7, pc}

08004f54 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	72fb      	strb	r3, [r7, #11]
 8004f62:	4613      	mov	r3, r2
 8004f64:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a13      	ldr	r2, [pc, #76]	; (8004fd4 <u8x8_SetupDefaults+0x60>)
 8004f86:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	; (8004fd4 <u8x8_SetupDefaults+0x60>)
 8004f8c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <u8x8_SetupDefaults+0x60>)
 8004f92:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <u8x8_SetupDefaults+0x60>)
 8004f98:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	22ff      	movs	r2, #255	; 0xff
 8004fc4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	08004f55 	.word	0x08004f55

08004fd8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ffc4 	bl	8004f74 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ff54 	bl	8004eb2 <u8x8_SetupMemory>
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800504c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005018:	480d      	ldr	r0, [pc, #52]	; (8005050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800501a:	490e      	ldr	r1, [pc, #56]	; (8005054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800501c:	4a0e      	ldr	r2, [pc, #56]	; (8005058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800501e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005020:	e002      	b.n	8005028 <LoopCopyDataInit>

08005022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005026:	3304      	adds	r3, #4

08005028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800502a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800502c:	d3f9      	bcc.n	8005022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800502e:	4a0b      	ldr	r2, [pc, #44]	; (800505c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005030:	4c0b      	ldr	r4, [pc, #44]	; (8005060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005034:	e001      	b.n	800503a <LoopFillZerobss>

08005036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005038:	3204      	adds	r2, #4

0800503a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800503a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800503c:	d3fb      	bcc.n	8005036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800503e:	f7fe f98b 	bl	8003358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005042:	f000 f97d 	bl	8005340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005046:	f7fd fd37 	bl	8002ab8 <main>
  bx  lr    
 800504a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800504c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005054:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005058:	080064b8 	.word	0x080064b8
  ldr r2, =_sbss
 800505c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005060:	20000bac 	.word	0x20000bac

08005064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005064:	e7fe      	b.n	8005064 <ADC_IRQHandler>
	...

08005068 <std>:
 8005068:	2300      	movs	r3, #0
 800506a:	b510      	push	{r4, lr}
 800506c:	4604      	mov	r4, r0
 800506e:	e9c0 3300 	strd	r3, r3, [r0]
 8005072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005076:	6083      	str	r3, [r0, #8]
 8005078:	8181      	strh	r1, [r0, #12]
 800507a:	6643      	str	r3, [r0, #100]	; 0x64
 800507c:	81c2      	strh	r2, [r0, #14]
 800507e:	6183      	str	r3, [r0, #24]
 8005080:	4619      	mov	r1, r3
 8005082:	2208      	movs	r2, #8
 8005084:	305c      	adds	r0, #92	; 0x5c
 8005086:	f000 f906 	bl	8005296 <memset>
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <std+0x58>)
 800508c:	6263      	str	r3, [r4, #36]	; 0x24
 800508e:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <std+0x5c>)
 8005090:	62a3      	str	r3, [r4, #40]	; 0x28
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <std+0x60>)
 8005094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <std+0x64>)
 8005098:	6323      	str	r3, [r4, #48]	; 0x30
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <std+0x68>)
 800509c:	6224      	str	r4, [r4, #32]
 800509e:	429c      	cmp	r4, r3
 80050a0:	d006      	beq.n	80050b0 <std+0x48>
 80050a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050a6:	4294      	cmp	r4, r2
 80050a8:	d002      	beq.n	80050b0 <std+0x48>
 80050aa:	33d0      	adds	r3, #208	; 0xd0
 80050ac:	429c      	cmp	r4, r3
 80050ae:	d105      	bne.n	80050bc <std+0x54>
 80050b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b8:	f000 b966 	b.w	8005388 <__retarget_lock_init_recursive>
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	bf00      	nop
 80050c0:	08005211 	.word	0x08005211
 80050c4:	08005233 	.word	0x08005233
 80050c8:	0800526b 	.word	0x0800526b
 80050cc:	0800528f 	.word	0x0800528f
 80050d0:	20000a60 	.word	0x20000a60

080050d4 <stdio_exit_handler>:
 80050d4:	4a02      	ldr	r2, [pc, #8]	; (80050e0 <stdio_exit_handler+0xc>)
 80050d6:	4903      	ldr	r1, [pc, #12]	; (80050e4 <stdio_exit_handler+0x10>)
 80050d8:	4803      	ldr	r0, [pc, #12]	; (80050e8 <stdio_exit_handler+0x14>)
 80050da:	f000 b869 	b.w	80051b0 <_fwalk_sglue>
 80050de:	bf00      	nop
 80050e0:	2000002c 	.word	0x2000002c
 80050e4:	08005c35 	.word	0x08005c35
 80050e8:	20000038 	.word	0x20000038

080050ec <cleanup_stdio>:
 80050ec:	6841      	ldr	r1, [r0, #4]
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <cleanup_stdio+0x34>)
 80050f0:	4299      	cmp	r1, r3
 80050f2:	b510      	push	{r4, lr}
 80050f4:	4604      	mov	r4, r0
 80050f6:	d001      	beq.n	80050fc <cleanup_stdio+0x10>
 80050f8:	f000 fd9c 	bl	8005c34 <_fflush_r>
 80050fc:	68a1      	ldr	r1, [r4, #8]
 80050fe:	4b09      	ldr	r3, [pc, #36]	; (8005124 <cleanup_stdio+0x38>)
 8005100:	4299      	cmp	r1, r3
 8005102:	d002      	beq.n	800510a <cleanup_stdio+0x1e>
 8005104:	4620      	mov	r0, r4
 8005106:	f000 fd95 	bl	8005c34 <_fflush_r>
 800510a:	68e1      	ldr	r1, [r4, #12]
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <cleanup_stdio+0x3c>)
 800510e:	4299      	cmp	r1, r3
 8005110:	d004      	beq.n	800511c <cleanup_stdio+0x30>
 8005112:	4620      	mov	r0, r4
 8005114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005118:	f000 bd8c 	b.w	8005c34 <_fflush_r>
 800511c:	bd10      	pop	{r4, pc}
 800511e:	bf00      	nop
 8005120:	20000a60 	.word	0x20000a60
 8005124:	20000ac8 	.word	0x20000ac8
 8005128:	20000b30 	.word	0x20000b30

0800512c <global_stdio_init.part.0>:
 800512c:	b510      	push	{r4, lr}
 800512e:	4b0b      	ldr	r3, [pc, #44]	; (800515c <global_stdio_init.part.0+0x30>)
 8005130:	4c0b      	ldr	r4, [pc, #44]	; (8005160 <global_stdio_init.part.0+0x34>)
 8005132:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <global_stdio_init.part.0+0x38>)
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	4620      	mov	r0, r4
 8005138:	2200      	movs	r2, #0
 800513a:	2104      	movs	r1, #4
 800513c:	f7ff ff94 	bl	8005068 <std>
 8005140:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005144:	2201      	movs	r2, #1
 8005146:	2109      	movs	r1, #9
 8005148:	f7ff ff8e 	bl	8005068 <std>
 800514c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005150:	2202      	movs	r2, #2
 8005152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005156:	2112      	movs	r1, #18
 8005158:	f7ff bf86 	b.w	8005068 <std>
 800515c:	20000b98 	.word	0x20000b98
 8005160:	20000a60 	.word	0x20000a60
 8005164:	080050d5 	.word	0x080050d5

08005168 <__sfp_lock_acquire>:
 8005168:	4801      	ldr	r0, [pc, #4]	; (8005170 <__sfp_lock_acquire+0x8>)
 800516a:	f000 b90e 	b.w	800538a <__retarget_lock_acquire_recursive>
 800516e:	bf00      	nop
 8005170:	20000ba1 	.word	0x20000ba1

08005174 <__sfp_lock_release>:
 8005174:	4801      	ldr	r0, [pc, #4]	; (800517c <__sfp_lock_release+0x8>)
 8005176:	f000 b909 	b.w	800538c <__retarget_lock_release_recursive>
 800517a:	bf00      	nop
 800517c:	20000ba1 	.word	0x20000ba1

08005180 <__sinit>:
 8005180:	b510      	push	{r4, lr}
 8005182:	4604      	mov	r4, r0
 8005184:	f7ff fff0 	bl	8005168 <__sfp_lock_acquire>
 8005188:	6a23      	ldr	r3, [r4, #32]
 800518a:	b11b      	cbz	r3, 8005194 <__sinit+0x14>
 800518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005190:	f7ff bff0 	b.w	8005174 <__sfp_lock_release>
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <__sinit+0x28>)
 8005196:	6223      	str	r3, [r4, #32]
 8005198:	4b04      	ldr	r3, [pc, #16]	; (80051ac <__sinit+0x2c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1f5      	bne.n	800518c <__sinit+0xc>
 80051a0:	f7ff ffc4 	bl	800512c <global_stdio_init.part.0>
 80051a4:	e7f2      	b.n	800518c <__sinit+0xc>
 80051a6:	bf00      	nop
 80051a8:	080050ed 	.word	0x080050ed
 80051ac:	20000b98 	.word	0x20000b98

080051b0 <_fwalk_sglue>:
 80051b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b4:	4607      	mov	r7, r0
 80051b6:	4688      	mov	r8, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	2600      	movs	r6, #0
 80051bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051c0:	f1b9 0901 	subs.w	r9, r9, #1
 80051c4:	d505      	bpl.n	80051d2 <_fwalk_sglue+0x22>
 80051c6:	6824      	ldr	r4, [r4, #0]
 80051c8:	2c00      	cmp	r4, #0
 80051ca:	d1f7      	bne.n	80051bc <_fwalk_sglue+0xc>
 80051cc:	4630      	mov	r0, r6
 80051ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051d2:	89ab      	ldrh	r3, [r5, #12]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d907      	bls.n	80051e8 <_fwalk_sglue+0x38>
 80051d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051dc:	3301      	adds	r3, #1
 80051de:	d003      	beq.n	80051e8 <_fwalk_sglue+0x38>
 80051e0:	4629      	mov	r1, r5
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	4306      	orrs	r6, r0
 80051e8:	3568      	adds	r5, #104	; 0x68
 80051ea:	e7e9      	b.n	80051c0 <_fwalk_sglue+0x10>

080051ec <iprintf>:
 80051ec:	b40f      	push	{r0, r1, r2, r3}
 80051ee:	b507      	push	{r0, r1, r2, lr}
 80051f0:	4906      	ldr	r1, [pc, #24]	; (800520c <iprintf+0x20>)
 80051f2:	ab04      	add	r3, sp, #16
 80051f4:	6808      	ldr	r0, [r1, #0]
 80051f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051fa:	6881      	ldr	r1, [r0, #8]
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	f000 f9e9 	bl	80055d4 <_vfiprintf_r>
 8005202:	b003      	add	sp, #12
 8005204:	f85d eb04 	ldr.w	lr, [sp], #4
 8005208:	b004      	add	sp, #16
 800520a:	4770      	bx	lr
 800520c:	20000084 	.word	0x20000084

08005210 <__sread>:
 8005210:	b510      	push	{r4, lr}
 8005212:	460c      	mov	r4, r1
 8005214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005218:	f000 f868 	bl	80052ec <_read_r>
 800521c:	2800      	cmp	r0, #0
 800521e:	bfab      	itete	ge
 8005220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005222:	89a3      	ldrhlt	r3, [r4, #12]
 8005224:	181b      	addge	r3, r3, r0
 8005226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800522a:	bfac      	ite	ge
 800522c:	6563      	strge	r3, [r4, #84]	; 0x54
 800522e:	81a3      	strhlt	r3, [r4, #12]
 8005230:	bd10      	pop	{r4, pc}

08005232 <__swrite>:
 8005232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005236:	461f      	mov	r7, r3
 8005238:	898b      	ldrh	r3, [r1, #12]
 800523a:	05db      	lsls	r3, r3, #23
 800523c:	4605      	mov	r5, r0
 800523e:	460c      	mov	r4, r1
 8005240:	4616      	mov	r6, r2
 8005242:	d505      	bpl.n	8005250 <__swrite+0x1e>
 8005244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005248:	2302      	movs	r3, #2
 800524a:	2200      	movs	r2, #0
 800524c:	f000 f83c 	bl	80052c8 <_lseek_r>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800525a:	81a3      	strh	r3, [r4, #12]
 800525c:	4632      	mov	r2, r6
 800525e:	463b      	mov	r3, r7
 8005260:	4628      	mov	r0, r5
 8005262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005266:	f000 b853 	b.w	8005310 <_write_r>

0800526a <__sseek>:
 800526a:	b510      	push	{r4, lr}
 800526c:	460c      	mov	r4, r1
 800526e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005272:	f000 f829 	bl	80052c8 <_lseek_r>
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	bf15      	itete	ne
 800527c:	6560      	strne	r0, [r4, #84]	; 0x54
 800527e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005286:	81a3      	strheq	r3, [r4, #12]
 8005288:	bf18      	it	ne
 800528a:	81a3      	strhne	r3, [r4, #12]
 800528c:	bd10      	pop	{r4, pc}

0800528e <__sclose>:
 800528e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005292:	f000 b809 	b.w	80052a8 <_close_r>

08005296 <memset>:
 8005296:	4402      	add	r2, r0
 8005298:	4603      	mov	r3, r0
 800529a:	4293      	cmp	r3, r2
 800529c:	d100      	bne.n	80052a0 <memset+0xa>
 800529e:	4770      	bx	lr
 80052a0:	f803 1b01 	strb.w	r1, [r3], #1
 80052a4:	e7f9      	b.n	800529a <memset+0x4>
	...

080052a8 <_close_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d06      	ldr	r5, [pc, #24]	; (80052c4 <_close_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	602b      	str	r3, [r5, #0]
 80052b4:	f7fd ffe5 	bl	8003282 <_close>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_close_r+0x1a>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_close_r+0x1a>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20000b9c 	.word	0x20000b9c

080052c8 <_lseek_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d07      	ldr	r5, [pc, #28]	; (80052e8 <_lseek_r+0x20>)
 80052cc:	4604      	mov	r4, r0
 80052ce:	4608      	mov	r0, r1
 80052d0:	4611      	mov	r1, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	602a      	str	r2, [r5, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f7fd fffa 	bl	80032d0 <_lseek>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_lseek_r+0x1e>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_lseek_r+0x1e>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	20000b9c 	.word	0x20000b9c

080052ec <_read_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	; (800530c <_read_r+0x20>)
 80052f0:	4604      	mov	r4, r0
 80052f2:	4608      	mov	r0, r1
 80052f4:	4611      	mov	r1, r2
 80052f6:	2200      	movs	r2, #0
 80052f8:	602a      	str	r2, [r5, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7fd ff88 	bl	8003210 <_read>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_read_r+0x1e>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_read_r+0x1e>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	20000b9c 	.word	0x20000b9c

08005310 <_write_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d07      	ldr	r5, [pc, #28]	; (8005330 <_write_r+0x20>)
 8005314:	4604      	mov	r4, r0
 8005316:	4608      	mov	r0, r1
 8005318:	4611      	mov	r1, r2
 800531a:	2200      	movs	r2, #0
 800531c:	602a      	str	r2, [r5, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	f7fd ff93 	bl	800324a <_write>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_write_r+0x1e>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_write_r+0x1e>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20000b9c 	.word	0x20000b9c

08005334 <__errno>:
 8005334:	4b01      	ldr	r3, [pc, #4]	; (800533c <__errno+0x8>)
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000084 	.word	0x20000084

08005340 <__libc_init_array>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4d0d      	ldr	r5, [pc, #52]	; (8005378 <__libc_init_array+0x38>)
 8005344:	4c0d      	ldr	r4, [pc, #52]	; (800537c <__libc_init_array+0x3c>)
 8005346:	1b64      	subs	r4, r4, r5
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	2600      	movs	r6, #0
 800534c:	42a6      	cmp	r6, r4
 800534e:	d109      	bne.n	8005364 <__libc_init_array+0x24>
 8005350:	4d0b      	ldr	r5, [pc, #44]	; (8005380 <__libc_init_array+0x40>)
 8005352:	4c0c      	ldr	r4, [pc, #48]	; (8005384 <__libc_init_array+0x44>)
 8005354:	f000 fdc0 	bl	8005ed8 <_init>
 8005358:	1b64      	subs	r4, r4, r5
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	2600      	movs	r6, #0
 800535e:	42a6      	cmp	r6, r4
 8005360:	d105      	bne.n	800536e <__libc_init_array+0x2e>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	f855 3b04 	ldr.w	r3, [r5], #4
 8005368:	4798      	blx	r3
 800536a:	3601      	adds	r6, #1
 800536c:	e7ee      	b.n	800534c <__libc_init_array+0xc>
 800536e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005372:	4798      	blx	r3
 8005374:	3601      	adds	r6, #1
 8005376:	e7f2      	b.n	800535e <__libc_init_array+0x1e>
 8005378:	080064b0 	.word	0x080064b0
 800537c:	080064b0 	.word	0x080064b0
 8005380:	080064b0 	.word	0x080064b0
 8005384:	080064b4 	.word	0x080064b4

08005388 <__retarget_lock_init_recursive>:
 8005388:	4770      	bx	lr

0800538a <__retarget_lock_acquire_recursive>:
 800538a:	4770      	bx	lr

0800538c <__retarget_lock_release_recursive>:
 800538c:	4770      	bx	lr
	...

08005390 <_free_r>:
 8005390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005392:	2900      	cmp	r1, #0
 8005394:	d044      	beq.n	8005420 <_free_r+0x90>
 8005396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539a:	9001      	str	r0, [sp, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f1a1 0404 	sub.w	r4, r1, #4
 80053a2:	bfb8      	it	lt
 80053a4:	18e4      	addlt	r4, r4, r3
 80053a6:	f000 f8df 	bl	8005568 <__malloc_lock>
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <_free_r+0x94>)
 80053ac:	9801      	ldr	r0, [sp, #4]
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	b933      	cbnz	r3, 80053c0 <_free_r+0x30>
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	6014      	str	r4, [r2, #0]
 80053b6:	b003      	add	sp, #12
 80053b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053bc:	f000 b8da 	b.w	8005574 <__malloc_unlock>
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	d908      	bls.n	80053d6 <_free_r+0x46>
 80053c4:	6825      	ldr	r5, [r4, #0]
 80053c6:	1961      	adds	r1, r4, r5
 80053c8:	428b      	cmp	r3, r1
 80053ca:	bf01      	itttt	eq
 80053cc:	6819      	ldreq	r1, [r3, #0]
 80053ce:	685b      	ldreq	r3, [r3, #4]
 80053d0:	1949      	addeq	r1, r1, r5
 80053d2:	6021      	streq	r1, [r4, #0]
 80053d4:	e7ed      	b.n	80053b2 <_free_r+0x22>
 80053d6:	461a      	mov	r2, r3
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b10b      	cbz	r3, 80053e0 <_free_r+0x50>
 80053dc:	42a3      	cmp	r3, r4
 80053de:	d9fa      	bls.n	80053d6 <_free_r+0x46>
 80053e0:	6811      	ldr	r1, [r2, #0]
 80053e2:	1855      	adds	r5, r2, r1
 80053e4:	42a5      	cmp	r5, r4
 80053e6:	d10b      	bne.n	8005400 <_free_r+0x70>
 80053e8:	6824      	ldr	r4, [r4, #0]
 80053ea:	4421      	add	r1, r4
 80053ec:	1854      	adds	r4, r2, r1
 80053ee:	42a3      	cmp	r3, r4
 80053f0:	6011      	str	r1, [r2, #0]
 80053f2:	d1e0      	bne.n	80053b6 <_free_r+0x26>
 80053f4:	681c      	ldr	r4, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	6053      	str	r3, [r2, #4]
 80053fa:	440c      	add	r4, r1
 80053fc:	6014      	str	r4, [r2, #0]
 80053fe:	e7da      	b.n	80053b6 <_free_r+0x26>
 8005400:	d902      	bls.n	8005408 <_free_r+0x78>
 8005402:	230c      	movs	r3, #12
 8005404:	6003      	str	r3, [r0, #0]
 8005406:	e7d6      	b.n	80053b6 <_free_r+0x26>
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	1961      	adds	r1, r4, r5
 800540c:	428b      	cmp	r3, r1
 800540e:	bf04      	itt	eq
 8005410:	6819      	ldreq	r1, [r3, #0]
 8005412:	685b      	ldreq	r3, [r3, #4]
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	bf04      	itt	eq
 8005418:	1949      	addeq	r1, r1, r5
 800541a:	6021      	streq	r1, [r4, #0]
 800541c:	6054      	str	r4, [r2, #4]
 800541e:	e7ca      	b.n	80053b6 <_free_r+0x26>
 8005420:	b003      	add	sp, #12
 8005422:	bd30      	pop	{r4, r5, pc}
 8005424:	20000ba4 	.word	0x20000ba4

08005428 <sbrk_aligned>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4e0e      	ldr	r6, [pc, #56]	; (8005464 <sbrk_aligned+0x3c>)
 800542c:	460c      	mov	r4, r1
 800542e:	6831      	ldr	r1, [r6, #0]
 8005430:	4605      	mov	r5, r0
 8005432:	b911      	cbnz	r1, 800543a <sbrk_aligned+0x12>
 8005434:	f000 fcbc 	bl	8005db0 <_sbrk_r>
 8005438:	6030      	str	r0, [r6, #0]
 800543a:	4621      	mov	r1, r4
 800543c:	4628      	mov	r0, r5
 800543e:	f000 fcb7 	bl	8005db0 <_sbrk_r>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	d00a      	beq.n	800545c <sbrk_aligned+0x34>
 8005446:	1cc4      	adds	r4, r0, #3
 8005448:	f024 0403 	bic.w	r4, r4, #3
 800544c:	42a0      	cmp	r0, r4
 800544e:	d007      	beq.n	8005460 <sbrk_aligned+0x38>
 8005450:	1a21      	subs	r1, r4, r0
 8005452:	4628      	mov	r0, r5
 8005454:	f000 fcac 	bl	8005db0 <_sbrk_r>
 8005458:	3001      	adds	r0, #1
 800545a:	d101      	bne.n	8005460 <sbrk_aligned+0x38>
 800545c:	f04f 34ff 	mov.w	r4, #4294967295
 8005460:	4620      	mov	r0, r4
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	20000ba8 	.word	0x20000ba8

08005468 <_malloc_r>:
 8005468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800546c:	1ccd      	adds	r5, r1, #3
 800546e:	f025 0503 	bic.w	r5, r5, #3
 8005472:	3508      	adds	r5, #8
 8005474:	2d0c      	cmp	r5, #12
 8005476:	bf38      	it	cc
 8005478:	250c      	movcc	r5, #12
 800547a:	2d00      	cmp	r5, #0
 800547c:	4607      	mov	r7, r0
 800547e:	db01      	blt.n	8005484 <_malloc_r+0x1c>
 8005480:	42a9      	cmp	r1, r5
 8005482:	d905      	bls.n	8005490 <_malloc_r+0x28>
 8005484:	230c      	movs	r3, #12
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	2600      	movs	r6, #0
 800548a:	4630      	mov	r0, r6
 800548c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005490:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005564 <_malloc_r+0xfc>
 8005494:	f000 f868 	bl	8005568 <__malloc_lock>
 8005498:	f8d8 3000 	ldr.w	r3, [r8]
 800549c:	461c      	mov	r4, r3
 800549e:	bb5c      	cbnz	r4, 80054f8 <_malloc_r+0x90>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4638      	mov	r0, r7
 80054a4:	f7ff ffc0 	bl	8005428 <sbrk_aligned>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	4604      	mov	r4, r0
 80054ac:	d155      	bne.n	800555a <_malloc_r+0xf2>
 80054ae:	f8d8 4000 	ldr.w	r4, [r8]
 80054b2:	4626      	mov	r6, r4
 80054b4:	2e00      	cmp	r6, #0
 80054b6:	d145      	bne.n	8005544 <_malloc_r+0xdc>
 80054b8:	2c00      	cmp	r4, #0
 80054ba:	d048      	beq.n	800554e <_malloc_r+0xe6>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	4631      	mov	r1, r6
 80054c0:	4638      	mov	r0, r7
 80054c2:	eb04 0903 	add.w	r9, r4, r3
 80054c6:	f000 fc73 	bl	8005db0 <_sbrk_r>
 80054ca:	4581      	cmp	r9, r0
 80054cc:	d13f      	bne.n	800554e <_malloc_r+0xe6>
 80054ce:	6821      	ldr	r1, [r4, #0]
 80054d0:	1a6d      	subs	r5, r5, r1
 80054d2:	4629      	mov	r1, r5
 80054d4:	4638      	mov	r0, r7
 80054d6:	f7ff ffa7 	bl	8005428 <sbrk_aligned>
 80054da:	3001      	adds	r0, #1
 80054dc:	d037      	beq.n	800554e <_malloc_r+0xe6>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	442b      	add	r3, r5
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	f8d8 3000 	ldr.w	r3, [r8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d038      	beq.n	800555e <_malloc_r+0xf6>
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	42a2      	cmp	r2, r4
 80054f0:	d12b      	bne.n	800554a <_malloc_r+0xe2>
 80054f2:	2200      	movs	r2, #0
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	e00f      	b.n	8005518 <_malloc_r+0xb0>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	1b52      	subs	r2, r2, r5
 80054fc:	d41f      	bmi.n	800553e <_malloc_r+0xd6>
 80054fe:	2a0b      	cmp	r2, #11
 8005500:	d917      	bls.n	8005532 <_malloc_r+0xca>
 8005502:	1961      	adds	r1, r4, r5
 8005504:	42a3      	cmp	r3, r4
 8005506:	6025      	str	r5, [r4, #0]
 8005508:	bf18      	it	ne
 800550a:	6059      	strne	r1, [r3, #4]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	bf08      	it	eq
 8005510:	f8c8 1000 	streq.w	r1, [r8]
 8005514:	5162      	str	r2, [r4, r5]
 8005516:	604b      	str	r3, [r1, #4]
 8005518:	4638      	mov	r0, r7
 800551a:	f104 060b 	add.w	r6, r4, #11
 800551e:	f000 f829 	bl	8005574 <__malloc_unlock>
 8005522:	f026 0607 	bic.w	r6, r6, #7
 8005526:	1d23      	adds	r3, r4, #4
 8005528:	1af2      	subs	r2, r6, r3
 800552a:	d0ae      	beq.n	800548a <_malloc_r+0x22>
 800552c:	1b9b      	subs	r3, r3, r6
 800552e:	50a3      	str	r3, [r4, r2]
 8005530:	e7ab      	b.n	800548a <_malloc_r+0x22>
 8005532:	42a3      	cmp	r3, r4
 8005534:	6862      	ldr	r2, [r4, #4]
 8005536:	d1dd      	bne.n	80054f4 <_malloc_r+0x8c>
 8005538:	f8c8 2000 	str.w	r2, [r8]
 800553c:	e7ec      	b.n	8005518 <_malloc_r+0xb0>
 800553e:	4623      	mov	r3, r4
 8005540:	6864      	ldr	r4, [r4, #4]
 8005542:	e7ac      	b.n	800549e <_malloc_r+0x36>
 8005544:	4634      	mov	r4, r6
 8005546:	6876      	ldr	r6, [r6, #4]
 8005548:	e7b4      	b.n	80054b4 <_malloc_r+0x4c>
 800554a:	4613      	mov	r3, r2
 800554c:	e7cc      	b.n	80054e8 <_malloc_r+0x80>
 800554e:	230c      	movs	r3, #12
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	4638      	mov	r0, r7
 8005554:	f000 f80e 	bl	8005574 <__malloc_unlock>
 8005558:	e797      	b.n	800548a <_malloc_r+0x22>
 800555a:	6025      	str	r5, [r4, #0]
 800555c:	e7dc      	b.n	8005518 <_malloc_r+0xb0>
 800555e:	605b      	str	r3, [r3, #4]
 8005560:	deff      	udf	#255	; 0xff
 8005562:	bf00      	nop
 8005564:	20000ba4 	.word	0x20000ba4

08005568 <__malloc_lock>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__malloc_lock+0x8>)
 800556a:	f7ff bf0e 	b.w	800538a <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	20000ba0 	.word	0x20000ba0

08005574 <__malloc_unlock>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__malloc_unlock+0x8>)
 8005576:	f7ff bf09 	b.w	800538c <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	20000ba0 	.word	0x20000ba0

08005580 <__sfputc_r>:
 8005580:	6893      	ldr	r3, [r2, #8]
 8005582:	3b01      	subs	r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	b410      	push	{r4}
 8005588:	6093      	str	r3, [r2, #8]
 800558a:	da08      	bge.n	800559e <__sfputc_r+0x1e>
 800558c:	6994      	ldr	r4, [r2, #24]
 800558e:	42a3      	cmp	r3, r4
 8005590:	db01      	blt.n	8005596 <__sfputc_r+0x16>
 8005592:	290a      	cmp	r1, #10
 8005594:	d103      	bne.n	800559e <__sfputc_r+0x1e>
 8005596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800559a:	f000 bb73 	b.w	8005c84 <__swbuf_r>
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	1c58      	adds	r0, r3, #1
 80055a2:	6010      	str	r0, [r2, #0]
 80055a4:	7019      	strb	r1, [r3, #0]
 80055a6:	4608      	mov	r0, r1
 80055a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <__sfputs_r>:
 80055ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b0:	4606      	mov	r6, r0
 80055b2:	460f      	mov	r7, r1
 80055b4:	4614      	mov	r4, r2
 80055b6:	18d5      	adds	r5, r2, r3
 80055b8:	42ac      	cmp	r4, r5
 80055ba:	d101      	bne.n	80055c0 <__sfputs_r+0x12>
 80055bc:	2000      	movs	r0, #0
 80055be:	e007      	b.n	80055d0 <__sfputs_r+0x22>
 80055c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c4:	463a      	mov	r2, r7
 80055c6:	4630      	mov	r0, r6
 80055c8:	f7ff ffda 	bl	8005580 <__sfputc_r>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d1f3      	bne.n	80055b8 <__sfputs_r+0xa>
 80055d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055d4 <_vfiprintf_r>:
 80055d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	460d      	mov	r5, r1
 80055da:	b09d      	sub	sp, #116	; 0x74
 80055dc:	4614      	mov	r4, r2
 80055de:	4698      	mov	r8, r3
 80055e0:	4606      	mov	r6, r0
 80055e2:	b118      	cbz	r0, 80055ec <_vfiprintf_r+0x18>
 80055e4:	6a03      	ldr	r3, [r0, #32]
 80055e6:	b90b      	cbnz	r3, 80055ec <_vfiprintf_r+0x18>
 80055e8:	f7ff fdca 	bl	8005180 <__sinit>
 80055ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055ee:	07d9      	lsls	r1, r3, #31
 80055f0:	d405      	bmi.n	80055fe <_vfiprintf_r+0x2a>
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	059a      	lsls	r2, r3, #22
 80055f6:	d402      	bmi.n	80055fe <_vfiprintf_r+0x2a>
 80055f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055fa:	f7ff fec6 	bl	800538a <__retarget_lock_acquire_recursive>
 80055fe:	89ab      	ldrh	r3, [r5, #12]
 8005600:	071b      	lsls	r3, r3, #28
 8005602:	d501      	bpl.n	8005608 <_vfiprintf_r+0x34>
 8005604:	692b      	ldr	r3, [r5, #16]
 8005606:	b99b      	cbnz	r3, 8005630 <_vfiprintf_r+0x5c>
 8005608:	4629      	mov	r1, r5
 800560a:	4630      	mov	r0, r6
 800560c:	f000 fb78 	bl	8005d00 <__swsetup_r>
 8005610:	b170      	cbz	r0, 8005630 <_vfiprintf_r+0x5c>
 8005612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005614:	07dc      	lsls	r4, r3, #31
 8005616:	d504      	bpl.n	8005622 <_vfiprintf_r+0x4e>
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	b01d      	add	sp, #116	; 0x74
 800561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	0598      	lsls	r0, r3, #22
 8005626:	d4f7      	bmi.n	8005618 <_vfiprintf_r+0x44>
 8005628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800562a:	f7ff feaf 	bl	800538c <__retarget_lock_release_recursive>
 800562e:	e7f3      	b.n	8005618 <_vfiprintf_r+0x44>
 8005630:	2300      	movs	r3, #0
 8005632:	9309      	str	r3, [sp, #36]	; 0x24
 8005634:	2320      	movs	r3, #32
 8005636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563a:	f8cd 800c 	str.w	r8, [sp, #12]
 800563e:	2330      	movs	r3, #48	; 0x30
 8005640:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057f4 <_vfiprintf_r+0x220>
 8005644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005648:	f04f 0901 	mov.w	r9, #1
 800564c:	4623      	mov	r3, r4
 800564e:	469a      	mov	sl, r3
 8005650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005654:	b10a      	cbz	r2, 800565a <_vfiprintf_r+0x86>
 8005656:	2a25      	cmp	r2, #37	; 0x25
 8005658:	d1f9      	bne.n	800564e <_vfiprintf_r+0x7a>
 800565a:	ebba 0b04 	subs.w	fp, sl, r4
 800565e:	d00b      	beq.n	8005678 <_vfiprintf_r+0xa4>
 8005660:	465b      	mov	r3, fp
 8005662:	4622      	mov	r2, r4
 8005664:	4629      	mov	r1, r5
 8005666:	4630      	mov	r0, r6
 8005668:	f7ff ffa1 	bl	80055ae <__sfputs_r>
 800566c:	3001      	adds	r0, #1
 800566e:	f000 80a9 	beq.w	80057c4 <_vfiprintf_r+0x1f0>
 8005672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005674:	445a      	add	r2, fp
 8005676:	9209      	str	r2, [sp, #36]	; 0x24
 8005678:	f89a 3000 	ldrb.w	r3, [sl]
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80a1 	beq.w	80057c4 <_vfiprintf_r+0x1f0>
 8005682:	2300      	movs	r3, #0
 8005684:	f04f 32ff 	mov.w	r2, #4294967295
 8005688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568c:	f10a 0a01 	add.w	sl, sl, #1
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	9307      	str	r3, [sp, #28]
 8005694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005698:	931a      	str	r3, [sp, #104]	; 0x68
 800569a:	4654      	mov	r4, sl
 800569c:	2205      	movs	r2, #5
 800569e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a2:	4854      	ldr	r0, [pc, #336]	; (80057f4 <_vfiprintf_r+0x220>)
 80056a4:	f7fa fd94 	bl	80001d0 <memchr>
 80056a8:	9a04      	ldr	r2, [sp, #16]
 80056aa:	b9d8      	cbnz	r0, 80056e4 <_vfiprintf_r+0x110>
 80056ac:	06d1      	lsls	r1, r2, #27
 80056ae:	bf44      	itt	mi
 80056b0:	2320      	movmi	r3, #32
 80056b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b6:	0713      	lsls	r3, r2, #28
 80056b8:	bf44      	itt	mi
 80056ba:	232b      	movmi	r3, #43	; 0x2b
 80056bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c0:	f89a 3000 	ldrb.w	r3, [sl]
 80056c4:	2b2a      	cmp	r3, #42	; 0x2a
 80056c6:	d015      	beq.n	80056f4 <_vfiprintf_r+0x120>
 80056c8:	9a07      	ldr	r2, [sp, #28]
 80056ca:	4654      	mov	r4, sl
 80056cc:	2000      	movs	r0, #0
 80056ce:	f04f 0c0a 	mov.w	ip, #10
 80056d2:	4621      	mov	r1, r4
 80056d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d8:	3b30      	subs	r3, #48	; 0x30
 80056da:	2b09      	cmp	r3, #9
 80056dc:	d94d      	bls.n	800577a <_vfiprintf_r+0x1a6>
 80056de:	b1b0      	cbz	r0, 800570e <_vfiprintf_r+0x13a>
 80056e0:	9207      	str	r2, [sp, #28]
 80056e2:	e014      	b.n	800570e <_vfiprintf_r+0x13a>
 80056e4:	eba0 0308 	sub.w	r3, r0, r8
 80056e8:	fa09 f303 	lsl.w	r3, r9, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	9304      	str	r3, [sp, #16]
 80056f0:	46a2      	mov	sl, r4
 80056f2:	e7d2      	b.n	800569a <_vfiprintf_r+0xc6>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	1d19      	adds	r1, r3, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	9103      	str	r1, [sp, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bfbb      	ittet	lt
 8005700:	425b      	neglt	r3, r3
 8005702:	f042 0202 	orrlt.w	r2, r2, #2
 8005706:	9307      	strge	r3, [sp, #28]
 8005708:	9307      	strlt	r3, [sp, #28]
 800570a:	bfb8      	it	lt
 800570c:	9204      	strlt	r2, [sp, #16]
 800570e:	7823      	ldrb	r3, [r4, #0]
 8005710:	2b2e      	cmp	r3, #46	; 0x2e
 8005712:	d10c      	bne.n	800572e <_vfiprintf_r+0x15a>
 8005714:	7863      	ldrb	r3, [r4, #1]
 8005716:	2b2a      	cmp	r3, #42	; 0x2a
 8005718:	d134      	bne.n	8005784 <_vfiprintf_r+0x1b0>
 800571a:	9b03      	ldr	r3, [sp, #12]
 800571c:	1d1a      	adds	r2, r3, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	9203      	str	r2, [sp, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	bfb8      	it	lt
 8005726:	f04f 33ff 	movlt.w	r3, #4294967295
 800572a:	3402      	adds	r4, #2
 800572c:	9305      	str	r3, [sp, #20]
 800572e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005804 <_vfiprintf_r+0x230>
 8005732:	7821      	ldrb	r1, [r4, #0]
 8005734:	2203      	movs	r2, #3
 8005736:	4650      	mov	r0, sl
 8005738:	f7fa fd4a 	bl	80001d0 <memchr>
 800573c:	b138      	cbz	r0, 800574e <_vfiprintf_r+0x17a>
 800573e:	9b04      	ldr	r3, [sp, #16]
 8005740:	eba0 000a 	sub.w	r0, r0, sl
 8005744:	2240      	movs	r2, #64	; 0x40
 8005746:	4082      	lsls	r2, r0
 8005748:	4313      	orrs	r3, r2
 800574a:	3401      	adds	r4, #1
 800574c:	9304      	str	r3, [sp, #16]
 800574e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005752:	4829      	ldr	r0, [pc, #164]	; (80057f8 <_vfiprintf_r+0x224>)
 8005754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005758:	2206      	movs	r2, #6
 800575a:	f7fa fd39 	bl	80001d0 <memchr>
 800575e:	2800      	cmp	r0, #0
 8005760:	d03f      	beq.n	80057e2 <_vfiprintf_r+0x20e>
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <_vfiprintf_r+0x228>)
 8005764:	bb1b      	cbnz	r3, 80057ae <_vfiprintf_r+0x1da>
 8005766:	9b03      	ldr	r3, [sp, #12]
 8005768:	3307      	adds	r3, #7
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	3308      	adds	r3, #8
 8005770:	9303      	str	r3, [sp, #12]
 8005772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005774:	443b      	add	r3, r7
 8005776:	9309      	str	r3, [sp, #36]	; 0x24
 8005778:	e768      	b.n	800564c <_vfiprintf_r+0x78>
 800577a:	fb0c 3202 	mla	r2, ip, r2, r3
 800577e:	460c      	mov	r4, r1
 8005780:	2001      	movs	r0, #1
 8005782:	e7a6      	b.n	80056d2 <_vfiprintf_r+0xfe>
 8005784:	2300      	movs	r3, #0
 8005786:	3401      	adds	r4, #1
 8005788:	9305      	str	r3, [sp, #20]
 800578a:	4619      	mov	r1, r3
 800578c:	f04f 0c0a 	mov.w	ip, #10
 8005790:	4620      	mov	r0, r4
 8005792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005796:	3a30      	subs	r2, #48	; 0x30
 8005798:	2a09      	cmp	r2, #9
 800579a:	d903      	bls.n	80057a4 <_vfiprintf_r+0x1d0>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0c6      	beq.n	800572e <_vfiprintf_r+0x15a>
 80057a0:	9105      	str	r1, [sp, #20]
 80057a2:	e7c4      	b.n	800572e <_vfiprintf_r+0x15a>
 80057a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a8:	4604      	mov	r4, r0
 80057aa:	2301      	movs	r3, #1
 80057ac:	e7f0      	b.n	8005790 <_vfiprintf_r+0x1bc>
 80057ae:	ab03      	add	r3, sp, #12
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	462a      	mov	r2, r5
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <_vfiprintf_r+0x22c>)
 80057b6:	a904      	add	r1, sp, #16
 80057b8:	4630      	mov	r0, r6
 80057ba:	f3af 8000 	nop.w
 80057be:	4607      	mov	r7, r0
 80057c0:	1c78      	adds	r0, r7, #1
 80057c2:	d1d6      	bne.n	8005772 <_vfiprintf_r+0x19e>
 80057c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c6:	07d9      	lsls	r1, r3, #31
 80057c8:	d405      	bmi.n	80057d6 <_vfiprintf_r+0x202>
 80057ca:	89ab      	ldrh	r3, [r5, #12]
 80057cc:	059a      	lsls	r2, r3, #22
 80057ce:	d402      	bmi.n	80057d6 <_vfiprintf_r+0x202>
 80057d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d2:	f7ff fddb 	bl	800538c <__retarget_lock_release_recursive>
 80057d6:	89ab      	ldrh	r3, [r5, #12]
 80057d8:	065b      	lsls	r3, r3, #25
 80057da:	f53f af1d 	bmi.w	8005618 <_vfiprintf_r+0x44>
 80057de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e0:	e71c      	b.n	800561c <_vfiprintf_r+0x48>
 80057e2:	ab03      	add	r3, sp, #12
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	462a      	mov	r2, r5
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <_vfiprintf_r+0x22c>)
 80057ea:	a904      	add	r1, sp, #16
 80057ec:	4630      	mov	r0, r6
 80057ee:	f000 f879 	bl	80058e4 <_printf_i>
 80057f2:	e7e4      	b.n	80057be <_vfiprintf_r+0x1ea>
 80057f4:	08006473 	.word	0x08006473
 80057f8:	0800647d 	.word	0x0800647d
 80057fc:	00000000 	.word	0x00000000
 8005800:	080055af 	.word	0x080055af
 8005804:	08006479 	.word	0x08006479

08005808 <_printf_common>:
 8005808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	4616      	mov	r6, r2
 800580e:	4699      	mov	r9, r3
 8005810:	688a      	ldr	r2, [r1, #8]
 8005812:	690b      	ldr	r3, [r1, #16]
 8005814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005818:	4293      	cmp	r3, r2
 800581a:	bfb8      	it	lt
 800581c:	4613      	movlt	r3, r2
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005824:	4607      	mov	r7, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b10a      	cbz	r2, 800582e <_printf_common+0x26>
 800582a:	3301      	adds	r3, #1
 800582c:	6033      	str	r3, [r6, #0]
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	0699      	lsls	r1, r3, #26
 8005832:	bf42      	ittt	mi
 8005834:	6833      	ldrmi	r3, [r6, #0]
 8005836:	3302      	addmi	r3, #2
 8005838:	6033      	strmi	r3, [r6, #0]
 800583a:	6825      	ldr	r5, [r4, #0]
 800583c:	f015 0506 	ands.w	r5, r5, #6
 8005840:	d106      	bne.n	8005850 <_printf_common+0x48>
 8005842:	f104 0a19 	add.w	sl, r4, #25
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	6832      	ldr	r2, [r6, #0]
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ab      	cmp	r3, r5
 800584e:	dc26      	bgt.n	800589e <_printf_common+0x96>
 8005850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005854:	1e13      	subs	r3, r2, #0
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	bf18      	it	ne
 800585a:	2301      	movne	r3, #1
 800585c:	0692      	lsls	r2, r2, #26
 800585e:	d42b      	bmi.n	80058b8 <_printf_common+0xb0>
 8005860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005864:	4649      	mov	r1, r9
 8005866:	4638      	mov	r0, r7
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d01e      	beq.n	80058ac <_printf_common+0xa4>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	6922      	ldr	r2, [r4, #16]
 8005872:	f003 0306 	and.w	r3, r3, #6
 8005876:	2b04      	cmp	r3, #4
 8005878:	bf02      	ittt	eq
 800587a:	68e5      	ldreq	r5, [r4, #12]
 800587c:	6833      	ldreq	r3, [r6, #0]
 800587e:	1aed      	subeq	r5, r5, r3
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	bf0c      	ite	eq
 8005884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005888:	2500      	movne	r5, #0
 800588a:	4293      	cmp	r3, r2
 800588c:	bfc4      	itt	gt
 800588e:	1a9b      	subgt	r3, r3, r2
 8005890:	18ed      	addgt	r5, r5, r3
 8005892:	2600      	movs	r6, #0
 8005894:	341a      	adds	r4, #26
 8005896:	42b5      	cmp	r5, r6
 8005898:	d11a      	bne.n	80058d0 <_printf_common+0xc8>
 800589a:	2000      	movs	r0, #0
 800589c:	e008      	b.n	80058b0 <_printf_common+0xa8>
 800589e:	2301      	movs	r3, #1
 80058a0:	4652      	mov	r2, sl
 80058a2:	4649      	mov	r1, r9
 80058a4:	4638      	mov	r0, r7
 80058a6:	47c0      	blx	r8
 80058a8:	3001      	adds	r0, #1
 80058aa:	d103      	bne.n	80058b4 <_printf_common+0xac>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295
 80058b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b4:	3501      	adds	r5, #1
 80058b6:	e7c6      	b.n	8005846 <_printf_common+0x3e>
 80058b8:	18e1      	adds	r1, r4, r3
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	2030      	movs	r0, #48	; 0x30
 80058be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c2:	4422      	add	r2, r4
 80058c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058cc:	3302      	adds	r3, #2
 80058ce:	e7c7      	b.n	8005860 <_printf_common+0x58>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4622      	mov	r2, r4
 80058d4:	4649      	mov	r1, r9
 80058d6:	4638      	mov	r0, r7
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d0e6      	beq.n	80058ac <_printf_common+0xa4>
 80058de:	3601      	adds	r6, #1
 80058e0:	e7d9      	b.n	8005896 <_printf_common+0x8e>
	...

080058e4 <_printf_i>:
 80058e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	7e0f      	ldrb	r7, [r1, #24]
 80058ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058ec:	2f78      	cmp	r7, #120	; 0x78
 80058ee:	4691      	mov	r9, r2
 80058f0:	4680      	mov	r8, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	469a      	mov	sl, r3
 80058f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058fa:	d807      	bhi.n	800590c <_printf_i+0x28>
 80058fc:	2f62      	cmp	r7, #98	; 0x62
 80058fe:	d80a      	bhi.n	8005916 <_printf_i+0x32>
 8005900:	2f00      	cmp	r7, #0
 8005902:	f000 80d4 	beq.w	8005aae <_printf_i+0x1ca>
 8005906:	2f58      	cmp	r7, #88	; 0x58
 8005908:	f000 80c0 	beq.w	8005a8c <_printf_i+0x1a8>
 800590c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005914:	e03a      	b.n	800598c <_printf_i+0xa8>
 8005916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591a:	2b15      	cmp	r3, #21
 800591c:	d8f6      	bhi.n	800590c <_printf_i+0x28>
 800591e:	a101      	add	r1, pc, #4	; (adr r1, 8005924 <_printf_i+0x40>)
 8005920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005924:	0800597d 	.word	0x0800597d
 8005928:	08005991 	.word	0x08005991
 800592c:	0800590d 	.word	0x0800590d
 8005930:	0800590d 	.word	0x0800590d
 8005934:	0800590d 	.word	0x0800590d
 8005938:	0800590d 	.word	0x0800590d
 800593c:	08005991 	.word	0x08005991
 8005940:	0800590d 	.word	0x0800590d
 8005944:	0800590d 	.word	0x0800590d
 8005948:	0800590d 	.word	0x0800590d
 800594c:	0800590d 	.word	0x0800590d
 8005950:	08005a95 	.word	0x08005a95
 8005954:	080059bd 	.word	0x080059bd
 8005958:	08005a4f 	.word	0x08005a4f
 800595c:	0800590d 	.word	0x0800590d
 8005960:	0800590d 	.word	0x0800590d
 8005964:	08005ab7 	.word	0x08005ab7
 8005968:	0800590d 	.word	0x0800590d
 800596c:	080059bd 	.word	0x080059bd
 8005970:	0800590d 	.word	0x0800590d
 8005974:	0800590d 	.word	0x0800590d
 8005978:	08005a57 	.word	0x08005a57
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800598c:	2301      	movs	r3, #1
 800598e:	e09f      	b.n	8005ad0 <_printf_i+0x1ec>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	0607      	lsls	r7, r0, #24
 8005996:	f103 0104 	add.w	r1, r3, #4
 800599a:	6029      	str	r1, [r5, #0]
 800599c:	d501      	bpl.n	80059a2 <_printf_i+0xbe>
 800599e:	681e      	ldr	r6, [r3, #0]
 80059a0:	e003      	b.n	80059aa <_printf_i+0xc6>
 80059a2:	0646      	lsls	r6, r0, #25
 80059a4:	d5fb      	bpl.n	800599e <_printf_i+0xba>
 80059a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	da03      	bge.n	80059b6 <_printf_i+0xd2>
 80059ae:	232d      	movs	r3, #45	; 0x2d
 80059b0:	4276      	negs	r6, r6
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	485a      	ldr	r0, [pc, #360]	; (8005b20 <_printf_i+0x23c>)
 80059b8:	230a      	movs	r3, #10
 80059ba:	e012      	b.n	80059e2 <_printf_i+0xfe>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1d19      	adds	r1, r3, #4
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	0605      	lsls	r5, r0, #24
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0xe8>
 80059c8:	681e      	ldr	r6, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0xee>
 80059cc:	0641      	lsls	r1, r0, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0xe4>
 80059d0:	881e      	ldrh	r6, [r3, #0]
 80059d2:	4853      	ldr	r0, [pc, #332]	; (8005b20 <_printf_i+0x23c>)
 80059d4:	2f6f      	cmp	r7, #111	; 0x6f
 80059d6:	bf0c      	ite	eq
 80059d8:	2308      	moveq	r3, #8
 80059da:	230a      	movne	r3, #10
 80059dc:	2100      	movs	r1, #0
 80059de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059e2:	6865      	ldr	r5, [r4, #4]
 80059e4:	60a5      	str	r5, [r4, #8]
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	bfa2      	ittt	ge
 80059ea:	6821      	ldrge	r1, [r4, #0]
 80059ec:	f021 0104 	bicge.w	r1, r1, #4
 80059f0:	6021      	strge	r1, [r4, #0]
 80059f2:	b90e      	cbnz	r6, 80059f8 <_printf_i+0x114>
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	d04b      	beq.n	8005a90 <_printf_i+0x1ac>
 80059f8:	4615      	mov	r5, r2
 80059fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005a02:	5dc7      	ldrb	r7, [r0, r7]
 8005a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a08:	4637      	mov	r7, r6
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	d9f4      	bls.n	80059fa <_printf_i+0x116>
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d10b      	bne.n	8005a2c <_printf_i+0x148>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07de      	lsls	r6, r3, #31
 8005a18:	d508      	bpl.n	8005a2c <_printf_i+0x148>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	6861      	ldr	r1, [r4, #4]
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	bfde      	ittt	le
 8005a22:	2330      	movle	r3, #48	; 0x30
 8005a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a2c:	1b52      	subs	r2, r2, r5
 8005a2e:	6122      	str	r2, [r4, #16]
 8005a30:	f8cd a000 	str.w	sl, [sp]
 8005a34:	464b      	mov	r3, r9
 8005a36:	aa03      	add	r2, sp, #12
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4640      	mov	r0, r8
 8005a3c:	f7ff fee4 	bl	8005808 <_printf_common>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d14a      	bne.n	8005ada <_printf_i+0x1f6>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	b004      	add	sp, #16
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f043 0320 	orr.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	4833      	ldr	r0, [pc, #204]	; (8005b24 <_printf_i+0x240>)
 8005a58:	2778      	movs	r7, #120	; 0x78
 8005a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6829      	ldr	r1, [r5, #0]
 8005a62:	061f      	lsls	r7, r3, #24
 8005a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a68:	d402      	bmi.n	8005a70 <_printf_i+0x18c>
 8005a6a:	065f      	lsls	r7, r3, #25
 8005a6c:	bf48      	it	mi
 8005a6e:	b2b6      	uxthmi	r6, r6
 8005a70:	07df      	lsls	r7, r3, #31
 8005a72:	bf48      	it	mi
 8005a74:	f043 0320 	orrmi.w	r3, r3, #32
 8005a78:	6029      	str	r1, [r5, #0]
 8005a7a:	bf48      	it	mi
 8005a7c:	6023      	strmi	r3, [r4, #0]
 8005a7e:	b91e      	cbnz	r6, 8005a88 <_printf_i+0x1a4>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	f023 0320 	bic.w	r3, r3, #32
 8005a86:	6023      	str	r3, [r4, #0]
 8005a88:	2310      	movs	r3, #16
 8005a8a:	e7a7      	b.n	80059dc <_printf_i+0xf8>
 8005a8c:	4824      	ldr	r0, [pc, #144]	; (8005b20 <_printf_i+0x23c>)
 8005a8e:	e7e4      	b.n	8005a5a <_printf_i+0x176>
 8005a90:	4615      	mov	r5, r2
 8005a92:	e7bd      	b.n	8005a10 <_printf_i+0x12c>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	6826      	ldr	r6, [r4, #0]
 8005a98:	6961      	ldr	r1, [r4, #20]
 8005a9a:	1d18      	adds	r0, r3, #4
 8005a9c:	6028      	str	r0, [r5, #0]
 8005a9e:	0635      	lsls	r5, r6, #24
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	d501      	bpl.n	8005aa8 <_printf_i+0x1c4>
 8005aa4:	6019      	str	r1, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <_printf_i+0x1ca>
 8005aa8:	0670      	lsls	r0, r6, #25
 8005aaa:	d5fb      	bpl.n	8005aa4 <_printf_i+0x1c0>
 8005aac:	8019      	strh	r1, [r3, #0]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	4615      	mov	r5, r2
 8005ab4:	e7bc      	b.n	8005a30 <_printf_i+0x14c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	602a      	str	r2, [r5, #0]
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	6862      	ldr	r2, [r4, #4]
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7fa fb84 	bl	80001d0 <memchr>
 8005ac8:	b108      	cbz	r0, 8005ace <_printf_i+0x1ea>
 8005aca:	1b40      	subs	r0, r0, r5
 8005acc:	6060      	str	r0, [r4, #4]
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	6123      	str	r3, [r4, #16]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad8:	e7aa      	b.n	8005a30 <_printf_i+0x14c>
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	462a      	mov	r2, r5
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d0ad      	beq.n	8005a44 <_printf_i+0x160>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	079b      	lsls	r3, r3, #30
 8005aec:	d413      	bmi.n	8005b16 <_printf_i+0x232>
 8005aee:	68e0      	ldr	r0, [r4, #12]
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	4298      	cmp	r0, r3
 8005af4:	bfb8      	it	lt
 8005af6:	4618      	movlt	r0, r3
 8005af8:	e7a6      	b.n	8005a48 <_printf_i+0x164>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4632      	mov	r2, r6
 8005afe:	4649      	mov	r1, r9
 8005b00:	4640      	mov	r0, r8
 8005b02:	47d0      	blx	sl
 8005b04:	3001      	adds	r0, #1
 8005b06:	d09d      	beq.n	8005a44 <_printf_i+0x160>
 8005b08:	3501      	adds	r5, #1
 8005b0a:	68e3      	ldr	r3, [r4, #12]
 8005b0c:	9903      	ldr	r1, [sp, #12]
 8005b0e:	1a5b      	subs	r3, r3, r1
 8005b10:	42ab      	cmp	r3, r5
 8005b12:	dcf2      	bgt.n	8005afa <_printf_i+0x216>
 8005b14:	e7eb      	b.n	8005aee <_printf_i+0x20a>
 8005b16:	2500      	movs	r5, #0
 8005b18:	f104 0619 	add.w	r6, r4, #25
 8005b1c:	e7f5      	b.n	8005b0a <_printf_i+0x226>
 8005b1e:	bf00      	nop
 8005b20:	08006484 	.word	0x08006484
 8005b24:	08006495 	.word	0x08006495

08005b28 <__sflush_r>:
 8005b28:	898a      	ldrh	r2, [r1, #12]
 8005b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2e:	4605      	mov	r5, r0
 8005b30:	0710      	lsls	r0, r2, #28
 8005b32:	460c      	mov	r4, r1
 8005b34:	d458      	bmi.n	8005be8 <__sflush_r+0xc0>
 8005b36:	684b      	ldr	r3, [r1, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	dc05      	bgt.n	8005b48 <__sflush_r+0x20>
 8005b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	dc02      	bgt.n	8005b48 <__sflush_r+0x20>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	d0f9      	beq.n	8005b42 <__sflush_r+0x1a>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b54:	682f      	ldr	r7, [r5, #0]
 8005b56:	6a21      	ldr	r1, [r4, #32]
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	d032      	beq.n	8005bc2 <__sflush_r+0x9a>
 8005b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	075a      	lsls	r2, r3, #29
 8005b62:	d505      	bpl.n	8005b70 <__sflush_r+0x48>
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	1ac0      	subs	r0, r0, r3
 8005b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b6a:	b10b      	cbz	r3, 8005b70 <__sflush_r+0x48>
 8005b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b6e:	1ac0      	subs	r0, r0, r3
 8005b70:	2300      	movs	r3, #0
 8005b72:	4602      	mov	r2, r0
 8005b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b76:	6a21      	ldr	r1, [r4, #32]
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b0      	blx	r6
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	d106      	bne.n	8005b90 <__sflush_r+0x68>
 8005b82:	6829      	ldr	r1, [r5, #0]
 8005b84:	291d      	cmp	r1, #29
 8005b86:	d82b      	bhi.n	8005be0 <__sflush_r+0xb8>
 8005b88:	4a29      	ldr	r2, [pc, #164]	; (8005c30 <__sflush_r+0x108>)
 8005b8a:	410a      	asrs	r2, r1
 8005b8c:	07d6      	lsls	r6, r2, #31
 8005b8e:	d427      	bmi.n	8005be0 <__sflush_r+0xb8>
 8005b90:	2200      	movs	r2, #0
 8005b92:	6062      	str	r2, [r4, #4]
 8005b94:	04d9      	lsls	r1, r3, #19
 8005b96:	6922      	ldr	r2, [r4, #16]
 8005b98:	6022      	str	r2, [r4, #0]
 8005b9a:	d504      	bpl.n	8005ba6 <__sflush_r+0x7e>
 8005b9c:	1c42      	adds	r2, r0, #1
 8005b9e:	d101      	bne.n	8005ba4 <__sflush_r+0x7c>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b903      	cbnz	r3, 8005ba6 <__sflush_r+0x7e>
 8005ba4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba8:	602f      	str	r7, [r5, #0]
 8005baa:	2900      	cmp	r1, #0
 8005bac:	d0c9      	beq.n	8005b42 <__sflush_r+0x1a>
 8005bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bb2:	4299      	cmp	r1, r3
 8005bb4:	d002      	beq.n	8005bbc <__sflush_r+0x94>
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f7ff fbea 	bl	8005390 <_free_r>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	6360      	str	r0, [r4, #52]	; 0x34
 8005bc0:	e7c0      	b.n	8005b44 <__sflush_r+0x1c>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b0      	blx	r6
 8005bc8:	1c41      	adds	r1, r0, #1
 8005bca:	d1c8      	bne.n	8005b5e <__sflush_r+0x36>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0c5      	beq.n	8005b5e <__sflush_r+0x36>
 8005bd2:	2b1d      	cmp	r3, #29
 8005bd4:	d001      	beq.n	8005bda <__sflush_r+0xb2>
 8005bd6:	2b16      	cmp	r3, #22
 8005bd8:	d101      	bne.n	8005bde <__sflush_r+0xb6>
 8005bda:	602f      	str	r7, [r5, #0]
 8005bdc:	e7b1      	b.n	8005b42 <__sflush_r+0x1a>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	e7ad      	b.n	8005b44 <__sflush_r+0x1c>
 8005be8:	690f      	ldr	r7, [r1, #16]
 8005bea:	2f00      	cmp	r7, #0
 8005bec:	d0a9      	beq.n	8005b42 <__sflush_r+0x1a>
 8005bee:	0793      	lsls	r3, r2, #30
 8005bf0:	680e      	ldr	r6, [r1, #0]
 8005bf2:	bf08      	it	eq
 8005bf4:	694b      	ldreq	r3, [r1, #20]
 8005bf6:	600f      	str	r7, [r1, #0]
 8005bf8:	bf18      	it	ne
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	eba6 0807 	sub.w	r8, r6, r7
 8005c00:	608b      	str	r3, [r1, #8]
 8005c02:	f1b8 0f00 	cmp.w	r8, #0
 8005c06:	dd9c      	ble.n	8005b42 <__sflush_r+0x1a>
 8005c08:	6a21      	ldr	r1, [r4, #32]
 8005c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c0c:	4643      	mov	r3, r8
 8005c0e:	463a      	mov	r2, r7
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b0      	blx	r6
 8005c14:	2800      	cmp	r0, #0
 8005c16:	dc06      	bgt.n	8005c26 <__sflush_r+0xfe>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e78e      	b.n	8005b44 <__sflush_r+0x1c>
 8005c26:	4407      	add	r7, r0
 8005c28:	eba8 0800 	sub.w	r8, r8, r0
 8005c2c:	e7e9      	b.n	8005c02 <__sflush_r+0xda>
 8005c2e:	bf00      	nop
 8005c30:	dfbffffe 	.word	0xdfbffffe

08005c34 <_fflush_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	690b      	ldr	r3, [r1, #16]
 8005c38:	4605      	mov	r5, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	b913      	cbnz	r3, 8005c44 <_fflush_r+0x10>
 8005c3e:	2500      	movs	r5, #0
 8005c40:	4628      	mov	r0, r5
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	b118      	cbz	r0, 8005c4e <_fflush_r+0x1a>
 8005c46:	6a03      	ldr	r3, [r0, #32]
 8005c48:	b90b      	cbnz	r3, 8005c4e <_fflush_r+0x1a>
 8005c4a:	f7ff fa99 	bl	8005180 <__sinit>
 8005c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f3      	beq.n	8005c3e <_fflush_r+0xa>
 8005c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c58:	07d0      	lsls	r0, r2, #31
 8005c5a:	d404      	bmi.n	8005c66 <_fflush_r+0x32>
 8005c5c:	0599      	lsls	r1, r3, #22
 8005c5e:	d402      	bmi.n	8005c66 <_fflush_r+0x32>
 8005c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c62:	f7ff fb92 	bl	800538a <__retarget_lock_acquire_recursive>
 8005c66:	4628      	mov	r0, r5
 8005c68:	4621      	mov	r1, r4
 8005c6a:	f7ff ff5d 	bl	8005b28 <__sflush_r>
 8005c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c70:	07da      	lsls	r2, r3, #31
 8005c72:	4605      	mov	r5, r0
 8005c74:	d4e4      	bmi.n	8005c40 <_fflush_r+0xc>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	059b      	lsls	r3, r3, #22
 8005c7a:	d4e1      	bmi.n	8005c40 <_fflush_r+0xc>
 8005c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c7e:	f7ff fb85 	bl	800538c <__retarget_lock_release_recursive>
 8005c82:	e7dd      	b.n	8005c40 <_fflush_r+0xc>

08005c84 <__swbuf_r>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	460e      	mov	r6, r1
 8005c88:	4614      	mov	r4, r2
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	b118      	cbz	r0, 8005c96 <__swbuf_r+0x12>
 8005c8e:	6a03      	ldr	r3, [r0, #32]
 8005c90:	b90b      	cbnz	r3, 8005c96 <__swbuf_r+0x12>
 8005c92:	f7ff fa75 	bl	8005180 <__sinit>
 8005c96:	69a3      	ldr	r3, [r4, #24]
 8005c98:	60a3      	str	r3, [r4, #8]
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	071a      	lsls	r2, r3, #28
 8005c9e:	d525      	bpl.n	8005cec <__swbuf_r+0x68>
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	b31b      	cbz	r3, 8005cec <__swbuf_r+0x68>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	6922      	ldr	r2, [r4, #16]
 8005ca8:	1a98      	subs	r0, r3, r2
 8005caa:	6963      	ldr	r3, [r4, #20]
 8005cac:	b2f6      	uxtb	r6, r6
 8005cae:	4283      	cmp	r3, r0
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	dc04      	bgt.n	8005cbe <__swbuf_r+0x3a>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7ff ffbc 	bl	8005c34 <_fflush_r>
 8005cbc:	b9e0      	cbnz	r0, 8005cf8 <__swbuf_r+0x74>
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	6022      	str	r2, [r4, #0]
 8005cca:	701e      	strb	r6, [r3, #0]
 8005ccc:	6962      	ldr	r2, [r4, #20]
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d004      	beq.n	8005cde <__swbuf_r+0x5a>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d506      	bpl.n	8005ce8 <__swbuf_r+0x64>
 8005cda:	2e0a      	cmp	r6, #10
 8005cdc:	d104      	bne.n	8005ce8 <__swbuf_r+0x64>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f7ff ffa7 	bl	8005c34 <_fflush_r>
 8005ce6:	b938      	cbnz	r0, 8005cf8 <__swbuf_r+0x74>
 8005ce8:	4638      	mov	r0, r7
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f806 	bl	8005d00 <__swsetup_r>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d0d5      	beq.n	8005ca4 <__swbuf_r+0x20>
 8005cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8005cfc:	e7f4      	b.n	8005ce8 <__swbuf_r+0x64>
	...

08005d00 <__swsetup_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <__swsetup_r+0xac>)
 8005d04:	4605      	mov	r5, r0
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	460c      	mov	r4, r1
 8005d0a:	b118      	cbz	r0, 8005d14 <__swsetup_r+0x14>
 8005d0c:	6a03      	ldr	r3, [r0, #32]
 8005d0e:	b90b      	cbnz	r3, 8005d14 <__swsetup_r+0x14>
 8005d10:	f7ff fa36 	bl	8005180 <__sinit>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1a:	0718      	lsls	r0, r3, #28
 8005d1c:	d422      	bmi.n	8005d64 <__swsetup_r+0x64>
 8005d1e:	06d9      	lsls	r1, r3, #27
 8005d20:	d407      	bmi.n	8005d32 <__swsetup_r+0x32>
 8005d22:	2309      	movs	r3, #9
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d2a:	81a3      	strh	r3, [r4, #12]
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e034      	b.n	8005d9c <__swsetup_r+0x9c>
 8005d32:	0758      	lsls	r0, r3, #29
 8005d34:	d512      	bpl.n	8005d5c <__swsetup_r+0x5c>
 8005d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d38:	b141      	cbz	r1, 8005d4c <__swsetup_r+0x4c>
 8005d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d002      	beq.n	8005d48 <__swsetup_r+0x48>
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff fb24 	bl	8005390 <_free_r>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	2300      	movs	r3, #0
 8005d56:	6063      	str	r3, [r4, #4]
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	f043 0308 	orr.w	r3, r3, #8
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	b94b      	cbnz	r3, 8005d7c <__swsetup_r+0x7c>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d72:	d003      	beq.n	8005d7c <__swsetup_r+0x7c>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f850 	bl	8005e1c <__smakebuf_r>
 8005d7c:	89a0      	ldrh	r0, [r4, #12]
 8005d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d82:	f010 0301 	ands.w	r3, r0, #1
 8005d86:	d00a      	beq.n	8005d9e <__swsetup_r+0x9e>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60a3      	str	r3, [r4, #8]
 8005d8c:	6963      	ldr	r3, [r4, #20]
 8005d8e:	425b      	negs	r3, r3
 8005d90:	61a3      	str	r3, [r4, #24]
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	b943      	cbnz	r3, 8005da8 <__swsetup_r+0xa8>
 8005d96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d9a:	d1c4      	bne.n	8005d26 <__swsetup_r+0x26>
 8005d9c:	bd38      	pop	{r3, r4, r5, pc}
 8005d9e:	0781      	lsls	r1, r0, #30
 8005da0:	bf58      	it	pl
 8005da2:	6963      	ldrpl	r3, [r4, #20]
 8005da4:	60a3      	str	r3, [r4, #8]
 8005da6:	e7f4      	b.n	8005d92 <__swsetup_r+0x92>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e7f7      	b.n	8005d9c <__swsetup_r+0x9c>
 8005dac:	20000084 	.word	0x20000084

08005db0 <_sbrk_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d06      	ldr	r5, [pc, #24]	; (8005dcc <_sbrk_r+0x1c>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	f7fd fa96 	bl	80032ec <_sbrk>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_sbrk_r+0x1a>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_sbrk_r+0x1a>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000b9c 	.word	0x20000b9c

08005dd0 <__swhatbuf_r>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd8:	2900      	cmp	r1, #0
 8005dda:	b096      	sub	sp, #88	; 0x58
 8005ddc:	4615      	mov	r5, r2
 8005dde:	461e      	mov	r6, r3
 8005de0:	da0d      	bge.n	8005dfe <__swhatbuf_r+0x2e>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005de8:	f04f 0100 	mov.w	r1, #0
 8005dec:	bf0c      	ite	eq
 8005dee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005df2:	2340      	movne	r3, #64	; 0x40
 8005df4:	2000      	movs	r0, #0
 8005df6:	6031      	str	r1, [r6, #0]
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	b016      	add	sp, #88	; 0x58
 8005dfc:	bd70      	pop	{r4, r5, r6, pc}
 8005dfe:	466a      	mov	r2, sp
 8005e00:	f000 f848 	bl	8005e94 <_fstat_r>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	dbec      	blt.n	8005de2 <__swhatbuf_r+0x12>
 8005e08:	9901      	ldr	r1, [sp, #4]
 8005e0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e12:	4259      	negs	r1, r3
 8005e14:	4159      	adcs	r1, r3
 8005e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e1a:	e7eb      	b.n	8005df4 <__swhatbuf_r+0x24>

08005e1c <__smakebuf_r>:
 8005e1c:	898b      	ldrh	r3, [r1, #12]
 8005e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e20:	079d      	lsls	r5, r3, #30
 8005e22:	4606      	mov	r6, r0
 8005e24:	460c      	mov	r4, r1
 8005e26:	d507      	bpl.n	8005e38 <__smakebuf_r+0x1c>
 8005e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	6123      	str	r3, [r4, #16]
 8005e30:	2301      	movs	r3, #1
 8005e32:	6163      	str	r3, [r4, #20]
 8005e34:	b002      	add	sp, #8
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	ab01      	add	r3, sp, #4
 8005e3a:	466a      	mov	r2, sp
 8005e3c:	f7ff ffc8 	bl	8005dd0 <__swhatbuf_r>
 8005e40:	9900      	ldr	r1, [sp, #0]
 8005e42:	4605      	mov	r5, r0
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff fb0f 	bl	8005468 <_malloc_r>
 8005e4a:	b948      	cbnz	r0, 8005e60 <__smakebuf_r+0x44>
 8005e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e50:	059a      	lsls	r2, r3, #22
 8005e52:	d4ef      	bmi.n	8005e34 <__smakebuf_r+0x18>
 8005e54:	f023 0303 	bic.w	r3, r3, #3
 8005e58:	f043 0302 	orr.w	r3, r3, #2
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	e7e3      	b.n	8005e28 <__smakebuf_r+0xc>
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	6020      	str	r0, [r4, #0]
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	9b00      	ldr	r3, [sp, #0]
 8005e6c:	6163      	str	r3, [r4, #20]
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	6120      	str	r0, [r4, #16]
 8005e72:	b15b      	cbz	r3, 8005e8c <__smakebuf_r+0x70>
 8005e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f81d 	bl	8005eb8 <_isatty_r>
 8005e7e:	b128      	cbz	r0, 8005e8c <__smakebuf_r+0x70>
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	431d      	orrs	r5, r3
 8005e90:	81a5      	strh	r5, [r4, #12]
 8005e92:	e7cf      	b.n	8005e34 <__smakebuf_r+0x18>

08005e94 <_fstat_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d07      	ldr	r5, [pc, #28]	; (8005eb4 <_fstat_r+0x20>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	f7fd f9fa 	bl	800329a <_fstat>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	d102      	bne.n	8005eb0 <_fstat_r+0x1c>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	b103      	cbz	r3, 8005eb0 <_fstat_r+0x1c>
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000b9c 	.word	0x20000b9c

08005eb8 <_isatty_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d06      	ldr	r5, [pc, #24]	; (8005ed4 <_isatty_r+0x1c>)
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4604      	mov	r4, r0
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	602b      	str	r3, [r5, #0]
 8005ec4:	f7fd f9f9 	bl	80032ba <_isatty>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_isatty_r+0x1a>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_isatty_r+0x1a>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	20000b9c 	.word	0x20000b9c

08005ed8 <_init>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr

08005ee4 <_fini>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	bf00      	nop
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr
